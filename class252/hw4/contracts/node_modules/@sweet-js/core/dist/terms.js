'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isExportDeclaration = exports.isImportDeclaration = exports.isCompiletimeStatement = exports.isCompiletimeDeclaration = exports.isSyntaxDeclarationStatement = exports.isExportSyntax = exports.isParenthesizedExpression = exports.isFunctionWithName = exports.isFunctionTerm = exports.isSyntaxrecDeclaration = exports.isSyntaxDeclaration = exports.isEOF = exports.isVariableDeclarator = exports.isVariableDeclaration = exports.isSyntaxTemplate = exports.isTemplateElement = exports.isSwitchDefault = exports.isSwitchCase = exports.isSuper = exports.isSpreadElement = exports.isScript = exports.isFunctionDeclaration = exports.isFunctionBody = exports.isFormalParameters = exports.isDirective = exports.isCatchClause = exports.isBlock = exports.isWithStatement = exports.isWhileStatement = exports.isVariableDeclarationStatement = exports.isTryFinallyStatement = exports.isTryCatchStatement = exports.isThrowStatement = exports.isSwitchStatementWithDefault = exports.isSwitchStatement = exports.isReturnStatement = exports.isLabeledStatement = exports.isIfStatement = exports.isForStatement = exports.isForOfStatement = exports.isForInStatement = exports.isExpressionStatement = exports.isEmptyStatement = exports.isDoWhileStatement = exports.isDebuggerStatement = exports.isCompoundAssignmentExpression = exports.isContinueStatement = exports.isBreakStatement = exports.isBlockStatement = exports.isYieldGeneratorExpression = exports.isYieldExpression = exports.isUpdateExpression = exports.isThisExpression = exports.isTemplateExpression = exports.isStaticMemberExpression = exports.isUnaryExpression = exports.isObjectExpression = exports.isNewTargetExpression = exports.isNewExpression = exports.isIdentifierExpression = exports.isFunctionExpression = exports.isConditionalExpression = exports.isComputedMemberExpression = exports.isComputedAssignmentExpression = exports.isCallExpression = exports.isBinaryExpression = exports.isAssignmentExpression = exports.isArrowExpression = exports.isArrayExpression = exports.isLiteralStringExpression = exports.isLiteralRegExpExpression = exports.isLiteralNumericExpression = exports.isLiteralNullExpression = exports.isLiteralInfinityExpression = exports.isLiteralBooleanExpression = exports.isStaticPropertyName = exports.isComputedPropertyName = exports.isShorthandProperty = exports.isDataProperty = exports.isSetter = exports.isGetter = exports.isMethod = exports.isExportSpecifier = exports.isExportDefault = exports.isExport = exports.isExportFrom = exports.isExportAllFrom = exports.isImportSpecifier = exports.isImportNamespace = exports.isImport = exports.isModule = exports.isClassElement = exports.isClassDeclaration = exports.isClassExpression = exports.isBindingPropertyProperty = exports.isBindingPropertyIdentifier = exports.isObjectBinding = exports.isArrayBinding = exports.isBindingIdentifier = exports.isBindingWithDefault = undefined;

var _ramda = require('ramda');

var R = _interopRequireWildcard(_ramda);

var _sweetSpec = require('sweet-spec');

var _sweetSpec2 = _interopRequireDefault(_sweetSpec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// bindings
const isBindingWithDefault = exports.isBindingWithDefault = R.whereEq({ type: 'BindingWithDefault' });
const isBindingIdentifier = exports.isBindingIdentifier = R.whereEq({ type: 'BindingIdentifier' });
const isArrayBinding = exports.isArrayBinding = R.whereEq({ type: 'ArrayBinding' });
const isObjectBinding = exports.isObjectBinding = R.whereEq({ type: 'ObjectBinding' });
const isBindingPropertyIdentifier = exports.isBindingPropertyIdentifier = R.whereEq({
  type: 'BindingPropertyIdentifier'
});
const isBindingPropertyProperty = exports.isBindingPropertyProperty = R.whereEq({
  type: 'BindingPropertyIdentifier'
});

// class
const isClassExpression = exports.isClassExpression = R.whereEq({ type: 'ClassExpression' });
const isClassDeclaration = exports.isClassDeclaration = R.whereEq({ type: 'ClassDeclaration' });
const isClassElement = exports.isClassElement = R.whereEq({ type: 'ClassElement' });

// modules
const isModule = exports.isModule = R.whereEq({ type: 'Module' });
const isImport = exports.isImport = R.whereEq({ type: 'Import' });
const isImportNamespace = exports.isImportNamespace = R.whereEq({ type: 'ImportNamespace' });
const isImportSpecifier = exports.isImportSpecifier = R.whereEq({ type: 'ImportSpecifier' });
const isExportAllFrom = exports.isExportAllFrom = R.whereEq({ type: 'ExportAllFrom' });
const isExportFrom = exports.isExportFrom = R.whereEq({ type: 'ExportFrom' });
const isExport = exports.isExport = R.whereEq({ type: 'Export' });
const isExportDefault = exports.isExportDefault = R.whereEq({ type: 'ExportDefault' });
const isExportSpecifier = exports.isExportSpecifier = R.whereEq({ type: 'ExportSpecifier' });

// property definition
const isMethod = exports.isMethod = R.whereEq({ type: 'Method' });
const isGetter = exports.isGetter = R.whereEq({ type: 'Getter' });
const isSetter = exports.isSetter = R.whereEq({ type: 'Setter' });
const isDataProperty = exports.isDataProperty = R.whereEq({ type: 'DataProperty' });
const isShorthandProperty = exports.isShorthandProperty = R.whereEq({ type: 'ShorthandProperty' });
const isComputedPropertyName = exports.isComputedPropertyName = R.whereEq({
  type: 'ComputedPropertyName'
});
const isStaticPropertyName = exports.isStaticPropertyName = R.whereEq({ type: 'StaticPropertyName' });

// literals
const isLiteralBooleanExpression = exports.isLiteralBooleanExpression = R.whereEq({
  type: 'LiteralBooleanExpression'
});
const isLiteralInfinityExpression = exports.isLiteralInfinityExpression = R.whereEq({
  type: 'LiteralInfinityExpression'
});
const isLiteralNullExpression = exports.isLiteralNullExpression = R.whereEq({
  type: 'LiteralNullExpression'
});
const isLiteralNumericExpression = exports.isLiteralNumericExpression = R.whereEq({
  type: 'LiteralNumericExpression'
});
const isLiteralRegExpExpression = exports.isLiteralRegExpExpression = R.whereEq({
  type: 'LiteralRegExpExpression'
});
const isLiteralStringExpression = exports.isLiteralStringExpression = R.whereEq({
  type: 'LiteralStringExpression'
});

// expressions
const isArrayExpression = exports.isArrayExpression = R.whereEq({ type: 'ArrayExpression' });
const isArrowExpression = exports.isArrowExpression = R.whereEq({ type: 'ArrowExpression' });
const isAssignmentExpression = exports.isAssignmentExpression = R.whereEq({
  type: 'AssignmentExpression'
});
const isBinaryExpression = exports.isBinaryExpression = R.whereEq({ type: 'BinaryExpression' });
const isCallExpression = exports.isCallExpression = R.whereEq({ type: 'CallExpression' });
const isComputedAssignmentExpression = exports.isComputedAssignmentExpression = R.whereEq({
  type: 'ComputedAssignmentExpression'
});
const isComputedMemberExpression = exports.isComputedMemberExpression = R.whereEq({
  type: 'ComputedMemberExpression'
});
const isConditionalExpression = exports.isConditionalExpression = R.whereEq({
  type: 'ConditionalExpression'
});
const isFunctionExpression = exports.isFunctionExpression = R.whereEq({ type: 'FunctionExpression' });
const isIdentifierExpression = exports.isIdentifierExpression = R.whereEq({
  type: 'IdentifierExpression'
});
const isNewExpression = exports.isNewExpression = R.whereEq({ type: 'NewExpression' });
const isNewTargetExpression = exports.isNewTargetExpression = R.whereEq({ type: 'NewTargetExpression' });
const isObjectExpression = exports.isObjectExpression = R.whereEq({ type: 'ObjectExpression' });
const isUnaryExpression = exports.isUnaryExpression = R.whereEq({ type: 'UnaryExpression' });
const isStaticMemberExpression = exports.isStaticMemberExpression = R.whereEq({
  type: 'StaticMemberExpression'
});
const isTemplateExpression = exports.isTemplateExpression = R.whereEq({ type: 'TemplateExpression' });
const isThisExpression = exports.isThisExpression = R.whereEq({ type: 'ThisExpression' });
const isUpdateExpression = exports.isUpdateExpression = R.whereEq({ type: 'UpdateExpression' });
const isYieldExpression = exports.isYieldExpression = R.whereEq({ type: 'YieldExpression' });
const isYieldGeneratorExpression = exports.isYieldGeneratorExpression = R.whereEq({
  type: 'YieldGeneratorExpression'
});

// statements
const isBlockStatement = exports.isBlockStatement = R.whereEq({ type: 'BlockStatement' });
const isBreakStatement = exports.isBreakStatement = R.whereEq({ type: 'BreakStatement' });
const isContinueStatement = exports.isContinueStatement = R.whereEq({ type: 'ContinueStatement' });
const isCompoundAssignmentExpression = exports.isCompoundAssignmentExpression = R.whereEq({
  type: 'CompoundAssignmentExpression'
});
const isDebuggerStatement = exports.isDebuggerStatement = R.whereEq({ type: 'DebuggerStatement' });
const isDoWhileStatement = exports.isDoWhileStatement = R.whereEq({ type: 'DoWhileStatement' });
const isEmptyStatement = exports.isEmptyStatement = R.whereEq({ type: 'EmptyStatement' });
const isExpressionStatement = exports.isExpressionStatement = R.whereEq({ type: 'ExpressionStatement' });
const isForInStatement = exports.isForInStatement = R.whereEq({ type: 'ForInStatement' });
const isForOfStatement = exports.isForOfStatement = R.whereEq({ type: 'ForOfStatement' });
const isForStatement = exports.isForStatement = R.whereEq({ type: 'ForStatement' });
const isIfStatement = exports.isIfStatement = R.whereEq({ type: 'IfStatement' });
const isLabeledStatement = exports.isLabeledStatement = R.whereEq({ type: 'LabeledStatement' });
const isReturnStatement = exports.isReturnStatement = R.whereEq({ type: 'ReturnStatement' });
const isSwitchStatement = exports.isSwitchStatement = R.whereEq({ type: 'SwitchStatement' });
const isSwitchStatementWithDefault = exports.isSwitchStatementWithDefault = R.whereEq({
  type: 'SwitchStatementWithDefault'
});
const isThrowStatement = exports.isThrowStatement = R.whereEq({ type: 'ThrowStatement' });
const isTryCatchStatement = exports.isTryCatchStatement = R.whereEq({ type: 'TryCatchStatement' });
const isTryFinallyStatement = exports.isTryFinallyStatement = R.whereEq({ type: 'TryFinallyStatement' });
const isVariableDeclarationStatement = exports.isVariableDeclarationStatement = R.whereEq({
  type: 'VariableDeclarationStatement'
});
const isWhileStatement = exports.isWhileStatement = R.whereEq({ type: 'WhileStatement' });
const isWithStatement = exports.isWithStatement = R.whereEq({ type: 'WithStatement' });

// other
const isBlock = exports.isBlock = R.whereEq({ type: 'Block' });
const isCatchClause = exports.isCatchClause = R.whereEq({ type: 'CatchClause' });
const isDirective = exports.isDirective = R.whereEq({ type: 'Directive' });
const isFormalParameters = exports.isFormalParameters = R.whereEq({ type: 'FormalParameters' });
const isFunctionBody = exports.isFunctionBody = R.whereEq({ type: 'FunctionBody' });
const isFunctionDeclaration = exports.isFunctionDeclaration = R.whereEq({ type: 'FunctionDeclaration' });
const isScript = exports.isScript = R.whereEq({ type: 'Script' });
const isSpreadElement = exports.isSpreadElement = R.whereEq({ type: 'SpreadElement' });
const isSuper = exports.isSuper = R.whereEq({ type: 'Super' });
const isSwitchCase = exports.isSwitchCase = R.whereEq({ type: 'SwitchCase' });
const isSwitchDefault = exports.isSwitchDefault = R.whereEq({ type: 'SwitchDefault' });
const isTemplateElement = exports.isTemplateElement = R.whereEq({ type: 'TemplateElement' });
const isSyntaxTemplate = exports.isSyntaxTemplate = R.whereEq({ type: 'SyntaxTemplate' });
const isVariableDeclaration = exports.isVariableDeclaration = R.whereEq({ type: 'VariableDeclaration' });
const isVariableDeclarator = exports.isVariableDeclarator = R.whereEq({ type: 'VariableDeclarator' });
const isEOF = exports.isEOF = R.whereEq({ type: 'EOF' });
const isSyntaxDeclaration = exports.isSyntaxDeclaration = R.both(isVariableDeclaration, R.whereEq({ kind: 'syntax' }));
const isSyntaxrecDeclaration = exports.isSyntaxrecDeclaration = R.both(isVariableDeclaration, R.whereEq({ kind: 'syntaxrec' }));
const isFunctionTerm = exports.isFunctionTerm = R.either(isFunctionDeclaration, isFunctionExpression);
const isFunctionWithName = exports.isFunctionWithName = R.and(isFunctionTerm, R.complement(R.where({ name: R.isNil })));
const isParenthesizedExpression = exports.isParenthesizedExpression = R.whereEq({
  type: 'ParenthesizedExpression'
});
const isExportSyntax = exports.isExportSyntax = R.both(isExport, exp => R.or(isSyntaxDeclaration(exp.declaration), isSyntaxrecDeclaration(exp.declaration)));
const isSyntaxDeclarationStatement = exports.isSyntaxDeclarationStatement = R.both(isVariableDeclarationStatement, decl => isCompiletimeDeclaration(decl.declaration));

const isCompiletimeDeclaration = exports.isCompiletimeDeclaration = R.either(isSyntaxDeclaration, isSyntaxrecDeclaration);
const isCompiletimeStatement = exports.isCompiletimeStatement = term => {
  return term instanceof _sweetSpec2.default && isVariableDeclarationStatement(term) && isCompiletimeDeclaration(term.declaration);
};
const isImportDeclaration = exports.isImportDeclaration = R.either(isImport, isImportNamespace);
const isExportDeclaration = exports.isExportDeclaration = R.either(isExport, isExportDefault, isExportFrom, isExportAllFrom);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXJtcy5qcyJdLCJuYW1lcyI6WyJSIiwiaXNCaW5kaW5nV2l0aERlZmF1bHQiLCJ3aGVyZUVxIiwidHlwZSIsImlzQmluZGluZ0lkZW50aWZpZXIiLCJpc0FycmF5QmluZGluZyIsImlzT2JqZWN0QmluZGluZyIsImlzQmluZGluZ1Byb3BlcnR5SWRlbnRpZmllciIsImlzQmluZGluZ1Byb3BlcnR5UHJvcGVydHkiLCJpc0NsYXNzRXhwcmVzc2lvbiIsImlzQ2xhc3NEZWNsYXJhdGlvbiIsImlzQ2xhc3NFbGVtZW50IiwiaXNNb2R1bGUiLCJpc0ltcG9ydCIsImlzSW1wb3J0TmFtZXNwYWNlIiwiaXNJbXBvcnRTcGVjaWZpZXIiLCJpc0V4cG9ydEFsbEZyb20iLCJpc0V4cG9ydEZyb20iLCJpc0V4cG9ydCIsImlzRXhwb3J0RGVmYXVsdCIsImlzRXhwb3J0U3BlY2lmaWVyIiwiaXNNZXRob2QiLCJpc0dldHRlciIsImlzU2V0dGVyIiwiaXNEYXRhUHJvcGVydHkiLCJpc1Nob3J0aGFuZFByb3BlcnR5IiwiaXNDb21wdXRlZFByb3BlcnR5TmFtZSIsImlzU3RhdGljUHJvcGVydHlOYW1lIiwiaXNMaXRlcmFsQm9vbGVhbkV4cHJlc3Npb24iLCJpc0xpdGVyYWxJbmZpbml0eUV4cHJlc3Npb24iLCJpc0xpdGVyYWxOdWxsRXhwcmVzc2lvbiIsImlzTGl0ZXJhbE51bWVyaWNFeHByZXNzaW9uIiwiaXNMaXRlcmFsUmVnRXhwRXhwcmVzc2lvbiIsImlzTGl0ZXJhbFN0cmluZ0V4cHJlc3Npb24iLCJpc0FycmF5RXhwcmVzc2lvbiIsImlzQXJyb3dFeHByZXNzaW9uIiwiaXNBc3NpZ25tZW50RXhwcmVzc2lvbiIsImlzQmluYXJ5RXhwcmVzc2lvbiIsImlzQ2FsbEV4cHJlc3Npb24iLCJpc0NvbXB1dGVkQXNzaWdubWVudEV4cHJlc3Npb24iLCJpc0NvbXB1dGVkTWVtYmVyRXhwcmVzc2lvbiIsImlzQ29uZGl0aW9uYWxFeHByZXNzaW9uIiwiaXNGdW5jdGlvbkV4cHJlc3Npb24iLCJpc0lkZW50aWZpZXJFeHByZXNzaW9uIiwiaXNOZXdFeHByZXNzaW9uIiwiaXNOZXdUYXJnZXRFeHByZXNzaW9uIiwiaXNPYmplY3RFeHByZXNzaW9uIiwiaXNVbmFyeUV4cHJlc3Npb24iLCJpc1N0YXRpY01lbWJlckV4cHJlc3Npb24iLCJpc1RlbXBsYXRlRXhwcmVzc2lvbiIsImlzVGhpc0V4cHJlc3Npb24iLCJpc1VwZGF0ZUV4cHJlc3Npb24iLCJpc1lpZWxkRXhwcmVzc2lvbiIsImlzWWllbGRHZW5lcmF0b3JFeHByZXNzaW9uIiwiaXNCbG9ja1N0YXRlbWVudCIsImlzQnJlYWtTdGF0ZW1lbnQiLCJpc0NvbnRpbnVlU3RhdGVtZW50IiwiaXNDb21wb3VuZEFzc2lnbm1lbnRFeHByZXNzaW9uIiwiaXNEZWJ1Z2dlclN0YXRlbWVudCIsImlzRG9XaGlsZVN0YXRlbWVudCIsImlzRW1wdHlTdGF0ZW1lbnQiLCJpc0V4cHJlc3Npb25TdGF0ZW1lbnQiLCJpc0ZvckluU3RhdGVtZW50IiwiaXNGb3JPZlN0YXRlbWVudCIsImlzRm9yU3RhdGVtZW50IiwiaXNJZlN0YXRlbWVudCIsImlzTGFiZWxlZFN0YXRlbWVudCIsImlzUmV0dXJuU3RhdGVtZW50IiwiaXNTd2l0Y2hTdGF0ZW1lbnQiLCJpc1N3aXRjaFN0YXRlbWVudFdpdGhEZWZhdWx0IiwiaXNUaHJvd1N0YXRlbWVudCIsImlzVHJ5Q2F0Y2hTdGF0ZW1lbnQiLCJpc1RyeUZpbmFsbHlTdGF0ZW1lbnQiLCJpc1ZhcmlhYmxlRGVjbGFyYXRpb25TdGF0ZW1lbnQiLCJpc1doaWxlU3RhdGVtZW50IiwiaXNXaXRoU3RhdGVtZW50IiwiaXNCbG9jayIsImlzQ2F0Y2hDbGF1c2UiLCJpc0RpcmVjdGl2ZSIsImlzRm9ybWFsUGFyYW1ldGVycyIsImlzRnVuY3Rpb25Cb2R5IiwiaXNGdW5jdGlvbkRlY2xhcmF0aW9uIiwiaXNTY3JpcHQiLCJpc1NwcmVhZEVsZW1lbnQiLCJpc1N1cGVyIiwiaXNTd2l0Y2hDYXNlIiwiaXNTd2l0Y2hEZWZhdWx0IiwiaXNUZW1wbGF0ZUVsZW1lbnQiLCJpc1N5bnRheFRlbXBsYXRlIiwiaXNWYXJpYWJsZURlY2xhcmF0aW9uIiwiaXNWYXJpYWJsZURlY2xhcmF0b3IiLCJpc0VPRiIsImlzU3ludGF4RGVjbGFyYXRpb24iLCJib3RoIiwia2luZCIsImlzU3ludGF4cmVjRGVjbGFyYXRpb24iLCJpc0Z1bmN0aW9uVGVybSIsImVpdGhlciIsImlzRnVuY3Rpb25XaXRoTmFtZSIsImFuZCIsImNvbXBsZW1lbnQiLCJ3aGVyZSIsIm5hbWUiLCJpc05pbCIsImlzUGFyZW50aGVzaXplZEV4cHJlc3Npb24iLCJpc0V4cG9ydFN5bnRheCIsImV4cCIsIm9yIiwiZGVjbGFyYXRpb24iLCJpc1N5bnRheERlY2xhcmF0aW9uU3RhdGVtZW50IiwiZGVjbCIsImlzQ29tcGlsZXRpbWVEZWNsYXJhdGlvbiIsImlzQ29tcGlsZXRpbWVTdGF0ZW1lbnQiLCJ0ZXJtIiwiaXNJbXBvcnREZWNsYXJhdGlvbiIsImlzRXhwb3J0RGVjbGFyYXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7SUFBWUEsQzs7QUFDWjs7Ozs7Ozs7QUFFQTtBQUNPLE1BQU1DLHNEQUF1QkQsRUFBRUUsT0FBRixDQUFVLEVBQUVDLE1BQU0sb0JBQVIsRUFBVixDQUE3QjtBQUNBLE1BQU1DLG9EQUFzQkosRUFBRUUsT0FBRixDQUFVLEVBQUVDLE1BQU0sbUJBQVIsRUFBVixDQUE1QjtBQUNBLE1BQU1FLDBDQUFpQkwsRUFBRUUsT0FBRixDQUFVLEVBQUVDLE1BQU0sY0FBUixFQUFWLENBQXZCO0FBQ0EsTUFBTUcsNENBQWtCTixFQUFFRSxPQUFGLENBQVUsRUFBRUMsTUFBTSxlQUFSLEVBQVYsQ0FBeEI7QUFDQSxNQUFNSSxvRUFBOEJQLEVBQUVFLE9BQUYsQ0FBVTtBQUNuREMsUUFBTTtBQUQ2QyxDQUFWLENBQXBDO0FBR0EsTUFBTUssZ0VBQTRCUixFQUFFRSxPQUFGLENBQVU7QUFDakRDLFFBQU07QUFEMkMsQ0FBVixDQUFs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TU0sb0RBQXNCbEgsRUFBRWlHLE1BQUYsQ0FBU3BGLFFBQVQsRUFBbUJDLGlCQUFuQixDQUE1QjtBQUNBLE1BQU1xRyxvREFBc0JuSCxFQUFFaUcsTUFBRixDQUNqQy9FLFFBRGlDLEVBRWpDQyxlQUZpQyxFQUdqQ0YsWUFIaUMsRUFJakNELGVBSmlDLENBQTVCIiwiZmlsZSI6InRlcm1zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUiBmcm9tICdyYW1kYSc7XG5pbXBvcnQgVGVybSBmcm9tICdzd2VldC1zcGVjJztcblxuLy8gYmluZGluZ3NcbmV4cG9ydCBjb25zdCBpc0JpbmRpbmdXaXRoRGVmYXVsdCA9IFIud2hlcmVFcSh7IHR5cGU6ICdCaW5kaW5nV2l0aERlZmF1bHQnIH0pO1xuZXhwb3J0IGNvbnN0IGlzQmluZGluZ0lkZW50aWZpZXIgPSBSLndoZXJlRXEoeyB0eXBlOiAnQmluZGluZ0lkZW50aWZpZXInIH0pO1xuZXhwb3J0IGNvbnN0IGlzQXJyYXlCaW5kaW5nID0gUi53aGVyZUVxKHsgdHlwZTogJ0FycmF5QmluZGluZycgfSk7XG5leHBvcnQgY29uc3QgaXNPYmplY3RCaW5kaW5nID0gUi53aGVyZUVxKHsgdHlwZTogJ09iamVjdEJpbmRpbmcnIH0pO1xuZXhwb3J0IGNvbnN0IGlzQmluZGluZ1Byb3BlcnR5SWRlbnRpZmllciA9IFIud2hlcmVFcSh7XG4gIHR5cGU6ICdCaW5kaW5nUHJvcGVydHlJZGVudGlmaWVyJyxcbn0pO1xuZXhwb3J0IGNvbnN0IGlzQmluZGluZ1Byb3BlcnR5UHJvcGVydHkgPSBSLndoZXJlRXEoe1xuICB0eXBlOiAnQmluZGluZ1Byb3BlcnR5SWRlbnRpZmllcicsXG59KTtcblxuLy8gY2xhc3NcbmV4cG9ydCBjb25zdCBpc0NsYXNzRXhwcmVzc2lvbiA9IFIud2hlcmVFcSh7IHR5cGU6ICdDbGFzc0V4cHJlc3Npb24nIH0pO1xuZXhwb3J0IGNvbnN0IGlzQ2xhc3NEZWNsYXJhdGlvbiA9IFIud2hlcmVFcSh7IHR5cGU6ICdDbGFzc0RlY2xhcmF0aW9uJyB9KTtcbmV4cG9ydCBjb25zdCBpc0NsYXNzRWxlbWVudCA9IFIud2hlcmVFcSh7IHR5cGU6ICdDbGFzc0VsZW1lbnQnIH0pO1xuXG4vLyBtb2R1bGVzXG5leHBvcnQgY29uc3QgaXNNb2R1bGUgPSBSLndoZXJlRXEoeyB0eXBlOiAnTW9kdWxlJyB9KTtcbmV4cG9ydCBjb25zdCBpc0ltcG9ydCA9IFIud2hlcmVFcSh7IHR5cGU6ICdJbXBvcnQnIH0pO1xuZXhwb3J0IGNvbnN0IGlzSW1wb3J0TmFtZXNwYWNlID0gUi53aGVyZUVxKHsgdHlwZTogJ0ltcG9ydE5hbWVzcGFjZScgfSk7XG5leHBvcnQgY29uc3QgaXNJbXBvcnRTcGVjaWZpZXIgPSBSLndoZXJlRXEoeyB0eXBlOiAnSW1wb3J0U3BlY2lmaWVyJyB9KTtcbmV4cG9ydCBjb25zdCBpc0V4cG9ydEFsbEZyb20gPSBSLndoZXJlRXEoeyB0eXBlOiAnRXhwb3J0QWxsRnJvbScgfSk7XG5leHBvcnQgY29uc3QgaXNFeHBvcnRGcm9tID0gUi53aGVyZUVxKHsgdHlwZTogJ0V4cG9ydEZyb20nIH0pO1xuZXhwb3J0IGNvbnN0IGlzRXhwb3J0ID0gUi53aGVyZUVxKHsgdHlwZTogJ0V4cG9ydCcgfSk7XG5leHBvcnQgY29uc3QgaXNFeHBvcnREZWZhdWx0ID0gUi53aGVyZUVxKHsgdHlwZTogJ0V4cG9ydERlZmF1bHQnIH0pO1xuZXhwb3J0IGNvbnN0IGlzRXhwb3J0U3BlY2lmaWVyID0gUi53aGVyZUVxKHsgdHlwZTogJ0V4cG9ydFNwZWNpZmllcicgfSk7XG5cbi8vIHByb3BlcnR5IGRlZmluaXRpb25cbmV4cG9ydCBjb25zdCBpc01ldGhvZCA9IFIud2hlcmVFcSh7IHR5cGU6ICdNZXRob2QnIH0pO1xuZXhwb3J0IGNvbnN0IGlzR2V0dGVyID0gUi53aGVyZUVxKHsgdHlwZTogJ0dldHRlcicgfSk7XG5leHBvcnQgY29uc3QgaXNTZXR0ZXIgPSBSLndoZXJlRXEoeyB0eXBlOiAnU2V0dGVyJyB9KTtcbmV4cG9ydCBjb25zdCBpc0RhdGFQcm9wZXJ0eSA9IFIud2hlcmVFcSh7IHR5cGU6ICdEYXRhUHJvcGVydHknIH0pO1xuZXhwb3J0IGNvbnN0IGlzU2hvcnRoYW5kUHJvcGVydHkgPSBSLndoZXJlRXEoeyB0eXBlOiAnU2hvcnRoYW5kUHJvcGVydHknIH0pO1xuZXhwb3J0IGNvbnN0IGlzQ29tcHV0ZWRQcm9wZXJ0eU5hbWUgPSBSLndoZXJlRXEoe1xuICB0eXBlOiAnQ29tcHV0ZWRQcm9wZXJ0eU5hbWUnLFxufSk7XG5leHBvcnQgY29uc3QgaXNTdGF0aWNQcm9wZXJ0eU5hbWUgPSBSLndoZXJlRXEoeyB0eXBlOiAnU3RhdGljUHJvcGVydHlOYW1lJyB9KTtcblxuLy8gbGl0ZXJhbHNcbmV4cG9ydCBjb25zdCBpc0xpdGVyYWxCb29sZWFuRXhwcmVzc2lvbiA9IFIud2hlcmVFcSh7XG4gIHR5cGU6ICdMaXRlcmFsQm9vbGVhbkV4cHJlc3Npb24nLFxufSk7XG5leHBvcnQgY29uc3QgaXNMaXRlcmFsSW5maW5pdHlFeHByZXNzaW9uID0gUi53aGVyZUVxKHtcbiAgdHlwZTogJ0xpdGVyYWxJbmZpbml0eUV4cHJlc3Npb24nLFxufSk7XG5leHBvcnQgY29uc3QgaXNMaXRlcmFsTnVsbEV4cHJlc3Npb24gPSBSLndoZXJlRXEoe1xuICB0eXBlOiAnTGl0ZXJhbE51bGxFeHByZXNzaW9uJyxcbn0pO1xuZXhwb3J0IGNvbnN0IGlzTGl0ZXJhbE51bWVyaWNFeHByZXNzaW9uID0gUi53aGVyZUVxKHtcbiAgdHlwZTogJ0xpdGVyYWxOdW1lcmljRXhwcmVzc2lvbicsXG59KTtcbmV4cG9ydCBjb25zdCBpc0xpdGVyYWxSZWdFeHBFeHByZXNzaW9uID0gUi53aGVyZUVxKHtcbiAgdHlwZTogJ0xpdGVyYWxSZWdFeHBFeHByZXNzaW9uJyxcbn0pO1xuZXhwb3J0IGNvbnN0IGlzTGl0ZXJhbFN0cmluZ0V4cHJlc3Npb24gPSBSLndoZXJlRXEoe1xuICB0eXBlOiAnTGl0ZXJhbFN0cmluZ0V4cHJlc3Npb24nLFxufSk7XG5cbi8vIGV4cHJlc3Npb25zXG5leHBvcnQgY29uc3QgaXNBcnJheUV4cHJlc3Npb24gPSBSLndoZXJlRXEoeyB0eXBlOiAnQXJyYXlFeHByZXNzaW9uJyB9KTtcbmV4cG9ydCBjb25zdCBpc0Fycm93RXhwcmVzc2lvbiA9IFIud2hlcmVFcSh7IHR5cGU6ICdBcnJvd0V4cHJlc3Npb24nIH0pO1xuZXhwb3J0IGNvbnN0IGlzQXNzaWdubWVudEV4cHJlc3Npb24gPSBSLndoZXJlRXEoe1xuICB0eXBlOiAnQXNzaWdubWVudEV4cHJlc3Npb24nLFxufSk7XG5leHBvcnQgY29uc3QgaXNCaW5hcnlFeHByZXNzaW9uID0gUi53aGVyZUVxKHsgdHlwZTogJ0JpbmFyeUV4cHJlc3Npb24nIH0pO1xuZXhwb3J0IGNvbnN0IGlzQ2FsbEV4cHJlc3Npb24gPSBSLndoZXJlRXEoeyB0eXBlOiAnQ2FsbEV4cHJlc3Npb24nIH0pO1xuZXhwb3J0IGNvbnN0IGlzQ29tcHV0ZWRBc3NpZ25tZW50RXhwcmVzc2lvbiA9IFIud2hlcmVFcSh7XG4gIHR5cGU6ICdDb21wdXRlZEFzc2lnbm1lbnRFeHByZXNzaW9uJyxcbn0pO1xuZXhwb3J0IGNvbnN0IGlzQ29tcHV0ZWRNZW1iZXJFeHByZXNzaW9uID0gUi53aGVyZUVxKHtcbiAgdHlwZTogJ0NvbXB1dGVkTWVtYmVyRXhwcmVzc2lvbicsXG59KTtcbmV4cG9ydCBjb25zdCBpc0NvbmRpdGlvbmFsRXhwcmVzc2lvbiA9IFIud2hlcmVFcSh7XG4gIHR5cGU6ICdDb25kaXRpb25hbEV4cHJlc3Npb24nLFxufSk7XG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbkV4cHJlc3Npb24gPSBSLndoZXJlRXEoeyB0eXBlOiAnRnVuY3Rpb25FeHByZXNzaW9uJyB9KTtcbmV4cG9ydCBjb25zdCBpc0lkZW50aWZpZXJFeHByZXNzaW9uID0gUi53aGVyZUVxKHtcbiAgdHlwZTogJ0lkZW50aWZpZXJFeHByZXNzaW9uJyxcbn0pO1xuZXhwb3J0IGNvbnN0IGlzTmV3RXhwcmVzc2lvbiA9IFIud2hlcmVFcSh7IHR5cGU6ICdOZXdFeHByZXNzaW9uJyB9KTtcbmV4cG9ydCBjb25zdCBpc05ld1RhcmdldEV4cHJlc3Npb24gPSBSLndoZXJlRXEoeyB0eXBlOiAnTmV3VGFyZ2V0RXhwcmVzc2lvbicgfSk7XG5leHBvcnQgY29uc3QgaXNPYmplY3RFeHByZXNzaW9uID0gUi53aGVyZUVxKHsgdHlwZTogJ09iamVjdEV4cHJlc3Npb24nIH0pO1xuZXhwb3J0IGNvbnN0IGlzVW5hcnlFeHByZXNzaW9uID0gUi53aGVyZUVxKHsgdHlwZTogJ1VuYXJ5RXhwcmVzc2lvbicgfSk7XG5leHBvcnQgY29uc3QgaXNTdGF0aWNNZW1iZXJFeHByZXNzaW9uID0gUi53aGVyZUVxKHtcbiAgdHlwZTogJ1N0YXRpY01lbWJlckV4cHJlc3Npb24nLFxufSk7XG5leHBvcnQgY29uc3QgaXNUZW1wbGF0ZUV4cHJlc3Npb24gPSBSLndoZXJlRXEoeyB0eXBlOiAnVGVtcGxhdGVFeHByZXNzaW9uJyB9KTtcbmV4cG9ydCBjb25zdCBpc1RoaXNFeHByZXNzaW9uID0gUi53aGVyZUVxKHsgdHlwZTogJ1RoaXNFeHByZXNzaW9uJyB9KTtcbmV4cG9ydCBjb25zdCBpc1VwZGF0ZUV4cHJlc3Npb24gPSBSLndoZXJlRXEoeyB0eXBlOiAnVXBkYXRlRXhwcmVzc2lvbicgfSk7XG5leHBvcnQgY29uc3QgaXNZaWVsZEV4cHJlc3Npb24gPSBSLndoZXJlRXEoeyB0eXBlOiAnWWllbGRFeHByZXNzaW9uJyB9KTtcbmV4cG9ydCBjb25zdCBpc1lpZWxkR2VuZXJhdG9yRXhwcmVzc2lvbiA9IFIud2hlcmVFcSh7XG4gIHR5cGU6ICdZaWVsZEdlbmVyYXRvckV4cHJlc3Npb24nLFxufSk7XG5cbi8vIHN0YXRlbWVudHNcbmV4cG9ydCBjb25zdCBpc0Jsb2NrU3RhdGVtZW50ID0gUi53aGVyZUVxKHsgdHlwZTogJ0Jsb2NrU3RhdGVtZW50JyB9KTtcbmV4cG9ydCBjb25zdCBpc0JyZWFrU3RhdGVtZW50ID0gUi53aGVyZUVxKHsgdHlwZTogJ0JyZWFrU3RhdGVtZW50JyB9KTtcbmV4cG9ydCBjb25zdCBpc0NvbnRpbnVlU3RhdGVtZW50ID0gUi53aGVyZUVxKHsgdHlwZTogJ0NvbnRpbnVlU3RhdGVtZW50JyB9KTtcbmV4cG9ydCBjb25zdCBpc0NvbXBvdW5kQXNzaWdubWVudEV4cHJlc3Npb24gPSBSLndoZXJlRXEoe1xuICB0eXBlOiAnQ29tcG91bmRBc3NpZ25tZW50RXhwcmVzc2lvbicsXG59KTtcbmV4cG9ydCBjb25zdCBpc0RlYnVnZ2VyU3RhdGVtZW50ID0gUi53aGVyZUVxKHsgdHlwZTogJ0RlYnVnZ2VyU3RhdGVtZW50JyB9KTtcbmV4cG9ydCBjb25zdCBpc0RvV2hpbGVTdGF0ZW1lbnQgPSBSLndoZXJlRXEoeyB0eXBlOiAnRG9XaGlsZVN0YXRlbWVudCcgfSk7XG5leHBvcnQgY29uc3QgaXNFbXB0eVN0YXRlbWVudCA9IFIud2hlcmVFcSh7IHR5cGU6ICdFbXB0eVN0YXRlbWVudCcgfSk7XG5leHBvcnQgY29uc3QgaXNFeHByZXNzaW9uU3RhdGVtZW50ID0gUi53aGVyZUVxKHsgdHlwZTogJ0V4cHJlc3Npb25TdGF0ZW1lbnQnIH0pO1xuZXhwb3J0IGNvbnN0IGlzRm9ySW5TdGF0ZW1lbnQgPSBSLndoZXJlRXEoeyB0eXBlOiAnRm9ySW5TdGF0ZW1lbnQnIH0pO1xuZXhwb3J0IGNvbnN0IGlzRm9yT2ZTdGF0ZW1lbnQgPSBSLndoZXJlRXEoeyB0eXBlOiAnRm9yT2ZTdGF0ZW1lbnQnIH0pO1xuZXhwb3J0IGNvbnN0IGlzRm9yU3RhdGVtZW50ID0gUi53aGVyZUVxKHsgdHlwZTogJ0ZvclN0YXRlbWVudCcgfSk7XG5leHBvcnQgY29uc3QgaXNJZlN0YXRlbWVudCA9IFIud2hlcmVFcSh7IHR5cGU6ICdJZlN0YXRlbWVudCcgfSk7XG5leHBvcnQgY29uc3QgaXNMYWJlbGVkU3RhdGVtZW50ID0gUi53aGVyZUVxKHsgdHlwZTogJ0xhYmVsZWRTdGF0ZW1lbnQnIH0pO1xuZXhwb3J0IGNvbnN0IGlzUmV0dXJuU3RhdGVtZW50ID0gUi53aGVyZUVxKHsgdHlwZTogJ1JldHVyblN0YXRlbWVudCcgfSk7XG5leHBvcnQgY29uc3QgaXNTd2l0Y2hTdGF0ZW1lbnQgPSBSLndoZXJlRXEoeyB0eXBlOiAnU3dpdGNoU3RhdGVtZW50JyB9KTtcbmV4cG9ydCBjb25zdCBpc1N3aXRjaFN0YXRlbWVudFdpdGhEZWZhdWx0ID0gUi53aGVyZUVxKHtcbiAgdHlwZTogJ1N3aXRjaFN0YXRlbWVudFdpdGhEZWZhdWx0Jyxcbn0pO1xuZXhwb3J0IGNvbnN0IGlzVGhyb3dTdGF0ZW1lbnQgPSBSLndoZXJlRXEoeyB0eXBlOiAnVGhyb3dTdGF0ZW1lbnQnIH0pO1xuZXhwb3J0IGNvbnN0IGlzVHJ5Q2F0Y2hTdGF0ZW1lbnQgPSBSLndoZXJlRXEoeyB0eXBlOiAnVHJ5Q2F0Y2hTdGF0ZW1lbnQnIH0pO1xuZXhwb3J0IGNvbnN0IGlzVHJ5RmluYWxseVN0YXRlbWVudCA9IFIud2hlcmVFcSh7IHR5cGU6ICdUcnlGaW5hbGx5U3RhdGVtZW50JyB9KTtcbmV4cG9ydCBjb25zdCBpc1ZhcmlhYmxlRGVjbGFyYXRpb25TdGF0ZW1lbnQgPSBSLndoZXJlRXEoe1xuICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdGlvblN0YXRlbWVudCcsXG59KTtcbmV4cG9ydCBjb25zdCBpc1doaWxlU3RhdGVtZW50ID0gUi53aGVyZUVxKHsgdHlwZTogJ1doaWxlU3RhdGVtZW50JyB9KTtcbmV4cG9ydCBjb25zdCBpc1dpdGhTdGF0ZW1lbnQgPSBSLndoZXJlRXEoeyB0eXBlOiAnV2l0aFN0YXRlbWVudCcgfSk7XG5cbi8vIG90aGVyXG5leHBvcnQgY29uc3QgaXNCbG9jayA9IFIud2hlcmVFcSh7IHR5cGU6ICdCbG9jaycgfSk7XG5leHBvcnQgY29uc3QgaXNDYXRjaENsYXVzZSA9IFIud2hlcmVFcSh7IHR5cGU6ICdDYXRjaENsYXVzZScgfSk7XG5leHBvcnQgY29uc3QgaXNEaXJlY3RpdmUgPSBSLndoZXJlRXEoeyB0eXBlOiAnRGlyZWN0aXZlJyB9KTtcbmV4cG9ydCBjb25zdCBpc0Zvcm1hbFBhcmFtZXRlcnMgPSBSLndoZXJlRXEoeyB0eXBlOiAnRm9ybWFsUGFyYW1ldGVycycgfSk7XG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbkJvZHkgPSBSLndoZXJlRXEoeyB0eXBlOiAnRnVuY3Rpb25Cb2R5JyB9KTtcbmV4cG9ydCBjb25zdCBpc0Z1bmN0aW9uRGVjbGFyYXRpb24gPSBSLndoZXJlRXEoeyB0eXBlOiAnRnVuY3Rpb25EZWNsYXJhdGlvbicgfSk7XG5leHBvcnQgY29uc3QgaXNTY3JpcHQgPSBSLndoZXJlRXEoeyB0eXBlOiAnU2NyaXB0JyB9KTtcbmV4cG9ydCBjb25zdCBpc1NwcmVhZEVsZW1lbnQgPSBSLndoZXJlRXEoeyB0eXBlOiAnU3ByZWFkRWxlbWVudCcgfSk7XG5leHBvcnQgY29uc3QgaXNTdXBlciA9IFIud2hlcmVFcSh7IHR5cGU6ICdTdXBlcicgfSk7XG5leHBvcnQgY29uc3QgaXNTd2l0Y2hDYXNlID0gUi53aGVyZUVxKHsgdHlwZTogJ1N3aXRjaENhc2UnIH0pO1xuZXhwb3J0IGNvbnN0IGlzU3dpdGNoRGVmYXVsdCA9IFIud2hlcmVFcSh7IHR5cGU6ICdTd2l0Y2hEZWZhdWx0JyB9KTtcbmV4cG9ydCBjb25zdCBpc1RlbXBsYXRlRWxlbWVudCA9IFIud2hlcmVFcSh7IHR5cGU6ICdUZW1wbGF0ZUVsZW1lbnQnIH0pO1xuZXhwb3J0IGNvbnN0IGlzU3ludGF4VGVtcGxhdGUgPSBSLndoZXJlRXEoeyB0eXBlOiAnU3ludGF4VGVtcGxhdGUnIH0pO1xuZXhwb3J0IGNvbnN0IGlzVmFyaWFibGVEZWNsYXJhdGlvbiA9IFIud2hlcmVFcSh7IHR5cGU6ICdWYXJpYWJsZURlY2xhcmF0aW9uJyB9KTtcbmV4cG9ydCBjb25zdCBpc1ZhcmlhYmxlRGVjbGFyYXRvciA9IFIud2hlcmVFcSh7IHR5cGU6ICdWYXJpYWJsZURlY2xhcmF0b3InIH0pO1xuZXhwb3J0IGNvbnN0IGlzRU9GID0gUi53aGVyZUVxKHsgdHlwZTogJ0VPRicgfSk7XG5leHBvcnQgY29uc3QgaXNTeW50YXhEZWNsYXJhdGlvbiA9IFIuYm90aChcbiAgaXNWYXJpYWJsZURlY2xhcmF0aW9uLFxuICBSLndoZXJlRXEoeyBraW5kOiAnc3ludGF4JyB9KSxcbik7XG5leHBvcnQgY29uc3QgaXNTeW50YXhyZWNEZWNsYXJhdGlvbiA9IFIuYm90aChcbiAgaXNWYXJpYWJsZURlY2xhcmF0aW9uLFxuICBSLndoZXJlRXEoeyBraW5kOiAnc3ludGF4cmVjJyB9KSxcbik7XG5leHBvcnQgY29uc3QgaXNGdW5jdGlvblRlcm0gPSBSLmVpdGhlcihcbiAgaXNGdW5jdGlvbkRlY2xhcmF0aW9uLFxuICBpc0Z1bmN0aW9uRXhwcmVzc2lvbixcbik7XG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbldpdGhOYW1lID0gUi5hbmQoXG4gIGlzRnVuY3Rpb25UZXJtLFxuICBSLmNvbXBsZW1lbnQoUi53aGVyZSh7IG5hbWU6IFIuaXNOaWwgfSkpLFxuKTtcbmV4cG9ydCBjb25zdCBpc1BhcmVudGhlc2l6ZWRFeHByZXNzaW9uID0gUi53aGVyZUVxKHtcbiAgdHlwZTogJ1BhcmVudGhlc2l6ZWRFeHByZXNzaW9uJyxcbn0pO1xuZXhwb3J0IGNvbnN0IGlzRXhwb3J0U3ludGF4ID0gUi5ib3RoKGlzRXhwb3J0LCBleHAgPT5cbiAgUi5vcihcbiAgICBpc1N5bnRheERlY2xhcmF0aW9uKGV4cC5kZWNsYXJhdGlvbiksXG4gICAgaXNTeW50YXhyZWNEZWNsYXJhdGlvbihleHAuZGVjbGFyYXRpb24pLFxuICApLFxuKTtcbmV4cG9ydCBjb25zdCBpc1N5bnRheERlY2xhcmF0aW9uU3RhdGVtZW50ID0gUi5ib3RoKFxuICBpc1ZhcmlhYmxlRGVjbGFyYXRpb25TdGF0ZW1lbnQsXG4gIGRlY2wgPT4gaXNDb21waWxldGltZURlY2xhcmF0aW9uKGRlY2wuZGVjbGFyYXRpb24pLFxuKTtcblxuZXhwb3J0IGNvbnN0IGlzQ29tcGlsZXRpbWVEZWNsYXJhdGlvbiA9IFIuZWl0aGVyKFxuICBpc1N5bnRheERlY2xhcmF0aW9uLFxuICBpc1N5bnRheHJlY0RlY2xhcmF0aW9uLFxuKTtcbmV4cG9ydCBjb25zdCBpc0NvbXBpbGV0aW1lU3RhdGVtZW50ID0gdGVybSA9PiB7XG4gIHJldHVybiAoXG4gICAgdGVybSBpbnN0YW5jZW9mIFRlcm0gJiZcbiAgICBpc1ZhcmlhYmxlRGVjbGFyYXRpb25TdGF0ZW1lbnQodGVybSkgJiZcbiAgICBpc0NvbXBpbGV0aW1lRGVjbGFyYXRpb24odGVybS5kZWNsYXJhdGlvbilcbiAgKTtcbn07XG5leHBvcnQgY29uc3QgaXNJbXBvcnREZWNsYXJhdGlvbiA9IFIuZWl0aGVyKGlzSW1wb3J0LCBpc0ltcG9ydE5hbWVzcGFjZSk7XG5leHBvcnQgY29uc3QgaXNFeHBvcnREZWNsYXJhdGlvbiA9IFIuZWl0aGVyKFxuICBpc0V4cG9ydCxcbiAgaXNFeHBvcnREZWZhdWx0LFxuICBpc0V4cG9ydEZyb20sXG4gIGlzRXhwb3J0QWxsRnJvbSxcbik7XG4iXX0=