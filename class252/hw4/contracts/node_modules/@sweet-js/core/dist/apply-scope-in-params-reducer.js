"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _symbol = require("./symbol");

var _transforms = require("./transforms");

var _errors = require("./errors");

var _syntax = require("./syntax");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ScopeApplyingReducer {
  constructor(scope, context) {
    this.context = context;
    this.scope = scope;
  }

  transform(term) {
    let field = "transform" + term.type;
    if (typeof this[field] === 'function') {
      return this[field](term);
    }
    (0, _errors.assert)(false, "transform not implemented yet for: " + term.type);
  }

  transformFormalParameters(term) {
    let rest = term.rest == null ? null : this.transform(term.rest);
    return new _terms2.default('FormalParameters', {
      items: term.items.map(it => this.transform(it)),
      rest: rest
    });
  }

  transformBindingWithDefault(term) {
    return new _terms2.default('BindingWithDefault', {
      binding: this.transform(term.binding),
      init: term.init
    });
  }

  transformObjectBinding(term) {
    // TODO: much more complicated logic here
    return term;
    // return new Term('ObjectBinding', {
    //   properties: term.properties.map(prop => this.transform(prop))
    // });
  }

  transformBindingPropertyIdentifier(term) {
    return new _terms2.default('BindingPropertyIdentifier', {
      binding: this.transform(term.binding),
      init: term.init
    });
  }

  transformBindingPropertyProperty(term) {
    return new _terms2.default('BindingPropertyProperty', {
      name: term.name,
      binding: this.transform(term.binding)
    });
  }

  transformArrayBinding(term) {
    return new _terms2.default('ArrayBinding', {
      elements: term.elements.map(el => this.transform(el)),
      restElement: term.restElement == null ? null : this.transform(term.restElement)
    });
  }

  transformBindingIdentifier(term) {
    let name = term.name.addScope(this.scope, this.context.bindings, _syntax.ALL_PHASES);
    let newBinding = (0, _symbol.gensym)(name.val());

    this.context.env.set(newBinding.toString(), new _transforms.VarBindingTransform(name));
    this.context.bindings.add(name, {
      binding: newBinding,
      phase: this.context.phase,
      skipDup: true
    });

    return new _terms2.default("BindingIdentifier", { name: name });
  }
}
exports.default = ScopeApplyingReducer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcHBseS1zY29wZS1pbi1wYXJhbXMtcmVkdWNlci5qcyJdLCJuYW1lcyI6WyJTY29wZUFwcGx5aW5nUmVkdWNlciIsImNvbnN0cnVjdG9yIiwic2NvcGUiLCJjb250ZXh0IiwidHJhbnNmb3JtIiwidGVybSIsImZpZWxkIiwidHlwZSIsInRyYW5zZm9ybUZvcm1hbFBhcmFtZXRlcnMiLCJyZXN0IiwiaXRlbXMiLCJtYXAiLCJpdCIsInRyYW5zZm9ybUJpbmRpbmdXaXRoRGVmYXVsdCIsImJpbmRpbmciLCJpbml0IiwidHJhbnNmb3JtT2JqZWN0QmluZGluZyIsInRyYW5zZm9ybUJpbmRpbmdQcm9wZXJ0eUlkZW50aWZpZXIiLCJ0cmFuc2Zvcm1CaW5kaW5nUHJvcGVydHlQcm9wZXJ0eSIsIm5hbWUiLCJ0cmFuc2Zvcm1BcnJheUJpbmRpbmciLCJlbGVtZW50cyIsImVsIiwicmVzdEVsZW1lbnQiLCJ0cmFuc2Zvcm1CaW5kaW5nSWRlbnRpZmllciIsImFkZFNjb3BlIiwiYmluZGluZ3MiLCJuZXdCaW5kaW5nIiwidmFsIiwiZW52Iiwic2V0IiwidG9TdHJpbmciLCJhZGQiLCJwaGFzZSIsInNraXBEdXAiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFZSxNQUFNQSxvQkFBTixDQUEyQjtBQUN4Q0MsY0FBWUMsS0FBWixFQUFtQkMsT0FBbkIsRUFBNEI7QUFDMUIsU0FBS0EsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsU0FBS0QsS0FBTCxHQUFhQSxLQUFiO0FBQ0Q7O0FBRURFLFlBQVVDLElBQVYsRUFBZ0I7QUFDZCxRQUFJQyxRQUFRLGNBQWNELEtBQUtFLElBQS9CO0FBQ0EsUUFBSSxPQUFPLEtBQUtELEtBQUwsQ0FBUCxLQUF1QixVQUEzQixFQUF1QztBQUNyQyxhQUFPLEtBQUtBLEtBQUwsRUFBWUQsSUFBWixDQUFQO0FBQ0Q7QUFDRCx3QkFBTyxLQUFQLEVBQWMsd0NBQXdDQSxLQUFLRSxJQUEzRDtBQUNEOztBQUVEQyw0QkFBMEJILElBQTFCLEVBQWdDO0FBQzlCLFFBQUlJLE9BQU9KLEtBQUtJLElBQUwsSUFBYSxJQUFiLEdBQW9CLElBQXBCLEdBQTJCLEtBQUtMLFNBQUwsQ0FBZUMsS0FBS0ksSUFBcEIsQ0FBdEM7QUFDQSxXQUFPLG9CQUFTLGtCQUFULEVBQTZCO0FBQ2xDQyxhQUFPTCxLQUFLSyxLQUFMLENBQVdDLEdBQVgsQ0FBZUMsTUFBTSxLQUFLUixTQUFMLENBQWVRLEVBQWYsQ0FBckIsQ0FEMkI7QUFFbENIO0FBRmtDLEtBQTdCLENBQVA7QUFJRDs7QUFHREksOEJBQTRCUixJQUE1QixFQUFrQztBQUNoQyxXQUFPLG9CQUFTLG9CQUFULEVBQStCO0FBQ3BDUyxlQUFTLEtBQUtWLFNBQUwsQ0FBZUMsS0FBS1MsT0FBcEIsQ0FEMkI7QUFFcENDLFlBQU1WLEtBQUtVO0FBRnlCLEtBQS9CLENBQVA7QUFJRDs7QUFFREMseUJBQXVCWCxJQUF2QixFQUE2QjtBQUMzQjtBQUNBLFdBQU9BLElBQVA7QUFDQTtBQUNBO0FBQ0E7QUFDRDs7QUFFRFkscUNBQW1DWixJQUFuQyxFQUF5QztBQUN2QyxXQUFPLG9CQUFTLDJCQUFULEVBQXNDO0FBQzNDUyxlQUFTLEtBQUtWLFNBQUwsQ0FBZUMsS0FBS1MsT0FBcEIsQ0FEa0M7QUFFM0NDLFlBQU1WLEtBQUtVO0FBRmdDLEtBQXRDLENBQVA7QUFJRDs7QUFFREcsbUNBQWlDYixJQUFqQyxFQUF1QztBQUNyQyxXQUFPLG9CQUFTLHlCQUFULEVBQW9DO0FBQ3pDYyxZQUFNZCxLQUFLYyxJQUQ4QjtBQUV6Q0wsZUFBUyxLQUFLVixTQUFMLENBQWVDLEtBQUtTLE9BQXBCO0FBRmdDLEtBQXBDLENBQVA7QUFJRDs7QUFFRE0sd0JBQXNCZixJQUF0QixFQUE0QjtBQUMxQixXQUFPLG9CQUFTLGNBQVQsRUFBeUI7QUFDOUJnQixnQkFBVWhCLEtBQUtnQixRQUFMLENBQWNWLEdBQWQsQ0FBa0JXLE1BQU0sS0FBS2xCLFNBQUwsQ0FBZWtCLEVBQWYsQ0FBeEIsQ0FEb0I7QUFFOUJDLG1CQUFhbEIsS0FBS2tCLFdBQUwsSUFBb0IsSUFBcEIsR0FBMkIsSUFBM0IsR0FBa0MsS0FBS25CLFNBQUwsQ0FBZUMsS0FBS2tCLFdBQXBCO0FBRmpCLEtBQXpCLENBQVA7QUFJRDs7QUFFREMsNkJBQTJCbkIsSUFBM0IsRUFBaUM7QUFDL0IsUUFBSWMsT0FBT2QsS0FBS2MsSUFBTCxDQUFVTSxRQUFWLENBQW1CLEtBQUt2QixLQUF4QixFQUErQixLQUFLQyxPQUFMLENBQWF1QixRQUE1QyxxQkFBWDtBQUNBLFFBQUlDLGFBQWEsb0JBQU9SLEtBQUtTLEdBQUwsRUFBUCxDQUFqQjs7QUFFQSxTQUFLekIsT0FBTCxDQUFhMEIsR0FBYixDQUFpQkMsR0FBakIsQ0FBcUJILFdBQVdJLFFBQVgsRUFBckIsRUFBNEMsb0NBQXdCWixJQUF4QixDQUE1QztBQUNBLFNBQUtoQixPQUFMLENBQWF1QixRQUFiLENBQXNCTSxHQUF0QixDQUEwQmIsSUFBMUIsRUFBZ0M7QUFDOUJMLGVBQVNhLFVBRHFCO0FBRTlCTSxhQUFPLEtBQUs5QixPQUFMLENBQWE4QixLQUZVO0FBRzlCQyxlQUFTO0FBSHFCLEtBQWhDOztBQU1BLFdBQU8sb0JBQVMsbUJBQVQsRUFBOEIsRUFBRWYsVUFBRixFQUE5QixDQUFQO0FBQ0Q7QUF2RXVDO2tCQUFyQm5CLG9CIiwiZmlsZSI6ImFwcGx5LXNjb3BlLWluLXBhcmFtcy1yZWR1Y2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlcm0gZnJvbSBcIi4vdGVybXNcIjtcbmltcG9ydCB7IGdlbnN5bSB9IGZyb20gXCIuL3N5bWJvbFwiO1xuaW1wb3J0IHsgVmFyQmluZGluZ1RyYW5zZm9ybSB9IGZyb20gXCIuL3RyYW5zZm9ybXNcIjtcbmltcG9ydCB7YXNzZXJ0fSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQgeyBBTExfUEhBU0VTIH0gZnJvbSAnLi9zeW50YXgnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY29wZUFwcGx5aW5nUmVkdWNlciB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlLCBjb250ZXh0KSB7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gIH1cblxuICB0cmFuc2Zvcm0odGVybSkge1xuICAgIGxldCBmaWVsZCA9IFwidHJhbnNmb3JtXCIgKyB0ZXJtLnR5cGU7XG4gICAgaWYgKHR5cGVvZiB0aGlzW2ZpZWxkXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHRoaXNbZmllbGRdKHRlcm0pO1xuICAgIH1cbiAgICBhc3NlcnQoZmFsc2UsIFwidHJhbnNmb3JtIG5vdCBpbXBsZW1lbnRlZCB5ZXQgZm9yOiBcIiArIHRlcm0udHlwZSk7XG4gIH1cblxuICB0cmFuc2Zvcm1Gb3JtYWxQYXJhbWV0ZXJzKHRlcm0pIHtcbiAgICBsZXQgcmVzdCA9IHRlcm0ucmVzdCA9PSBudWxsID8gbnVsbCA6IHRoaXMudHJhbnNmb3JtKHRlcm0ucmVzdCk7XG4gICAgcmV0dXJuIG5ldyBUZXJtKCdGb3JtYWxQYXJhbWV0ZXJzJywge1xuICAgICAgaXRlbXM6IHRlcm0uaXRlbXMubWFwKGl0ID0+IHRoaXMudHJhbnNmb3JtKGl0KSksXG4gICAgICByZXN0XG4gICAgfSk7XG4gIH1cblxuXG4gIHRyYW5zZm9ybUJpbmRpbmdXaXRoRGVmYXVsdCh0ZXJtKSB7XG4gICAgcmV0dXJuIG5ldyBUZXJtKCdCaW5kaW5nV2l0aERlZmF1bHQnLCB7XG4gICAgICBiaW5kaW5nOiB0aGlzLnRyYW5zZm9ybSh0ZXJtLmJpbmRpbmcpLFxuICAgICAgaW5pdDogdGVybS5pbml0XG4gICAgfSk7XG4gIH1cblxuICB0cmFuc2Zvcm1PYmplY3RCaW5kaW5nKHRlcm0pIHtcbiAgICAvLyBUT0RPOiBtdWNoIG1vcmUgY29tcGxpY2F0ZWQgbG9naWMgaGVyZVxuICAgIHJldHVybiB0ZXJtO1xuICAgIC8vIHJldHVybiBuZXcgVGVybSgnT2JqZWN0QmluZGluZycsIHtcbiAgICAvLyAgIHByb3BlcnRpZXM6IHRlcm0ucHJvcGVydGllcy5tYXAocHJvcCA9PiB0aGlzLnRyYW5zZm9ybShwcm9wKSlcbiAgICAvLyB9KTtcbiAgfVxuXG4gIHRyYW5zZm9ybUJpbmRpbmdQcm9wZXJ0eUlkZW50aWZpZXIodGVybSkge1xuICAgIHJldHVybiBuZXcgVGVybSgnQmluZGluZ1Byb3BlcnR5SWRlbnRpZmllcicsIHtcbiAgICAgIGJpbmRpbmc6IHRoaXMudHJhbnNmb3JtKHRlcm0uYmluZGluZyksXG4gICAgICBpbml0OiB0ZXJtLmluaXRcbiAgICB9KTtcbiAgfVxuXG4gIHRyYW5zZm9ybUJpbmRpbmdQcm9wZXJ0eVByb3BlcnR5KHRlcm0pIHtcbiAgICByZXR1cm4gbmV3IFRlcm0oJ0JpbmRpbmdQcm9wZXJ0eVByb3BlcnR5Jywge1xuICAgICAgbmFtZTogdGVybS5uYW1lLFxuICAgICAgYmluZGluZzogdGhpcy50cmFuc2Zvcm0odGVybS5iaW5kaW5nKVxuICAgIH0pO1xuICB9XG5cbiAgdHJhbnNmb3JtQXJyYXlCaW5kaW5nKHRlcm0pIHtcbiAgICByZXR1cm4gbmV3IFRlcm0oJ0FycmF5QmluZGluZycsIHtcbiAgICAgIGVsZW1lbnRzOiB0ZXJtLmVsZW1lbnRzLm1hcChlbCA9PiB0aGlzLnRyYW5zZm9ybShlbCkpLFxuICAgICAgcmVzdEVsZW1lbnQ6IHRlcm0ucmVzdEVsZW1lbnQgPT0gbnVsbCA/IG51bGwgOiB0aGlzLnRyYW5zZm9ybSh0ZXJtLnJlc3RFbGVtZW50KVxuICAgIH0pO1xuICB9XG5cbiAgdHJhbnNmb3JtQmluZGluZ0lkZW50aWZpZXIodGVybSkge1xuICAgIGxldCBuYW1lID0gdGVybS5uYW1lLmFkZFNjb3BlKHRoaXMuc2NvcGUsIHRoaXMuY29udGV4dC5iaW5kaW5ncywgQUxMX1BIQVNFUyk7XG4gICAgbGV0IG5ld0JpbmRpbmcgPSBnZW5zeW0obmFtZS52YWwoKSk7XG5cbiAgICB0aGlzLmNvbnRleHQuZW52LnNldChuZXdCaW5kaW5nLnRvU3RyaW5nKCksIG5ldyBWYXJCaW5kaW5nVHJhbnNmb3JtKG5hbWUpKTtcbiAgICB0aGlzLmNvbnRleHQuYmluZGluZ3MuYWRkKG5hbWUsIHtcbiAgICAgIGJpbmRpbmc6IG5ld0JpbmRpbmcsXG4gICAgICBwaGFzZTogdGhpcy5jb250ZXh0LnBoYXNlLFxuICAgICAgc2tpcER1cDogdHJ1ZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ldyBUZXJtKFwiQmluZGluZ0lkZW50aWZpZXJcIiwgeyBuYW1lIH0pO1xuICB9XG59XG4iXX0=