'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sweetSpec = require('sweet-spec');

var T = _interopRequireWildcard(_sweetSpec);

var _ramda = require('ramda');

var _ = _interopRequireWildcard(_ramda);

var _sweetSpecUtils = require('./sweet-spec-utils');

var S = _interopRequireWildcard(_sweetSpecUtils);

var _codegen = require('./codegen');

var _codegen2 = _interopRequireDefault(_codegen);

var _immutable = require('immutable');

var _sweetToShiftReducer = require('./sweet-to-shift-reducer.js');

var _sweetToShiftReducer2 = _interopRequireDefault(_sweetToShiftReducer);

var _syntax = require('./syntax');

var _syntax2 = _interopRequireDefault(_syntax);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const extractDeclaration = _.cond([[S.isExport, _.prop('declaration')], [S.isExportDefault, _.prop('body')], [_.T, term => {
  throw new Error(`Expecting an Export or ExportDefault but got ${term}`);
}]]);


const ExpSpec = x => ({
  exportedName: x
});

const extractDeclarationNames = _.cond([[S.isVariableDeclarator, ({ binding }) => _immutable.List.of(binding.name)], [S.isVariableDeclaration, ({ declarators }) => declarators.flatMap(extractDeclarationNames)], [S.isFunctionDeclaration, ({ name }) => _immutable.List.of(name.name)], [S.isClassDeclaration, ({ name }) => _immutable.List.of(name.name)]]);

const extractDeclarationSpecifiers = _.cond([[S.isVariableDeclarator, ({ binding }) => _immutable.List.of(ExpSpec(binding.name))], [S.isVariableDeclaration, ({ declarators }) => declarators.flatMap(extractDeclarationSpecifiers)], [S.isFunctionDeclaration, ({ name }) => _immutable.List.of(ExpSpec(name.name))], [S.isClassDeclaration, ({ name }) => _immutable.List.of(ExpSpec(name.name))]]);

function extractSpecifiers(term) {
  if (S.isExport(term)) {
    return extractDeclarationSpecifiers(term.declaration);
  } else if (S.isExportDefault(term)) {
    return (0, _immutable.List)();
  } else if (S.isExportFrom(term)) {
    return term.namedExports;
  }
  throw new Error(`Unknown export type`);
}

function wrapStatement(declaration) {
  if (S.isVariableDeclaration(declaration)) {
    return new T.VariableDeclarationStatement({
      declaration
    });
  }
  return declaration;
}

const memoSym = Symbol('memo');

function makeVarDeclStmt(name, expr) {
  return new T.VariableDeclarationStatement({
    declaration: new T.VariableDeclaration({
      kind: 'var',
      declarators: _immutable.List.of(new T.VariableDeclarator({
        binding: name,
        init: expr
      }))
    })
  });
}

class SweetModule {

  constructor(path, items) {
    let moreDirectives = true;
    let directives = [];
    let body = [];
    let imports = [];
    let exports = [];
    this.path = path;
    this.exportedNames = (0, _immutable.List)();
    for (let item of items) {
      if (moreDirectives && item instanceof T.ExpressionStatement && item.expression instanceof T.LiteralStringExpression) {
        directives.push(item.expression.value);
        continue;
      } else {
        moreDirectives = false;
      }

      if (item instanceof T.ImportDeclaration) {
        imports.push(item);
      } else if (item instanceof T.ExportDeclaration) {
        if (S.isExport(item)) {
          let decl = extractDeclaration(item);
          let stmt = wrapStatement(decl);
          let names = extractDeclarationNames(decl);
          body.push(stmt);
          let exp = new T.ExportFrom({
            moduleSpecifier: null,
            namedExports: names.map(name => new T.ExportSpecifier({
              name,
              exportedName: name
            }))
          });
          body.push(exp);
          exports.push(exp);
          this.exportedNames = this.exportedNames.concat(extractSpecifiers(exp));
        } else if (item instanceof T.ExportFrom) {
          let exp = new T.ExportFrom({
            moduleSpecifier: item.moduleSpecifier,
            namedExports: item.namedExports.map(({ name, exportedName }) => {
              if (name == null) {
                return new T.ExportSpecifier({
                  name: exportedName,
                  exportedName
                });
              }
              return new T.ExportSpecifier({
                name,
                exportedName
              });
            })
          });
          body.push(exp);
          exports.push(exp);
          this.exportedNames = this.exportedNames.concat(extractSpecifiers(exp));
        } else {
          exports.push(item);
          body.push(item);
          this.exportedNames = this.exportedNames.concat(extractSpecifiers(item));
          if (S.isExportDefault(item)) {
            this.defaultExport = _syntax2.default.fromIdentifier('_default');
            this.exportedNames = this.exportedNames.push(ExpSpec(this.defaultExport));
          }
        }
      } else {
        body.push(item);
      }
    }
    this.items = (0, _immutable.List)(body);
    this.imports = (0, _immutable.List)(imports);
    this.exports = (0, _immutable.List)(exports);
    this.directives = (0, _immutable.List)(directives);
  }

  // $FlowFixMe: flow doesn't support computed property keys yet
  [memoSym]() {
    let runtime = [],
        compiletime = [];
    for (let item of this.items) {
      if (S.isExportDeclaration(item)) {
        if (S.isExportDefault(item)) {
          let decl = extractDeclaration(item);
          let def = new T.BindingIdentifier({
            name: this.defaultExport
          });
          if (S.isFunctionDeclaration(decl) || S.isClassDeclaration(decl)) {
            runtime.push(decl);
            // extract name and bind it to _default
            runtime.push(makeVarDeclStmt(def, new T.IdentifierExpression({
              name: decl.name.name
            })));
          } else {
            // expression so bind it to _default
            let stmt = makeVarDeclStmt(def, decl);
            if (S.isCompiletimeStatement(stmt)) {
              compiletime.push(stmt);
            } else {
              runtime.push(stmt);
            }
          }
        }
      } else {
        if (S.isCompiletimeStatement(item)) {
          compiletime.push(item);
        } else {
          runtime.push(item);
        }
      }
    }
    this.runtime = (0, _immutable.List)(runtime);
    this.compiletime = (0, _immutable.List)(compiletime);
  }

  runtimeItems() {
    if (this.runtime == null) {
      // $FlowFixMe: flow doesn't support computed property keys yet
      this[memoSym]();
    }
    return this.runtime;
  }

  compiletimeItems() {
    if (this.compiletime == null) {
      // $FlowFixMe: flow doesn't support computed property keys yet
      this[memoSym]();
    }
    return this.compiletime;
  }

  parse() {
    return new T.Module({
      items: this.imports.concat(this.items),
      directives: this.directives
      // $FlowFixMe: flow doesn't know about reduce yet
    }).reduce(new _sweetToShiftReducer2.default(0));
  }

  codegen() {
    return (0, _codegen2.default)(this.parse()).code;
  }
}
exports.default = SweetModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,