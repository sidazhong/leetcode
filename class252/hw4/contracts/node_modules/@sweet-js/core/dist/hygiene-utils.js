'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CollectBindingSyntax = undefined;
exports.collectBindings = collectBindings;

var _immutable = require('immutable');

var _astDispatcher = require('./ast-dispatcher');

var _astDispatcher2 = _interopRequireDefault(_astDispatcher);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CollectBindingSyntax extends _astDispatcher2.default {
  constructor() {
    super('collect', true);
    this.names = (0, _immutable.List)();
  }

  // registerSyntax(stx) {
  //   let newBinding = gensym(stx.val());
  //   this.context.bindings.add(stx, {
  //     binding: newBinding,
  //     phase: this.context.phase,
  //     // skip dup because js allows variable redeclarations
  //     // (technically only for `var` but we can let later stages of the pipeline
  //     // handle incorrect redeclarations of `const` and `let`)
  //     skipDup: true
  //   });
  //   return stx;
  // }

  collect(term) {
    return this.dispatch(term);
  }

  collectBindingIdentifier(term) {
    return this.names.concat(term.name);
  }

  collectBindingPropertyIdentifier(term) {
    return this.collect(term.binding);
  }

  collectBindingPropertyProperty(term) {
    return this.collect(term.binding);
  }

  collectArrayBinding(term) {
    let restElement = null;
    if (term.restElement != null) {
      restElement = this.collect(term.restElement);
    }
    return this.names.concat(restElement).concat(term.elements.filter(el => el != null).flatMap(el => this.collect(el)));
  }

  collectObjectBinding() {
    // return term.properties.flatMap(prop => this.collect(prop));
    return (0, _immutable.List)();
  }

  // registerVariableDeclaration(term) {
  //   let declarators = term.declarators.map(decl => {
  //     return decl.extend({
  //       binding: this.register(decl.binding)
  //     });
  //   });
  //   return term.extend({ declarators });
  // }
  //
  // registerFunctionDeclaration(term) {
  //   return term.extend({
  //     name: this.register(term.name)
  //   });
  // }
  //
  // registerExport(term) {
  //   return term.extend({
  //     declaration: this.register(term.declaration)
  //   });
  // }
}

exports.CollectBindingSyntax = CollectBindingSyntax;
function collectBindings(term) {
  return new CollectBindingSyntax().collect(term);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oeWdpZW5lLXV0aWxzLmpzIl0sIm5hbWVzIjpbImNvbGxlY3RCaW5kaW5ncyIsIkNvbGxlY3RCaW5kaW5nU3ludGF4IiwiY29uc3RydWN0b3IiLCJuYW1lcyIsImNvbGxlY3QiLCJ0ZXJtIiwiZGlzcGF0Y2giLCJjb2xsZWN0QmluZGluZ0lkZW50aWZpZXIiLCJjb25jYXQiLCJuYW1lIiwiY29sbGVjdEJpbmRpbmdQcm9wZXJ0eUlkZW50aWZpZXIiLCJiaW5kaW5nIiwiY29sbGVjdEJpbmRpbmdQcm9wZXJ0eVByb3BlcnR5IiwiY29sbGVjdEFycmF5QmluZGluZyIsInJlc3RFbGVtZW50IiwiZWxlbWVudHMiLCJmaWx0ZXIiLCJlbCIsImZsYXRNYXAiLCJjb2xsZWN0T2JqZWN0QmluZGluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O1FBOEVnQkEsZSxHQUFBQSxlOztBQTlFaEI7O0FBRUE7Ozs7OztBQUVPLE1BQU1DLG9CQUFOLGlDQUFpRDtBQUN0REMsZ0JBQWM7QUFDWixVQUFNLFNBQU4sRUFBaUIsSUFBakI7QUFDQSxTQUFLQyxLQUFMLEdBQWEsc0JBQWI7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFDLFVBQVFDLElBQVIsRUFBYztBQUNaLFdBQU8sS0FBS0MsUUFBTCxDQUFjRCxJQUFkLENBQVA7QUFDRDs7QUFFREUsMkJBQXlCRixJQUF6QixFQUErQjtBQUM3QixXQUFPLEtBQUtGLEtBQUwsQ0FBV0ssTUFBWCxDQUFrQkgsS0FBS0ksSUFBdkIsQ0FBUDtBQUNEOztBQUVEQyxtQ0FBaUNMLElBQWpDLEVBQXVDO0FBQ3JDLFdBQU8sS0FBS0QsT0FBTCxDQUFhQyxLQUFLTSxPQUFsQixDQUFQO0FBQ0Q7O0FBRURDLGlDQUErQlAsSUFBL0IsRUFBcUM7QUFDbkMsV0FBTyxLQUFLRCxPQUFMLENBQWFDLEtBQUtNLE9BQWxCLENBQVA7QUFDRDs7QUFFREUsc0JBQW9CUixJQUFwQixFQUEwQjtBQUN4QixRQUFJUyxjQUFjLElBQWxCO0FBQ0EsUUFBSVQsS0FBS1MsV0FBTCxJQUFvQixJQUF4QixFQUE4QjtBQUM1QkEsb0JBQWMsS0FBS1YsT0FBTCxDQUFhQyxLQUFLUyxXQUFsQixDQUFkO0FBQ0Q7QUFDRCxXQUFPLEtBQUtYLEtBQUwsQ0FDSkssTUFESSxDQUNHTSxXQURILEVBRUpOLE1BRkksQ0FHSEgsS0FBS1UsUUFBTCxDQUFjQyxNQUFkLENBQXFCQyxNQUFNQSxNQUFNLElBQWpDLEVBQXVDQyxPQUF2QyxDQUErQ0QsTUFBTSxLQUFLYixPQUFMLENBQWFhLEVBQWIsQ0FBckQsQ0FIRyxDQUFQO0FBS0Q7O0FBRURFLHlCQUF1QjtBQUNyQjtBQUNBLFdBQU8sc0JBQVA7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdkVzRDs7UUFBM0NsQixvQixHQUFBQSxvQjtBQTBFTixTQUFTRCxlQUFULENBQXlCSyxJQUF6QixFQUErQjtBQUNwQyxTQUFPLElBQUlKLG9CQUFKLEdBQTJCRyxPQUEzQixDQUFtQ0MsSUFBbkMsQ0FBUDtBQUNEIiwiZmlsZSI6Imh5Z2llbmUtdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMaXN0IH0gZnJvbSAnaW1tdXRhYmxlJztcblxuaW1wb3J0IEFTVERpc3BhdGNoZXIgZnJvbSAnLi9hc3QtZGlzcGF0Y2hlcic7XG5cbmV4cG9ydCBjbGFzcyBDb2xsZWN0QmluZGluZ1N5bnRheCBleHRlbmRzIEFTVERpc3BhdGNoZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcignY29sbGVjdCcsIHRydWUpO1xuICAgIHRoaXMubmFtZXMgPSBMaXN0KCk7XG4gIH1cblxuICAvLyByZWdpc3RlclN5bnRheChzdHgpIHtcbiAgLy8gICBsZXQgbmV3QmluZGluZyA9IGdlbnN5bShzdHgudmFsKCkpO1xuICAvLyAgIHRoaXMuY29udGV4dC5iaW5kaW5ncy5hZGQoc3R4LCB7XG4gIC8vICAgICBiaW5kaW5nOiBuZXdCaW5kaW5nLFxuICAvLyAgICAgcGhhc2U6IHRoaXMuY29udGV4dC5waGFzZSxcbiAgLy8gICAgIC8vIHNraXAgZHVwIGJlY2F1c2UganMgYWxsb3dzIHZhcmlhYmxlIHJlZGVjbGFyYXRpb25zXG4gIC8vICAgICAvLyAodGVjaG5pY2FsbHkgb25seSBmb3IgYHZhcmAgYnV0IHdlIGNhbiBsZXQgbGF0ZXIgc3RhZ2VzIG9mIHRoZSBwaXBlbGluZVxuICAvLyAgICAgLy8gaGFuZGxlIGluY29ycmVjdCByZWRlY2xhcmF0aW9ucyBvZiBgY29uc3RgIGFuZCBgbGV0YClcbiAgLy8gICAgIHNraXBEdXA6IHRydWVcbiAgLy8gICB9KTtcbiAgLy8gICByZXR1cm4gc3R4O1xuICAvLyB9XG5cbiAgY29sbGVjdCh0ZXJtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2godGVybSk7XG4gIH1cblxuICBjb2xsZWN0QmluZGluZ0lkZW50aWZpZXIodGVybSkge1xuICAgIHJldHVybiB0aGlzLm5hbWVzLmNvbmNhdCh0ZXJtLm5hbWUpO1xuICB9XG5cbiAgY29sbGVjdEJpbmRpbmdQcm9wZXJ0eUlkZW50aWZpZXIodGVybSkge1xuICAgIHJldHVybiB0aGlzLmNvbGxlY3QodGVybS5iaW5kaW5nKTtcbiAgfVxuXG4gIGNvbGxlY3RCaW5kaW5nUHJvcGVydHlQcm9wZXJ0eSh0ZXJtKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sbGVjdCh0ZXJtLmJpbmRpbmcpO1xuICB9XG5cbiAgY29sbGVjdEFycmF5QmluZGluZyh0ZXJtKSB7XG4gICAgbGV0IHJlc3RFbGVtZW50ID0gbnVsbDtcbiAgICBpZiAodGVybS5yZXN0RWxlbWVudCAhPSBudWxsKSB7XG4gICAgICByZXN0RWxlbWVudCA9IHRoaXMuY29sbGVjdCh0ZXJtLnJlc3RFbGVtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubmFtZXNcbiAgICAgIC5jb25jYXQocmVzdEVsZW1lbnQpXG4gICAgICAuY29uY2F0KFxuICAgICAgICB0ZXJtLmVsZW1lbnRzLmZpbHRlcihlbCA9PiBlbCAhPSBudWxsKS5mbGF0TWFwKGVsID0+IHRoaXMuY29sbGVjdChlbCkpLFxuICAgICAgKTtcbiAgfVxuXG4gIGNvbGxlY3RPYmplY3RCaW5kaW5nKCkge1xuICAgIC8vIHJldHVybiB0ZXJtLnByb3BlcnRpZXMuZmxhdE1hcChwcm9wID0+IHRoaXMuY29sbGVjdChwcm9wKSk7XG4gICAgcmV0dXJuIExpc3QoKTtcbiAgfVxuXG4gIC8vIHJlZ2lzdGVyVmFyaWFibGVEZWNsYXJhdGlvbih0ZXJtKSB7XG4gIC8vICAgbGV0IGRlY2xhcmF0b3JzID0gdGVybS5kZWNsYXJhdG9ycy5tYXAoZGVjbCA9PiB7XG4gIC8vICAgICByZXR1cm4gZGVjbC5leHRlbmQoe1xuICAvLyAgICAgICBiaW5kaW5nOiB0aGlzLnJlZ2lzdGVyKGRlY2wuYmluZGluZylcbiAgLy8gICAgIH0pO1xuICAvLyAgIH0pO1xuICAvLyAgIHJldHVybiB0ZXJtLmV4dGVuZCh7IGRlY2xhcmF0b3JzIH0pO1xuICAvLyB9XG4gIC8vXG4gIC8vIHJlZ2lzdGVyRnVuY3Rpb25EZWNsYXJhdGlvbih0ZXJtKSB7XG4gIC8vICAgcmV0dXJuIHRlcm0uZXh0ZW5kKHtcbiAgLy8gICAgIG5hbWU6IHRoaXMucmVnaXN0ZXIodGVybS5uYW1lKVxuICAvLyAgIH0pO1xuICAvLyB9XG4gIC8vXG4gIC8vIHJlZ2lzdGVyRXhwb3J0KHRlcm0pIHtcbiAgLy8gICByZXR1cm4gdGVybS5leHRlbmQoe1xuICAvLyAgICAgZGVjbGFyYXRpb246IHRoaXMucmVnaXN0ZXIodGVybS5kZWNsYXJhdGlvbilcbiAgLy8gICB9KTtcbiAgLy8gfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdEJpbmRpbmdzKHRlcm0pIHtcbiAgcmV0dXJuIG5ldyBDb2xsZWN0QmluZGluZ1N5bnRheCgpLmNvbGxlY3QodGVybSk7XG59XG4iXX0=