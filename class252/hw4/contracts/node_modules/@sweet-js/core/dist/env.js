'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _transforms = require('./transforms');

class Env {
  constructor() {
    this.map = new Map();
    this.map.set('function', _transforms.FunctionDeclTransform);
    this.map.set('var', _transforms.VariableDeclTransform);
    this.map.set('let', _transforms.LetDeclTransform);
    this.map.set('const', _transforms.ConstDeclTransform);
    this.map.set('syntaxrec', _transforms.SyntaxrecDeclTransform);
    this.map.set('syntax', _transforms.SyntaxDeclTransform);
    this.map.set('operator', _transforms.OperatorDeclTransform);
    this.map.set('return', _transforms.ReturnStatementTransform);
    this.map.set('while', _transforms.WhileTransform);
    this.map.set('if', _transforms.IfTransform);
    this.map.set('for', _transforms.ForTransform);
    this.map.set('switch', _transforms.SwitchTransform);
    this.map.set('break', _transforms.BreakTransform);
    this.map.set('continue', _transforms.ContinueTransform);
    this.map.set('do', _transforms.DoTransform);
    this.map.set('debugger', _transforms.DebuggerTransform);
    this.map.set('with', _transforms.WithTransform);
    this.map.set('import', _transforms.ImportTransform);
    this.map.set('export', _transforms.ExportTransform);
    this.map.set('super', _transforms.SuperTransform);
    this.map.set('this', _transforms.ThisTransform);
    this.map.set('class', _transforms.ClassTransform);
    this.map.set('default', _transforms.DefaultTransform);
    this.map.set('try', _transforms.TryTransform);
    this.map.set('yield', _transforms.YieldTransform);
    this.map.set('throw', _transforms.ThrowTransform);
    this.map.set('new', _transforms.NewTransform);
  }

  has(key) {
    return this.map.has(key);
  }

  get(key) {
    return this.map.get(key);
  }

  set(key, val) {
    return this.map.set(key, val);
  }
}
exports.default = Env;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbnYuanMiXSwibmFtZXMiOlsiRW52IiwiY29uc3RydWN0b3IiLCJtYXAiLCJNYXAiLCJzZXQiLCJoYXMiLCJrZXkiLCJnZXQiLCJ2YWwiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQThCZSxNQUFNQSxHQUFOLENBQVU7QUFDdkJDLGdCQUFjO0FBQ1osU0FBS0MsR0FBTCxHQUFXLElBQUlDLEdBQUosRUFBWDtBQUNBLFNBQUtELEdBQUwsQ0FBU0UsR0FBVCxDQUFhLFVBQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxLQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsS0FBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLE9BQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxXQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsUUFBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLFVBQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxRQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsT0FBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLElBQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxLQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsUUFBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLE9BQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxVQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsSUFBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLFVBQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxNQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsUUFBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLFFBQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxPQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsTUFBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLE9BQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxTQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsS0FBYjtBQUNBLFNBQUtGLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLE9BQWI7QUFDQSxTQUFLRixHQUFMLENBQVNFLEdBQVQsQ0FBYSxPQUFiO0FBQ0EsU0FBS0YsR0FBTCxDQUFTRSxHQUFULENBQWEsS0FBYjtBQUNEOztBQUVEQyxNQUFJQyxHQUFKLEVBQVM7QUFDUCxXQUFPLEtBQUtKLEdBQUwsQ0FBU0csR0FBVCxDQUFhQyxHQUFiLENBQVA7QUFDRDs7QUFFREMsTUFBSUQsR0FBSixFQUFTO0FBQ1AsV0FBTyxLQUFLSixHQUFMLENBQVNLLEdBQVQsQ0FBYUQsR0FBYixDQUFQO0FBQ0Q7O0FBRURGLE1BQUlFLEdBQUosRUFBU0UsR0FBVCxFQUFjO0FBQ1osV0FBTyxLQUFLTixHQUFMLENBQVNFLEdBQVQsQ0FBYUUsR0FBYixFQUFrQkUsR0FBbEIsQ0FBUDtBQUNEO0FBMUNzQjtrQkFBSlIsRyIsImZpbGUiOiJlbnYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBGdW5jdGlvbkRlY2xUcmFuc2Zvcm0sXG4gIFZhcmlhYmxlRGVjbFRyYW5zZm9ybSxcbiAgTGV0RGVjbFRyYW5zZm9ybSxcbiAgQ29uc3REZWNsVHJhbnNmb3JtLFxuICBTeW50YXhEZWNsVHJhbnNmb3JtLFxuICBTeW50YXhyZWNEZWNsVHJhbnNmb3JtLFxuICBPcGVyYXRvckRlY2xUcmFuc2Zvcm0sXG4gIFJldHVyblN0YXRlbWVudFRyYW5zZm9ybSxcbiAgSWZUcmFuc2Zvcm0sXG4gIEZvclRyYW5zZm9ybSxcbiAgU3dpdGNoVHJhbnNmb3JtLFxuICBCcmVha1RyYW5zZm9ybSxcbiAgQ29udGludWVUcmFuc2Zvcm0sXG4gIERvVHJhbnNmb3JtLFxuICBEZWJ1Z2dlclRyYW5zZm9ybSxcbiAgV2l0aFRyYW5zZm9ybSxcbiAgSW1wb3J0VHJhbnNmb3JtLFxuICBFeHBvcnRUcmFuc2Zvcm0sXG4gIFN1cGVyVHJhbnNmb3JtLFxuICBUaGlzVHJhbnNmb3JtLFxuICBZaWVsZFRyYW5zZm9ybSxcbiAgQ2xhc3NUcmFuc2Zvcm0sXG4gIERlZmF1bHRUcmFuc2Zvcm0sXG4gIFRyeVRyYW5zZm9ybSxcbiAgVGhyb3dUcmFuc2Zvcm0sXG4gIE5ld1RyYW5zZm9ybSxcbiAgV2hpbGVUcmFuc2Zvcm0sXG59IGZyb20gJy4vdHJhbnNmb3Jtcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVudiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xuICAgIHRoaXMubWFwLnNldCgnZnVuY3Rpb24nLCBGdW5jdGlvbkRlY2xUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgndmFyJywgVmFyaWFibGVEZWNsVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ2xldCcsIExldERlY2xUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgnY29uc3QnLCBDb25zdERlY2xUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgnc3ludGF4cmVjJywgU3ludGF4cmVjRGVjbFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdzeW50YXgnLCBTeW50YXhEZWNsVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ29wZXJhdG9yJywgT3BlcmF0b3JEZWNsVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ3JldHVybicsIFJldHVyblN0YXRlbWVudFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCd3aGlsZScsIFdoaWxlVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ2lmJywgSWZUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgnZm9yJywgRm9yVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ3N3aXRjaCcsIFN3aXRjaFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdicmVhaycsIEJyZWFrVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ2NvbnRpbnVlJywgQ29udGludWVUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgnZG8nLCBEb1RyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdkZWJ1Z2dlcicsIERlYnVnZ2VyVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ3dpdGgnLCBXaXRoVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ2ltcG9ydCcsIEltcG9ydFRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdleHBvcnQnLCBFeHBvcnRUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgnc3VwZXInLCBTdXBlclRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCd0aGlzJywgVGhpc1RyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCdjbGFzcycsIENsYXNzVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ2RlZmF1bHQnLCBEZWZhdWx0VHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ3RyeScsIFRyeVRyYW5zZm9ybSk7XG4gICAgdGhpcy5tYXAuc2V0KCd5aWVsZCcsIFlpZWxkVHJhbnNmb3JtKTtcbiAgICB0aGlzLm1hcC5zZXQoJ3Rocm93JywgVGhyb3dUcmFuc2Zvcm0pO1xuICAgIHRoaXMubWFwLnNldCgnbmV3JywgTmV3VHJhbnNmb3JtKTtcbiAgfVxuXG4gIGhhcyhrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuaGFzKGtleSk7XG4gIH1cblxuICBnZXQoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLmdldChrZXkpO1xuICB9XG5cbiAgc2V0KGtleSwgdmFsKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwLnNldChrZXksIHZhbCk7XG4gIH1cbn1cbiJdfQ==