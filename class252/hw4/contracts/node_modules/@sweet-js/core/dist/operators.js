'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.operatorLt = operatorLt;
exports.getOperatorPrec = getOperatorPrec;
exports.getOperatorAssoc = getOperatorAssoc;
exports.isUnaryOperator = isUnaryOperator;
exports.isOperator = isOperator;
const unaryOperators = {
  '+': true,
  '-': true,
  '!': true,
  '~': true,
  '++': true,
  '--': true,
  typeof: true,
  void: true,
  delete: true
};
const binaryOperatorPrecedence = {
  '*': 14,
  '/': 14,
  '%': 14,
  '+': 13,
  '-': 13,
  '>>': 12,
  '<<': 12,
  '>>>': 12,
  '<': 11,
  '<=': 11,
  '>': 11,
  '>=': 11,
  in: 11,
  instanceof: 11,
  '==': 10,
  '!=': 10,
  '===': 10,
  '!==': 10,
  '&': 9,
  '^': 8,
  '|': 7,
  '&&': 6,
  '||': 5
};

var operatorAssoc = {
  '*': 'left',
  '/': 'left',
  '%': 'left',
  '+': 'left',
  '-': 'left',
  '>>': 'left',
  '<<': 'left',
  '>>>': 'left',
  '<': 'left',
  '<=': 'left',
  '>': 'left',
  '>=': 'left',
  in: 'left',
  instanceof: 'left',
  '==': 'left',
  '!=': 'left',
  '===': 'left',
  '!==': 'left',
  '&': 'left',
  '^': 'left',
  '|': 'left',
  '&&': 'left',
  '||': 'left'
};

function operatorLt(left, right, assoc) {
  if (assoc === 'left') {
    return left < right;
  } else {
    return left <= right;
  }
}

function getOperatorPrec(op) {
  return binaryOperatorPrecedence[op];
}
function getOperatorAssoc(op) {
  return operatorAssoc[op];
}

function isUnaryOperator(op) {
  return (op.match('punctuator') || op.match('identifier') || op.match('keyword')) && unaryOperators.hasOwnProperty(op.val());
}

function isOperator(op) {
  if (op.match('punctuator') || op.match('identifier') || op.match('keyword')) {
    return binaryOperatorPrecedence.hasOwnProperty(op) || unaryOperators.hasOwnProperty(op.val());
  }
  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9vcGVyYXRvcnMuanMiXSwibmFtZXMiOlsib3BlcmF0b3JMdCIsImdldE9wZXJhdG9yUHJlYyIsImdldE9wZXJhdG9yQXNzb2MiLCJpc1VuYXJ5T3BlcmF0b3IiLCJpc09wZXJhdG9yIiwidW5hcnlPcGVyYXRvcnMiLCJ0eXBlb2YiLCJ2b2lkIiwiZGVsZXRlIiwiYmluYXJ5T3BlcmF0b3JQcmVjZWRlbmNlIiwiaW4iLCJpbnN0YW5jZW9mIiwib3BlcmF0b3JBc3NvYyIsImxlZnQiLCJyaWdodCIsImFzc29jIiwib3AiLCJtYXRjaCIsImhhc093blByb3BlcnR5IiwidmFsIl0sIm1hcHBpbmdzIjoiOzs7OztRQStEZ0JBLFUsR0FBQUEsVTtRQVFBQyxlLEdBQUFBLGU7UUFHQUMsZ0IsR0FBQUEsZ0I7UUFJQUMsZSxHQUFBQSxlO1FBT0FDLFUsR0FBQUEsVTtBQXJGaEIsTUFBTUMsaUJBQWlCO0FBQ3JCLE9BQUssSUFEZ0I7QUFFckIsT0FBSyxJQUZnQjtBQUdyQixPQUFLLElBSGdCO0FBSXJCLE9BQUssSUFKZ0I7QUFLckIsUUFBTSxJQUxlO0FBTXJCLFFBQU0sSUFOZTtBQU9yQkMsVUFBUSxJQVBhO0FBUXJCQyxRQUFNLElBUmU7QUFTckJDLFVBQVE7QUFUYSxDQUF2QjtBQVdBLE1BQU1DLDJCQUEyQjtBQUMvQixPQUFLLEVBRDBCO0FBRS9CLE9BQUssRUFGMEI7QUFHL0IsT0FBSyxFQUgwQjtBQUkvQixPQUFLLEVBSjBCO0FBSy9CLE9BQUssRUFMMEI7QUFNL0IsUUFBTSxFQU55QjtBQU8vQixRQUFNLEVBUHlCO0FBUS9CLFNBQU8sRUFSd0I7QUFTL0IsT0FBSyxFQVQwQjtBQVUvQixRQUFNLEVBVnlCO0FBVy9CLE9BQUssRUFYMEI7QUFZL0IsUUFBTSxFQVp5QjtBQWEvQkMsTUFBSSxFQWIyQjtBQWMvQkMsY0FBWSxFQWRtQjtBQWUvQixRQUFNLEVBZnlCO0FBZ0IvQixRQUFNLEVBaEJ5QjtBQWlCL0IsU0FBTyxFQWpCd0I7QUFrQi9CLFNBQU8sRUFsQndCO0FBbUIvQixPQUFLLENBbkIwQjtBQW9CL0IsT0FBSyxDQXBCMEI7QUFxQi9CLE9BQUssQ0FyQjBCO0FBc0IvQixRQUFNLENBdEJ5QjtBQXVCL0IsUUFBTTtBQXZCeUIsQ0FBakM7O0FBMEJBLElBQUlDLGdCQUFnQjtBQUNsQixPQUFLLE1BRGE7QUFFbEIsT0FBSyxNQUZhO0FBR2xCLE9BQUssTUFIYTtBQUlsQixPQUFLLE1BSmE7QUFLbEIsT0FBSyxNQUxhO0FBTWxCLFFBQU0sTUFOWTtBQU9sQixRQUFNLE1BUFk7QUFRbEIsU0FBTyxNQVJXO0FBU2xCLE9BQUssTUFUYTtBQVVsQixRQUFNLE1BVlk7QUFXbEIsT0FBSyxNQVhhO0FBWWxCLFFBQU0sTUFaWTtBQWFsQkYsTUFBSSxNQWJjO0FBY2xCQyxjQUFZLE1BZE07QUFlbEIsUUFBTSxNQWZZO0FBZ0JsQixRQUFNLE1BaEJZO0FBaUJsQixTQUFPLE1BakJXO0FBa0JsQixTQUFPLE1BbEJXO0FBbUJsQixPQUFLLE1BbkJhO0FBb0JsQixPQUFLLE1BcEJhO0FBcUJsQixPQUFLLE1BckJhO0FBc0JsQixRQUFNLE1BdEJZO0FBdUJsQixRQUFNO0FBdkJZLENBQXBCOztBQTBCTyxTQUFTWCxVQUFULENBQW9CYSxJQUFwQixFQUEwQkMsS0FBMUIsRUFBaUNDLEtBQWpDLEVBQXdDO0FBQzdDLE1BQUlBLFVBQVUsTUFBZCxFQUFzQjtBQUNwQixXQUFPRixPQUFPQyxLQUFkO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBT0QsUUFBUUMsS0FBZjtBQUNEO0FBQ0Y7O0FBRU0sU0FBU2IsZUFBVCxDQUF5QmUsRUFBekIsRUFBNkI7QUFDbEMsU0FBT1AseUJBQXlCTyxFQUF6QixDQUFQO0FBQ0Q7QUFDTSxTQUFTZCxnQkFBVCxDQUEwQmMsRUFBMUIsRUFBOEI7QUFDbkMsU0FBT0osY0FBY0ksRUFBZCxDQUFQO0FBQ0Q7O0FBRU0sU0FBU2IsZUFBVCxDQUF5QmEsRUFBekIsRUFBNkI7QUFDbEMsU0FDRSxDQUFDQSxHQUFHQyxLQUFILENBQVMsWUFBVCxLQUEwQkQsR0FBR0MsS0FBSCxDQUFTLFlBQVQsQ0FBMUIsSUFBb0RELEdBQUdDLEtBQUgsQ0FBUyxTQUFULENBQXJELEtBQ0FaLGVBQWVhLGNBQWYsQ0FBOEJGLEdBQUdHLEdBQUgsRUFBOUIsQ0FGRjtBQUlEOztBQUVNLFNBQVNmLFVBQVQsQ0FBb0JZLEVBQXBCLEVBQXdCO0FBQzdCLE1BQUlBLEdBQUdDLEtBQUgsQ0FBUyxZQUFULEtBQTBCRCxHQUFHQyxLQUFILENBQVMsWUFBVCxDQUExQixJQUFvREQsR0FBR0MsS0FBSCxDQUFTLFNBQVQsQ0FBeEQsRUFBNkU7QUFDM0UsV0FDRVIseUJBQXlCUyxjQUF6QixDQUF3Q0YsRUFBeEMsS0FDQVgsZUFBZWEsY0FBZixDQUE4QkYsR0FBR0csR0FBSCxFQUE5QixDQUZGO0FBSUQ7QUFDRCxTQUFPLEtBQVA7QUFDRCIsImZpbGUiOiJvcGVyYXRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1bmFyeU9wZXJhdG9ycyA9IHtcbiAgJysnOiB0cnVlLFxuICAnLSc6IHRydWUsXG4gICchJzogdHJ1ZSxcbiAgJ34nOiB0cnVlLFxuICAnKysnOiB0cnVlLFxuICAnLS0nOiB0cnVlLFxuICB0eXBlb2Y6IHRydWUsXG4gIHZvaWQ6IHRydWUsXG4gIGRlbGV0ZTogdHJ1ZSxcbn07XG5jb25zdCBiaW5hcnlPcGVyYXRvclByZWNlZGVuY2UgPSB7XG4gICcqJzogMTQsXG4gICcvJzogMTQsXG4gICclJzogMTQsXG4gICcrJzogMTMsXG4gICctJzogMTMsXG4gICc+Pic6IDEyLFxuICAnPDwnOiAxMixcbiAgJz4+Pic6IDEyLFxuICAnPCc6IDExLFxuICAnPD0nOiAxMSxcbiAgJz4nOiAxMSxcbiAgJz49JzogMTEsXG4gIGluOiAxMSxcbiAgaW5zdGFuY2VvZjogMTEsXG4gICc9PSc6IDEwLFxuICAnIT0nOiAxMCxcbiAgJz09PSc6IDEwLFxuICAnIT09JzogMTAsXG4gICcmJzogOSxcbiAgJ14nOiA4LFxuICAnfCc6IDcsXG4gICcmJic6IDYsXG4gICd8fCc6IDUsXG59O1xuXG52YXIgb3BlcmF0b3JBc3NvYyA9IHtcbiAgJyonOiAnbGVmdCcsXG4gICcvJzogJ2xlZnQnLFxuICAnJSc6ICdsZWZ0JyxcbiAgJysnOiAnbGVmdCcsXG4gICctJzogJ2xlZnQnLFxuICAnPj4nOiAnbGVmdCcsXG4gICc8PCc6ICdsZWZ0JyxcbiAgJz4+Pic6ICdsZWZ0JyxcbiAgJzwnOiAnbGVmdCcsXG4gICc8PSc6ICdsZWZ0JyxcbiAgJz4nOiAnbGVmdCcsXG4gICc+PSc6ICdsZWZ0JyxcbiAgaW46ICdsZWZ0JyxcbiAgaW5zdGFuY2VvZjogJ2xlZnQnLFxuICAnPT0nOiAnbGVmdCcsXG4gICchPSc6ICdsZWZ0JyxcbiAgJz09PSc6ICdsZWZ0JyxcbiAgJyE9PSc6ICdsZWZ0JyxcbiAgJyYnOiAnbGVmdCcsXG4gICdeJzogJ2xlZnQnLFxuICAnfCc6ICdsZWZ0JyxcbiAgJyYmJzogJ2xlZnQnLFxuICAnfHwnOiAnbGVmdCcsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gb3BlcmF0b3JMdChsZWZ0LCByaWdodCwgYXNzb2MpIHtcbiAgaWYgKGFzc29jID09PSAnbGVmdCcpIHtcbiAgICByZXR1cm4gbGVmdCA8IHJpZ2h0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsZWZ0IDw9IHJpZ2h0O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVyYXRvclByZWMob3ApIHtcbiAgcmV0dXJuIGJpbmFyeU9wZXJhdG9yUHJlY2VkZW5jZVtvcF07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlcmF0b3JBc3NvYyhvcCkge1xuICByZXR1cm4gb3BlcmF0b3JBc3NvY1tvcF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VuYXJ5T3BlcmF0b3Iob3ApIHtcbiAgcmV0dXJuIChcbiAgICAob3AubWF0Y2goJ3B1bmN0dWF0b3InKSB8fCBvcC5tYXRjaCgnaWRlbnRpZmllcicpIHx8IG9wLm1hdGNoKCdrZXl3b3JkJykpICYmXG4gICAgdW5hcnlPcGVyYXRvcnMuaGFzT3duUHJvcGVydHkob3AudmFsKCkpXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09wZXJhdG9yKG9wKSB7XG4gIGlmIChvcC5tYXRjaCgncHVuY3R1YXRvcicpIHx8IG9wLm1hdGNoKCdpZGVudGlmaWVyJykgfHwgb3AubWF0Y2goJ2tleXdvcmQnKSkge1xuICAgIHJldHVybiAoXG4gICAgICBiaW5hcnlPcGVyYXRvclByZWNlZGVuY2UuaGFzT3duUHJvcGVydHkob3ApIHx8XG4gICAgICB1bmFyeU9wZXJhdG9ycy5oYXNPd25Qcm9wZXJ0eShvcC52YWwoKSlcbiAgICApO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbiJdfQ==