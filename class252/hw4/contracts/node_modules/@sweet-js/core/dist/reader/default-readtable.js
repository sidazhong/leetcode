'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _immutable = require('immutable');

var _readtable = require('readtable');

var _readIdentifier = require('./read-identifier');

var _readIdentifier2 = _interopRequireDefault(_readIdentifier);

var _readNumeric = require('./read-numeric');

var _readNumeric2 = _interopRequireDefault(_readNumeric);

var _readString = require('./read-string');

var _readString2 = _interopRequireDefault(_readString);

var _readTemplate = require('./read-template');

var _readTemplate2 = _interopRequireDefault(_readTemplate);

var _readRegexp = require('./read-regexp.js');

var _readRegexp2 = _interopRequireDefault(_readRegexp);

var _readComment = require('./read-comment');

var _readComment2 = _interopRequireDefault(_readComment);

var _readDispatch = require('./read-dispatch');

var _tokens = require('../tokens');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// use https://github.com/mathiasbynens/regenerate to generate the Unicode code points when implementing modes

function eatWhitespace(stream) {
  stream.readString();
  return _tokens.EmptyToken;
}

const punctuatorTable = Object.keys(_tokens.punctuatorTable).reduce(_utils.insertSequence, {});

function readPunctuator(stream) {
  const len = (0, _utils.retrieveSequenceLength)(punctuatorTable, stream, 0);
  if (len > 0) {
    return new _tokens.PunctuatorToken({
      value: stream.readString(len)
    });
  }
  throw Error('Unknown punctuator');
}

const punctuatorEntries = Object.keys(punctuatorTable).map(p => ({
  key: p,
  mode: 'terminating',
  action: readPunctuator
}));

const whiteSpaceTable = [0x20, 0x09, 0x0b, 0x0c, 0xa0, 0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200a, 0x202f, 0x205f, 0x3000, 0xfeff];

const whiteSpaceEntries = whiteSpaceTable.map(w => ({
  key: w,
  mode: 'terminating',
  action: eatWhitespace
}));

const lineTerminatorTable = [0x0a, 0x0d, 0x2028, 0x2029];

const lineTerminatorEntries = lineTerminatorTable.map(lt => ({
  key: lt,
  mode: 'terminating',
  action: function readLineTerminator(stream) {
    this.incrementLine();
    return eatWhitespace(stream);
  }
}));

const digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];

const numericEntries = digits.map(d => ({
  key: d,
  mode: 'non-terminating',
  action: _readNumeric2.default
}));

const quotes = ["'", '"'];

const stringEntries = quotes.map(q => ({
  key: q,
  mode: 'terminating',
  action: _readString2.default
}));

const identifierEntry = {
  mode: 'non-terminating',
  action: _readIdentifier2.default
};

const templateEntry = {
  key: '`',
  mode: 'terminating',
  action: _readTemplate2.default
};

const primitiveReadtable = (0, _readtable.getCurrentReadtable)().extend(...[identifierEntry, ...whiteSpaceEntries, templateEntry, ...punctuatorEntries, ...lineTerminatorEntries, ...numericEntries, ...stringEntries]);

const dotEntry = {
  key: '.',
  mode: 'terminating',
  action: function readDot(stream, ...rest) {
    const nxt = stream.peek(1).charCodeAt(0);
    if ((0, _utils.isDecimalDigit)(nxt)) {
      return (0, _readNumeric2.default)(stream, ...rest);
    }
    return readPunctuator.call(this, stream);
  }
};

const keywordTable = Object.keys(_tokens.keywordTable).reduce(_utils.insertSequence, {});

const keywordEntries = Object.keys(keywordTable).map(k => ({
  key: k,
  mode: 'non-terminating',
  action: function readKeyword(stream) {
    const len = (0, _utils.retrieveSequenceLength)(keywordTable, stream, 0);
    if (len > 0 && !(0, _utils.isIdentifierPart)(stream.peek(len).charCodeAt(0))) {
      return new _tokens.KeywordToken({
        value: stream.readString(len)
      });
    }
    return _readIdentifier2.default.call(this, stream);
  }
}));

const delimiterPairs = [['[', ']'], ['(', ')']];

function readDelimiters(closing, stream, prefix, b) {
  const currentReadtable = (0, _readtable.getCurrentReadtable)();
  (0, _readtable.setCurrentReadtable)(primitiveReadtable);

  let results = _immutable.List.of(this.readToken(stream, (0, _immutable.List)(), b));

  (0, _readtable.setCurrentReadtable)(currentReadtable);
  return this.readUntil(closing, stream, results, b);
}

const delimiterEntries = delimiterPairs.map(p => ({
  key: p[0],
  mode: 'terminating',
  action: function readDefaultDelimiters(stream, prefix, b) {
    return readDelimiters.call(this, p[1], stream, prefix, true);
  }
}));

const bracesEntry = {
  key: '{',
  mode: 'terminating',
  action: function readBraces(stream, prefix, b) {
    const line = this.locationInfo.line;
    const innerB = (0, _utils.isExprPrefix)(line, b, prefix);
    return readDelimiters.call(this, '}', stream, prefix, innerB);
  }
};

function readClosingDelimiter(opening, closing, stream, prefix, b) {
  if (prefix.first().value !== opening) {
    throw Error('Unmatched delimiter:', closing);
  }
  return readPunctuator.call(this, stream);
}

const unmatchedDelimiterEntries = [['{', '}'], ['[', ']'], ['(', ')']].map(p => ({
  key: p[1],
  mode: 'terminating',
  action: function readClosingDelimiters(stream, prefix, b) {
    return readClosingDelimiter.call(this, ...p, stream, prefix, b);
  }
}));

const divEntry = {
  key: '/',
  mode: 'terminating',
  action: function readDiv(stream, prefix, b) {
    let nxt = stream.peek(1);
    if (nxt === '/' || nxt === '*') {
      const result = _readComment2.default.call(this, stream);
      return result;
    }
    if ((0, _utils.isRegexPrefix)(b, prefix)) {
      return _readRegexp2.default.call(this, stream, prefix, b);
    }
    return readPunctuator.call(this, stream);
  }
};

const dispatchBacktickEntry = {
  key: '`',
  mode: 'dispatch',
  action: _readDispatch.readSyntaxTemplate
};

const defaultDispatchEntry = {
  mode: 'dispatch',
  action: function readDefaultDispatch(...args) {
    this.readToken(...args);
    return _tokens.EmptyToken;
  }
};

const dispatchWhiteSpaceEntries = whiteSpaceTable.concat(lineTerminatorTable).map(w => ({
  key: w,
  mode: 'dispatch',
  action: function readDispatchWhitespace(stream, prefix, allowExprs, dispatchKey) {
    this.readToken(stream, prefix, allowExprs);
    return new _tokens.IdentifierToken({ value: dispatchKey });
  }
}));

const atEntry = {
  key: '@',
  mode: 'terminating',
  action: function readAt(stream, prefix) {
    const nxt = stream.peek(1),
          nxtCode = nxt.charCodeAt(0);
    if ((0, _readtable.isEOS)(nxt) || (0, _utils.isWhiteSpace)(nxtCode) || (0, _utils.isLineTerminator)(nxtCode)) {
      return new _tokens.IdentifierToken({ value: stream.readString() });
    }
    throw new SyntaxError('Invalid or unexpected token');
  }
};

const defaultReadtable = primitiveReadtable.extend(...[dotEntry, ...delimiterEntries, ...unmatchedDelimiterEntries, bracesEntry, divEntry, ...keywordEntries, defaultDispatchEntry, dispatchBacktickEntry, ...dispatchWhiteSpaceEntries, atEntry]);

exports.default = defaultReadtable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,