'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isTerminating = exports.isIdentifierPart = exports.isIdentifierStart = exports.isDecimalDigit = exports.isWhiteSpace = exports.isLineTerminator = undefined;
exports.getHexValue = getHexValue;
exports.skipSingleLineComment = skipSingleLineComment;
exports.scanUnicode = scanUnicode;
exports.readStringEscape = readStringEscape;
exports.insertSequence = insertSequence;
exports.retrieveSequenceLength = retrieveSequenceLength;
exports.isExprPrefix = isExprPrefix;
exports.isRegexPrefix = isRegexPrefix;

var _readtable = require('readtable');

var _immutable = require('immutable');

var _esutils = require('esutils');

var _tokens = require('../tokens');

var _ramda = require('ramda');

var R = _interopRequireWildcard(_ramda);

var _ramdaFantasy = require('ramda-fantasy');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const {
  isLineTerminator,
  isWhiteSpace,
  isDecimalDigit,
  isIdentifierPartES6: isIdentifierPart,
  isIdentifierStartES6: isIdentifierStart
} = _esutils.code;

const Nothing = _ramdaFantasy.Maybe.Nothing;

// TODO: also, need to handle contextual yield
const literalKeywords = ['this', 'null', 'true', 'false'];

exports.isLineTerminator = isLineTerminator;
exports.isWhiteSpace = isWhiteSpace;
exports.isDecimalDigit = isDecimalDigit;
exports.isIdentifierStart = isIdentifierStart;
exports.isIdentifierPart = isIdentifierPart;
function getHexValue(rune) {
  if ('0' <= rune && rune <= '9') {
    return rune.charCodeAt(0) - 48;
  }
  if ('a' <= rune && rune <= 'f') {
    return rune.charCodeAt(0) - 87;
  }
  if ('A' <= rune && rune <= 'F') {
    return rune.charCodeAt(0) - 55;
  }
  return -1;
}

function skipSingleLineComment(stream) {
  let idx = 0;
  let char = stream.peek(idx);
  while (!(0, _readtable.isEOS)(char)) {
    let chCode = char.charCodeAt(0);
    if (isLineTerminator(chCode)) {
      ++idx;
      if (chCode === 0xd /* "\r" */ && stream.peek(idx).charCodeAt(0) === 0xa) {
        /*"\n" */++idx;
      }
      this.incrementLine();
      break;
    }
    ++idx;
    char = stream.peek(idx);
  }
  stream.readString(idx);
}

function scanUnicode(stream, start) {
  const sPeek = stream.peek.bind(stream);
  let idx = start;
  let hexDigits = 0;
  if (sPeek(idx) === '{') {
    //\u{HexDigits}
    ++idx;
    let char = sPeek(idx);
    while (!(0, _readtable.isEOS)(char)) {
      let hex = getHexValue(char);
      if (hex === -1) break;
      hexDigits = hexDigits << 4 | hex;
      if (hexDigits > 0x10ffff) {
        throw this.createILLEGAL(char);
      }
      char = sPeek(++idx);
    }
    if (char !== '}') {
      throw this.createILLEGAL(char);
    }
    if (idx === start + 1) {
      throw this.createILLEGAL(stream.peek(idx + 1));
    }
    ++idx;
  } else {
    //\uHex4Digits
    if ((0, _readtable.isEOS)(sPeek(idx + 3))) return -1;
    let r;
    for (; idx < start + 4; ++idx) {
      r = getHexValue(sPeek(idx));
      if (r === -1) return -1;
      hexDigits = hexDigits << 4 | r;
    }
  }
  stream.readString(idx);

  return hexDigits;
}

function readStringEscape(str, stream, start, octal) {
  let idx = start + 1,
      char = stream.peek(idx),
      lineStart;
  if ((0, _readtable.isEOS)(char)) throw this.createILLEGAL(char);

  if (!isLineTerminator(char.charCodeAt(0))) {
    switch (char) {
      case 'b':
        str += '\b';
        ++idx;
        break;
      case 'f':
        str += '\f';
        ++idx;
        break;
      case 'n':
        str += '\n';
        ++idx;
        break;
      case 'r':
        str += '\r';
        ++idx;
        break;
      case 't':
        str += '\t';
        ++idx;
        break;
      case 'v':
        str += '\u000B';
        ++idx;
        break;
      case 'u':
      case 'x':
        {
          let unescaped;
          ++idx;
          let nxt = stream.peek(idx);
          if ((0, _readtable.isEOS)(nxt)) {
            throw this.createILLEGAL(nxt);
          }
          unescaped = char === 'u' ? scanUnicode.call(this, stream, idx) : scanHexEscape2.call(this, stream, idx);
          if (unescaped === -1) throw this.createILLEGAL(char);
          idx = 0; // stream is read in scanUnicode and scanHexEscape2

          str += String.fromCodePoint(unescaped);
          break;
        }
      default:
        {
          if ('0' <= char && char <= '7') {
            [str, idx, octal] = scanOctal.call(this, str, stream, char, idx, octal);
          } else if (char === '8' || char === '9') {
            throw this.createILLEGAL(char);
          } else {
            str += char;
            ++idx;
          }
        }
    }
  } else {
    if (char === '\r' && stream.peek(idx + 1) === '\n') {
      ++idx;
    }
    ++idx;
    this.incrementLine();
    lineStart = idx;
  }
  return [str, idx, octal, lineStart];
}

function scanOctal(str, stream, char, start, octal) {
  let len = 1,
      idx = start;
  if ('0' <= char && char <= '3') {
    len = 0;
  }
  let code = 0;

  while (len < 3 && '0' <= char && char <= '7') {
    ++idx;
    if (len > 0 || char !== '0') {
      if (octal == null) octal = '';
      octal += char;
    }
    code *= 8;
    code += +char; //coersion
    ++len;
    char = stream.peek(idx);
    if ((0, _readtable.isEOS)(char)) {
      throw this.createILLEGAL(char);
    }
  }
  str += String.fromCharCode(code);
  return [str, idx, octal];
}

function scanHexEscape2(stream, idx) {
  let char = stream.peek(idx);

  if ((0, _readtable.isEOS)(char)) return -1;

  let r1 = getHexValue(char);
  if (r1 === -1) return r1;

  let r2 = getHexValue(stream.peek(idx + 1));
  if (r2 === -1) return r2;

  stream.readString(idx + 1);
  return r1 << 4 | r2;
}

function insertSequence(coll, seq) {
  const char = seq[0];
  if (!coll[char]) {
    coll[char] = {};
  }
  if (seq.length === 1) {
    coll[char].isValue = true;
    return coll;
  } else {
    coll[char] = insertSequence(coll[char], seq.slice(1));
    return coll;
  }
}

const isTerminating = exports.isTerminating = table => char => table.getMapping(char).mode === 'terminating';

// check for terminating doesn't work if it's at the start
function retrieveSequenceLength(table, stream, idx) {
  const char = stream.peek(idx);
  if (!table[char]) {
    if (table.isValue) return idx;
    return -1;
  } else {
    return retrieveSequenceLength(table[char], stream, ++idx);
  }
}

const assignOps = ['=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=', '&=', '|=', '^=', ','];

const binaryOps = ['+', '-', '*', '/', '%', '<<', '>>', '>>>', '&', '|', '^', '&&', '||', '?', ':', '===', '==', '>=', '<=', '<', '>', '!=', '!==', 'instanceof'];

const unaryOps = ['++', '--', '~', '!', 'delete', 'void', 'typeof', 'yield', 'throw', 'new'];

const allOps = assignOps.concat(binaryOps).concat(unaryOps);

function isNonLiteralKeyword(t) {
  return (0, _tokens.isKeyword)(t) && t.value && !R.contains(t.value, literalKeywords);
}
const exprPrefixKeywords = ['instanceof', 'typeof', 'delete', 'void', 'yield', 'throw', 'new', 'case'];

function isExprReturn(l, p) {
  // ... return {x: 42} /r /i
  // ... return\n{x: 42} /r /i
  return popRestMaybe(p).map(([retKwd, rest]) => (0, _tokens.isKeyword)(retKwd, 'return') && (0, _tokens.getLineNumber)(retKwd) === l).getOrElse(false);
}

// List a -> Boolean
function isTopPunctuator(p) {
  return popMaybe(p).map(punc => (0, _tokens.isPunctuator)(punc)).getOrElse(false);
}

function isOperator(op) {
  if (((0, _tokens.isPunctuator)(op) || (0, _tokens.isKeyword)(op)) && op.value != null) {
    const opVal = op.value; // the const is because flow doesn't know op.value isn't mutated
    return allOps.some(o => o === opVal);
  }
  return false;
}

function isTopOperator(p) {
  return popMaybe(p).map(op => {
    return isOperator(op);
  }).getOrElse(false);
}

function isExprPrefixKeyword(kwd) {
  return (0, _tokens.isKeyword)(kwd, exprPrefixKeywords);
}

function isTopKeywordExprPrefix(p) {
  return popMaybe(p).map(kwd => {
    return isExprPrefixKeyword(kwd);
  }).getOrElse(false);
}

function isTopColon(p) {
  return popMaybe(p).map(colon => {
    if ((0, _tokens.isPunctuator)(colon, ':')) {
      return true;
    }
    return false;
  }).getOrElse(false);
}

function isExprPrefix(l, b, p) {
  if (p.size === 0) {
    // ... ({x: 42} /r/i)
    return b;
  } else if (isTopColon(p)) {
    // ... ({x: {x: 42} /r/i })
    return b;
  } else if (isTopKeywordExprPrefix(p)) {
    // ... throw {x: 42} /r/i
    return true;
  } else if (isTopOperator(p)) {
    // ... 42 + {x: 42} /r/i
    return true;
  } else if (isTopPunctuator(p)) {
    // ... for ( ; {x: 42}/r/i)
    return b;
  } else if (isExprReturn(l, p)) {
    // ... return {x: 42} /r /i
    // ... return\n{x: 42} /r /i
    return true;
  }
  return false;
}

function popMaybe(p) {
  if (p.size >= 1) {
    return _ramdaFantasy.Maybe.of(p.last());
  }
  return Nothing();
}

function isTopStandaloneKeyword(prefix) {
  // P . t . t'  where t \not = "." and t' ∈ (Keyword \setminus  LiteralKeyword)
  return popRestMaybe(prefix).map(([kwd, rest]) => {
    if (isNonLiteralKeyword(kwd)) {
      return _ramdaFantasy.Maybe.maybe(true, dot => !(0, _tokens.isPunctuator)(dot, '.'), popMaybe(rest));
    }
    return false;
  }).getOrElse(false);
}

function isTopParensWithKeyword(prefix) {
  // P . t . t' . (T)  where t \not = "." and t' ∈ (Keyword \setminus LiteralKeyword)
  return popRestMaybe(prefix).chain(([paren, rest]) => (0, _tokens.isParens)(paren) ? popRestMaybe(rest) : Nothing()).map(([kwd, rest]) => {
    if (isNonLiteralKeyword(kwd)) {
      return _ramdaFantasy.Maybe.maybe(true, dot => !(0, _tokens.isPunctuator)(dot, '.'), popMaybe(rest));
    }
    return false;
  }).getOrElse(false);
}

function popRestMaybe(p) {
  if (p.size > 0) {
    let last = p.last();
    let rest = p.pop();
    return _ramdaFantasy.Maybe.of([last, rest]);
  }
  return Nothing();
}

function isTopFunctionExpression(prefix, exprAllowed) {
  // P . function^l . x? . () . {}     where isExprPrefix(P, b, l) = false
  return popRestMaybe(prefix).chain(([curly, rest]) => {
    if ((0, _tokens.isBraces)(curly)) {
      return popRestMaybe(rest);
    }
    return Nothing();
  }).chain(([paren, rest]) => {
    if ((0, _tokens.isParens)(paren)) {
      return popRestMaybe(rest);
    }
    return Nothing();
  }).chain(([optIdent, rest]) => {
    if ((0, _tokens.isIdentifier)(optIdent)) {
      return popRestMaybe(rest);
    }
    return _ramdaFantasy.Maybe.of([optIdent, rest]);
  }).chain(([fnKwd, rest]) => {
    if ((0, _tokens.isKeyword)(fnKwd, 'function')) {
      let l = (0, _tokens.getLineNumber)(fnKwd);
      if (l == null) {
        throw new Error('Un-expected null line number');
      }
      return _ramdaFantasy.Maybe.of(!isExprPrefix(l, exprAllowed, rest));
    }
    return _ramdaFantasy.Maybe.of(false);
  }).getOrElse(false);
}

function isTopObjectLiteral(prefix, exprAllowed) {
  // P . {T}^l  where isExprPrefix(P, b, l) = false
  return popRestMaybe(prefix).chain(([braces, rest]) => {
    if ((0, _tokens.isBraces)(braces)) {
      let l = (0, _tokens.getLineNumber)(braces);
      if (l == null) {
        throw new Error('Un-expected null line number');
      }
      return _ramdaFantasy.Maybe.of(!isExprPrefix(l, exprAllowed, rest));
    }
    return _ramdaFantasy.Maybe.of(false);
  }).getOrElse(false);
}

function isTopFunction(prefix) {
  // P . function^l . x? . () . {}     where isExprPrefix(P, b, l) = false
  return popRestMaybe(prefix).chain(([curly, rest]) => {
    if ((0, _tokens.isBraces)(curly)) {
      return popRestMaybe(rest);
    }
    return Nothing();
  }).chain(([paren, rest]) => {
    if ((0, _tokens.isParens)(paren)) {
      return popRestMaybe(rest);
    }
    return Nothing();
  }).chain(([optIdent, rest]) => {
    if ((0, _tokens.isIdentifier)(optIdent)) {
      return popRestMaybe(rest);
    }
    return _ramdaFantasy.Maybe.of([optIdent, rest]);
  }).chain(([fnKwd, rest]) => {
    if ((0, _tokens.isKeyword)(fnKwd, 'function')) {
      return _ramdaFantasy.Maybe.of(true);
    }
    return _ramdaFantasy.Maybe.of(false);
  }).getOrElse(false);
}

function isRegexPrefix(exprAllowed, prefix) {
  if (prefix.isEmpty()) {
    // ε
    return true;
  } else if (isTopPunctuator(prefix)) {
    // P . t   where t ∈ Punctuator
    return true;
  } else if (isTopStandaloneKeyword(prefix)) {
    // P . t . t'  where t \not = "." and t' ∈ (Keyword \setminus  LiteralKeyword)
    return true;
  } else if (isTopParensWithKeyword(prefix)) {
    // P . t . t' . (T)  where t \not = "." and t' ∈ (Keyword \setminus LiteralKeyword)
    return true;
  } else if (isTopFunction(prefix)) {
    // P . function^l . x? . () . {}     where isExprPrefix(P, b, l) = false
    return isTopFunctionExpression(prefix, exprAllowed);
  } else if (isTopObjectLiteral(prefix, exprAllowed)) {
    // P . {T}^l  where isExprPrefix(P, b, l) = false
    return true;
  }
  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,