'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


/*
 * Note: these are possible features for future enhancements. 
 * extendReadtable features:
 * 1. { key, mode: TerminatingMacro, action } - creates a delimiter must return an Array/List
 * 2. { key, mode: NonTerminatingMacro, action } - must return a Token or null/undefined. null/undefined simply consumes the read charstream.
 * 3. { key, mode: DispatchMacro, action } - triggered by reading #. otherwise like 2
 * 4. { key, delegateKey, delegateReadtable } - delegates to likeChar entry in readtable. Can be implemented
 *    by getEntry(delegateReadtable, delegateKey), adding key and passing to extendReadtable
 * 5. { key: null, mode: NonTerminatingMacro, action } - sets the default behavior for unmatched characters (identifiers/numbers)
 */

class Readtable {
  constructor(entries = []) {
    this._entries = entries;
  }

  getEntry(key) {
    if (!isValidKey(key)) throw Error('Invalid key type:', key);
    return this._entries[convertKey(key)] || this._entries[0];
  }

  extendReadtable(...entries) {
    const newTable = this._entries.slice();
    return new Readtable(entries.reduce(addEntry, newTable));
  }
}

exports.default = Readtable;
function addEntry(table, { key, action }) {
  if (!isValidKey(key)) throw Error('Invalid key type:', key);
  if (!isValidEntry({ key, action })) throw Error('Invalid readtable entry:', { key, action });

  // null/undefined key is the default and will be converted to 0
  // chars will be converted via codePointAt
  // numbers are...numbers
  // to accommodate default (null) 1 will be added to all and default will be at 0
  table[convertKey(key)] = { action };

  // if is a dispatch macro, we have to convert the key and bump it up by 0x110000
  // Note: The above depends on a primitive implementation of dispatch macros.
  //       I'm considering another implementation which will just use the current capabilities.
  return table;
}

const EmptyReadtable = exports.EmptyReadtable = new Readtable();

// Note: This was an experiment. IF the mode flags are included here, they can just be string constants.
// Symbol.for creates cross-realm Symbols
// export const TerminatingMacro = Symbol.for('readtable.terminating-macro-mode');
// export const NonTerminatingMacro = Symbol.for('readtable.non-terminating-macro-mode');
// export const DispatchMacro = Symbol.for('readtable.dispatch-macro-mode');

function isValidKey(key) {
  return key == null || typeof key === 'number' && key <= 0x10FFFF || typeof key === 'string' && key.length >= 0 && key.length <= 2;
}

// function isValidMode(mode: Symbol): boolean {
//   return mode === TerminatingMacro || mode === NonTerminatingMacro || mode === DispatchMacro;
// }

function isValidAction(action) {
  return typeof action === 'function';
}

function isValidEntry(entry) {
  return entry && isValidKey(entry.key) && /*isValidMode(entry.mode) &&*/isValidAction(entry.action);
}

function convertKey(key) {
  return key == null ? 0 : (typeof key === 'number' ? key : key.codePointAt(0)) + 1;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWFkZXIvcmVhZHRhYmxlLmpzIl0sIm5hbWVzIjpbIlJlYWR0YWJsZSIsImNvbnN0cnVjdG9yIiwiZW50cmllcyIsIl9lbnRyaWVzIiwiZ2V0RW50cnkiLCJrZXkiLCJpc1ZhbGlkS2V5IiwiRXJyb3IiLCJjb252ZXJ0S2V5IiwiZXh0ZW5kUmVhZHRhYmxlIiwibmV3VGFibGUiLCJzbGljZSIsInJlZHVjZSIsImFkZEVudHJ5IiwidGFibGUiLCJhY3Rpb24iLCJpc1ZhbGlkRW50cnkiLCJFbXB0eVJlYWR0YWJsZSIsImxlbmd0aCIsImlzVmFsaWRBY3Rpb24iLCJlbnRyeSIsImNvZGVQb2ludEF0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSUE7Ozs7Ozs7Ozs7O0FBV2UsTUFBTUEsU0FBTixDQUFnQjtBQUU3QkMsY0FBWUMsVUFBaUMsRUFBN0MsRUFBaUQ7QUFDL0MsU0FBS0MsUUFBTCxHQUFnQkQsT0FBaEI7QUFDRDs7QUFFREUsV0FBU0MsR0FBVCxFQUE2QztBQUMzQyxRQUFJLENBQUNDLFdBQVdELEdBQVgsQ0FBTCxFQUFzQixNQUFNRSxNQUFNLG1CQUFOLEVBQTJCRixHQUEzQixDQUFOO0FBQ3RCLFdBQU8sS0FBS0YsUUFBTCxDQUFjSyxXQUFXSCxHQUFYLENBQWQsS0FBa0MsS0FBS0YsUUFBTCxDQUFjLENBQWQsQ0FBekM7QUFDRDs7QUFFRE0sa0JBQWdCLEdBQUdQLE9BQW5CLEVBQThEO0FBQzVELFVBQU1RLFdBQVcsS0FBS1AsUUFBTCxDQUFjUSxLQUFkLEVBQWpCO0FBQ0EsV0FBTyxJQUFJWCxTQUFKLENBQWNFLFFBQVFVLE1BQVIsQ0FBZUMsUUFBZixFQUF5QkgsUUFBekIsQ0FBZCxDQUFQO0FBQ0Q7QUFkNEI7O2tCQUFWVixTO0FBaUJyQixTQUFTYSxRQUFULENBQWtCQyxLQUFsQixFQUFnRCxFQUFFVCxHQUFGLEVBQU9VLE1BQVAsRUFBaEQsRUFBd0c7QUFDdEcsTUFBSSxDQUFDVCxXQUFXRCxHQUFYLENBQUwsRUFBc0IsTUFBTUUsTUFBTSxtQkFBTixFQUEyQkYsR0FBM0IsQ0FBTjtBQUN0QixNQUFJLENBQUNXLGFBQWEsRUFBQ1gsR0FBRCxFQUFNVSxNQUFOLEVBQWIsQ0FBTCxFQUFrQyxNQUFNUixNQUFNLDBCQUFOLEVBQWtDLEVBQUNGLEdBQUQsRUFBTVUsTUFBTixFQUFsQyxDQUFOOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBRCxRQUFNTixXQUFXSCxHQUFYLENBQU4sSUFBeUIsRUFBRVUsTUFBRixFQUF6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFPRCxLQUFQO0FBQ0Q7O0FBRU0sTUFBTUcsMENBQWlCLElBQUlqQixTQUFKLEVBQXZCOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU00sVUFBVCxDQUFvQkQsR0FBcEIsRUFBeUI7QUFDdkIsU0FBT0EsT0FBTyxJQUFQLElBQ0osT0FBT0EsR0FBUCxLQUFlLFFBQWYsSUFBMkJBLE9BQU8sUUFEOUIsSUFFSixPQUFPQSxHQUFQLEtBQWUsUUFBZixJQUE0QkEsSUFBSWEsTUFBSixJQUFjLENBQWQsSUFBbUJiLElBQUlhLE1BQUosSUFBYyxDQUZoRTtBQUdEOztBQUVEO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQyxhQUFULENBQXVCSixNQUF2QixFQUErQjtBQUM3QixTQUFPLE9BQU9BLE1BQVAsS0FBa0IsVUFBekI7QUFDRDs7QUFXRCxTQUFTQyxZQUFULENBQXNCSSxLQUF0QixFQUE2QjtBQUMzQixTQUFPQSxTQUFTZCxXQUFXYyxNQUFNZixHQUFqQixDQUFULElBQWtDLDhCQUErQmMsY0FBY0MsTUFBTUwsTUFBcEIsQ0FBeEU7QUFDRDs7QUFFRCxTQUFTUCxVQUFULENBQW9CSCxHQUFwQixFQUFnRDtBQUM5QyxTQUFPQSxPQUFPLElBQVAsR0FBYyxDQUFkLEdBQWtCLENBQUMsT0FBT0EsR0FBUCxLQUFlLFFBQWYsR0FBMEJBLEdBQTFCLEdBQWdDQSxJQUFJZ0IsV0FBSixDQUFnQixDQUFoQixDQUFqQyxJQUF1RCxDQUFoRjtBQUNEIiwiZmlsZSI6InJlYWR0YWJsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIENoYXJTdHJlYW0gZnJvbSAnLi9jaGFyLXN0cmVhbSc7XG5cbi8qXG4gKiBOb3RlOiB0aGVzZSBhcmUgcG9zc2libGUgZmVhdHVyZXMgZm9yIGZ1dHVyZSBlbmhhbmNlbWVudHMuIFxuICogZXh0ZW5kUmVhZHRhYmxlIGZlYXR1cmVzOlxuICogMS4geyBrZXksIG1vZGU6IFRlcm1pbmF0aW5nTWFjcm8sIGFjdGlvbiB9IC0gY3JlYXRlcyBhIGRlbGltaXRlciBtdXN0IHJldHVybiBhbiBBcnJheS9MaXN0XG4gKiAyLiB7IGtleSwgbW9kZTogTm9uVGVybWluYXRpbmdNYWNybywgYWN0aW9uIH0gLSBtdXN0IHJldHVybiBhIFRva2VuIG9yIG51bGwvdW5kZWZpbmVkLiBudWxsL3VuZGVmaW5lZCBzaW1wbHkgY29uc3VtZXMgdGhlIHJlYWQgY2hhcnN0cmVhbS5cbiAqIDMuIHsga2V5LCBtb2RlOiBEaXNwYXRjaE1hY3JvLCBhY3Rpb24gfSAtIHRyaWdnZXJlZCBieSByZWFkaW5nICMuIG90aGVyd2lzZSBsaWtlIDJcbiAqIDQuIHsga2V5LCBkZWxlZ2F0ZUtleSwgZGVsZWdhdGVSZWFkdGFibGUgfSAtIGRlbGVnYXRlcyB0byBsaWtlQ2hhciBlbnRyeSBpbiByZWFkdGFibGUuIENhbiBiZSBpbXBsZW1lbnRlZFxuICogICAgYnkgZ2V0RW50cnkoZGVsZWdhdGVSZWFkdGFibGUsIGRlbGVnYXRlS2V5KSwgYWRkaW5nIGtleSBhbmQgcGFzc2luZyB0byBleHRlbmRSZWFkdGFibGVcbiAqIDUuIHsga2V5OiBudWxsLCBtb2RlOiBOb25UZXJtaW5hdGluZ01hY3JvLCBhY3Rpb24gfSAtIHNldHMgdGhlIGRlZmF1bHQgYmVoYXZpb3IgZm9yIHVubWF0Y2hlZCBjaGFyYWN0ZXJzIChpZGVudGlmaWVycy9udW1iZXJzKVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlYWR0YWJsZSB7XG4gIF9lbnRyaWVzOiBBcnJheTxSZWFkdGFibGVFbnRyeT47XG4gIGNvbnN0cnVjdG9yKGVudHJpZXM6IEFycmF5PFJlYWR0YWJsZUVudHJ5PiA9IFtdKSB7XG4gICAgdGhpcy5fZW50cmllcyA9IGVudHJpZXM7XG4gIH1cblxuICBnZXRFbnRyeShrZXk/OiBSZWFkdGFibGVLZXkpOiBSZWFkdGFibGVFbnRyeSB7XG4gICAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHRocm93IEVycm9yKCdJbnZhbGlkIGtleSB0eXBlOicsIGtleSk7XG4gICAgcmV0dXJuIHRoaXMuX2VudHJpZXNbY29udmVydEtleShrZXkpXSB8fCB0aGlzLl9lbnRyaWVzWzBdO1xuICB9XG5cbiAgZXh0ZW5kUmVhZHRhYmxlKC4uLmVudHJpZXM6IEFycmF5PFJlYWR0YWJsZUVudHJ5Pik6IFJlYWR0YWJsZSB7XG4gICAgY29uc3QgbmV3VGFibGUgPSB0aGlzLl9lbnRyaWVzLnNsaWNlKCk7XG4gICAgcmV0dXJuIG5ldyBSZWFkdGFibGUoZW50cmllcy5yZWR1Y2UoYWRkRW50cnksIG5ld1RhYmxlKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkRW50cnkodGFibGU6IEFycmF5PFJlYWR0YWJsZUVudHJ5PiwgeyBrZXksIGFjdGlvbiB9OiBSZWFkdGFibGVFbnRyeSk6IEFycmF5PFJlYWR0YWJsZUVudHJ5PiB7XG4gIGlmICghaXNWYWxpZEtleShrZXkpKSB0aHJvdyBFcnJvcignSW52YWxpZCBrZXkgdHlwZTonLCBrZXkpO1xuICBpZiAoIWlzVmFsaWRFbnRyeSh7a2V5LCBhY3Rpb259KSkgdGhyb3cgRXJyb3IoJ0ludmFsaWQgcmVhZHRhYmxlIGVudHJ5OicsIHtrZXksIGFjdGlvbn0pO1xuXG4gIC8vIG51bGwvdW5kZWZpbmVkIGtleSBpcyB0aGUgZGVmYXVsdCBhbmQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gMFxuICAvLyBjaGFycyB3aWxsIGJlIGNvbnZlcnRlZCB2aWEgY29kZVBvaW50QXRcbiAgLy8gbnVtYmVycyBhcmUuLi5udW1iZXJzXG4gIC8vIHRvIGFjY29tbW9kYXRlIGRlZmF1bHQgKG51bGwpIDEgd2lsbCBiZSBhZGRlZCB0byBhbGwgYW5kIGRlZmF1bHQgd2lsbCBiZSBhdCAwXG4gIHRhYmxlW2NvbnZlcnRLZXkoa2V5KV0gPSB7IGFjdGlvbiB9O1xuXG4gIC8vIGlmIGlzIGEgZGlzcGF0Y2ggbWFjcm8sIHdlIGhhdmUgdG8gY29udmVydCB0aGUga2V5IGFuZCBidW1wIGl0IHVwIGJ5IDB4MTEwMDAwXG4gIC8vIE5vdGU6IFRoZSBhYm92ZSBkZXBlbmRzIG9uIGEgcHJpbWl0aXZlIGltcGxlbWVudGF0aW9uIG9mIGRpc3BhdGNoIG1hY3Jvcy5cbiAgLy8gICAgICAgSSdtIGNvbnNpZGVyaW5nIGFub3RoZXIgaW1wbGVtZW50YXRpb24gd2hpY2ggd2lsbCBqdXN0IHVzZSB0aGUgY3VycmVudCBjYXBhYmlsaXRpZXMuXG4gIHJldHVybiB0YWJsZTtcbn1cblxuZXhwb3J0IGNvbnN0IEVtcHR5UmVhZHRhYmxlID0gbmV3IFJlYWR0YWJsZSgpO1xuXG4vLyBOb3RlOiBUaGlzIHdhcyBhbiBleHBlcmltZW50LiBJRiB0aGUgbW9kZSBmbGFncyBhcmUgaW5jbHVkZWQgaGVyZSwgdGhleSBjYW4ganVzdCBiZSBzdHJpbmcgY29uc3RhbnRzLlxuLy8gU3ltYm9sLmZvciBjcmVhdGVzIGNyb3NzLXJlYWxtIFN5bWJvbHNcbi8vIGV4cG9ydCBjb25zdCBUZXJtaW5hdGluZ01hY3JvID0gU3ltYm9sLmZvcigncmVhZHRhYmxlLnRlcm1pbmF0aW5nLW1hY3JvLW1vZGUnKTtcbi8vIGV4cG9ydCBjb25zdCBOb25UZXJtaW5hdGluZ01hY3JvID0gU3ltYm9sLmZvcigncmVhZHRhYmxlLm5vbi10ZXJtaW5hdGluZy1tYWNyby1tb2RlJyk7XG4vLyBleHBvcnQgY29uc3QgRGlzcGF0Y2hNYWNybyA9IFN5bWJvbC5mb3IoJ3JlYWR0YWJsZS5kaXNwYXRjaC1tYWNyby1tb2RlJyk7XG5cbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XG4gIHJldHVybiBrZXkgPT0gbnVsbCB8fFxuICAgICh0eXBlb2Yga2V5ID09PSAnbnVtYmVyJyAmJiBrZXkgPD0gMHgxMEZGRkYpIHx8XG4gICAgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIChrZXkubGVuZ3RoID49IDAgJiYga2V5Lmxlbmd0aCA8PSAyKSk7XG59XG5cbi8vIGZ1bmN0aW9uIGlzVmFsaWRNb2RlKG1vZGU6IFN5bWJvbCk6IGJvb2xlYW4ge1xuLy8gICByZXR1cm4gbW9kZSA9PT0gVGVybWluYXRpbmdNYWNybyB8fCBtb2RlID09PSBOb25UZXJtaW5hdGluZ01hY3JvIHx8IG1vZGUgPT09IERpc3BhdGNoTWFjcm87XG4vLyB9XG5cbmZ1bmN0aW9uIGlzVmFsaWRBY3Rpb24oYWN0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nO1xufVxuXG50eXBlIFJlYWR0YWJsZUtleSA9IHN0cmluZyB8IG51bWJlciB8IG51bGw7XG5cbnR5cGUgQWN0aW9uID0gKHN0cmVhbTogQ2hhclN0cmVhbSwgLi4ucmVzdDogQXJyYXk8YW55PikgPT4gYW55O1xuXG5leHBvcnQgdHlwZSBSZWFkdGFibGVFbnRyeSA9IHtcbiAga2V5PzogP1JlYWR0YWJsZUtleSxcbiAgYWN0aW9uOiBBY3Rpb25cbn07XG5cbmZ1bmN0aW9uIGlzVmFsaWRFbnRyeShlbnRyeSkge1xuICByZXR1cm4gZW50cnkgJiYgaXNWYWxpZEtleShlbnRyeS5rZXkpICYmIC8qaXNWYWxpZE1vZGUoZW50cnkubW9kZSkgJiYqLyBpc1ZhbGlkQWN0aW9uKGVudHJ5LmFjdGlvbik7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRLZXkoa2V5PzogUmVhZHRhYmxlS2V5KTogbnVtYmVyIHtcbiAgcmV0dXJuIGtleSA9PSBudWxsID8gMCA6ICh0eXBlb2Yga2V5ID09PSAnbnVtYmVyJyA/IGtleSA6IGtleS5jb2RlUG9pbnRBdCgwKSkgKyAxO1xufVxuIl19