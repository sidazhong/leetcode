'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = readComment;

var _readtable = require('readtable');

var _utils = require('./utils');

var _tokens = require('../tokens');

function readComment(stream) {
  let char = stream.peek();

  while (!(0, _readtable.isEOS)(char)) {
    let chCode = char.charCodeAt(0);
    if (chCode === 47) {
      /* "/" */const nxt = stream.peek(1);
      if ((0, _readtable.isEOS)(nxt)) {
        break;
      }
      chCode = nxt.charCodeAt(0);
      if (chCode === 47) {
        /* "/" */_utils.skipSingleLineComment.call(this, stream);
      } else if (chCode === 42) {
        /* "*" */skipMultiLineComment.call(this, stream);
      } else {
        break;
      }
    } else {
      break;
    }
    char = stream.peek();
  }

  return _tokens.EmptyToken;
}

function skipMultiLineComment(stream) {
  let idx = 2;
  let char = stream.peek(idx);
  const { position: startPosition } = stream.sourceInfo;
  let lineStart;
  while (!(0, _readtable.isEOS)(char)) {
    let chCode = char.charCodeAt(0);
    if (chCode < 0x80) {
      switch (chCode) {
        case 42:
          // "*"
          // Block comment ends with "*/".
          if (stream.peek(idx + 1).charAt(0) === '/') {
            stream.readString(idx + 2);
            if (lineStart) this.locationInfo.column = stream.sourceInfo.position - lineStart;
            return;
          }
          ++idx;
          break;
        case 10:
          // "\n"
          this.incrementLine();
          lineStart = startPosition + idx;
          ++idx;
          break;
        case 13:
          {
            // "\r":
            let startIdx = idx;
            if (stream.peek(idx + 1).charAt(0) === '\n') {
              ++idx;
            }
            ++idx;
            this.incrementLine();
            lineStart = startPosition + startIdx;
            break;
          }
        default:
          ++idx;
      }
    } else if (chCode === 0x2028 || chCode === 0x2029) {
      this.incrementLine();
      lineStart = startPosition + idx;
      ++idx;
    } else {
      ++idx;
    }
    char = stream.peek(idx);
  }
  throw this.createILLEGAL(char);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWFkZXIvcmVhZC1jb21tZW50LmpzIl0sIm5hbWVzIjpbInJlYWRDb21tZW50Iiwic3RyZWFtIiwiY2hhciIsInBlZWsiLCJjaENvZGUiLCJjaGFyQ29kZUF0Iiwibnh0IiwiY2FsbCIsInNraXBNdWx0aUxpbmVDb21tZW50IiwiaWR4IiwicG9zaXRpb24iLCJzdGFydFBvc2l0aW9uIiwic291cmNlSW5mbyIsImxpbmVTdGFydCIsImNoYXJBdCIsInJlYWRTdHJpbmciLCJsb2NhdGlvbkluZm8iLCJjb2x1bW4iLCJpbmNyZW1lbnRMaW5lIiwic3RhcnRJZHgiLCJjcmVhdGVJTExFR0FMIl0sIm1hcHBpbmdzIjoiOzs7OztrQkFPd0JBLFc7O0FBSnhCOztBQUNBOztBQUNBOztBQUVlLFNBQVNBLFdBQVQsQ0FBcUJDLE1BQXJCLEVBQTREO0FBQ3pFLE1BQUlDLE9BQU9ELE9BQU9FLElBQVAsRUFBWDs7QUFFQSxTQUFPLENBQUMsc0JBQU1ELElBQU4sQ0FBUixFQUFxQjtBQUNuQixRQUFJRSxTQUFTRixLQUFLRyxVQUFMLENBQWdCLENBQWhCLENBQWI7QUFDQSxRQUFJRCxXQUFXLEVBQWYsRUFBbUI7QUFDakIsZUFBVSxNQUFNRSxNQUFNTCxPQUFPRSxJQUFQLENBQVksQ0FBWixDQUFaO0FBQ1YsVUFBSSxzQkFBTUcsR0FBTixDQUFKLEVBQWdCO0FBQ2Q7QUFDRDtBQUNERixlQUFTRSxJQUFJRCxVQUFKLENBQWUsQ0FBZixDQUFUO0FBQ0EsVUFBSUQsV0FBVyxFQUFmLEVBQW1CO0FBQ2pCLGlCQUFVLDZCQUFzQkcsSUFBdEIsQ0FBMkIsSUFBM0IsRUFBaUNOLE1BQWpDO0FBQ1gsT0FGRCxNQUVPLElBQUlHLFdBQVcsRUFBZixFQUFtQjtBQUN4QixpQkFBVUkscUJBQXFCRCxJQUFyQixDQUEwQixJQUExQixFQUFnQ04sTUFBaEM7QUFDWCxPQUZNLE1BRUE7QUFDTDtBQUNEO0FBQ0YsS0FiRCxNQWFPO0FBQ0w7QUFDRDtBQUNEQyxXQUFPRCxPQUFPRSxJQUFQLEVBQVA7QUFDRDs7QUFFRDtBQUNEOztBQUVELFNBQVNLLG9CQUFULENBQThCUCxNQUE5QixFQUF3RDtBQUN0RCxNQUFJUSxNQUFNLENBQVY7QUFDQSxNQUFJUCxPQUFPRCxPQUFPRSxJQUFQLENBQVlNLEdBQVosQ0FBWDtBQUNBLFFBQU0sRUFBRUMsVUFBVUMsYUFBWixLQUE4QlYsT0FBT1csVUFBM0M7QUFDQSxNQUFJQyxTQUFKO0FBQ0EsU0FBTyxDQUFDLHNCQUFNWCxJQUFOLENBQVIsRUFBcUI7QUFDbkIsUUFBSUUsU0FBU0YsS0FBS0csVUFBTCxDQUFnQixDQUFoQixDQUFiO0FBQ0EsUUFBSUQsU0FBUyxJQUFiLEVBQW1CO0FBQ2pCLGNBQVFBLE1BQVI7QUFDRSxhQUFLLEVBQUw7QUFBUztBQUNQO0FBQ0EsY0FBSUgsT0FBT0UsSUFBUCxDQUFZTSxNQUFNLENBQWxCLEVBQXFCSyxNQUFyQixDQUE0QixDQUE1QixNQUFtQyxHQUF2QyxFQUE0QztBQUMxQ2IsbUJBQU9jLFVBQVAsQ0FBa0JOLE1BQU0sQ0FBeEI7QUFDQSxnQkFBSUksU0FBSixFQUNFLEtBQUtHLFlBQUwsQ0FBa0JDLE1BQWxCLEdBQTJCaEIsT0FBT1csVUFBUCxDQUFrQkYsUUFBbEIsR0FBNkJHLFNBQXhEO0FBQ0Y7QUFDRDtBQUNELFlBQUVKLEdBQUY7QUFDQTtBQUNGLGFBQUssRUFBTDtBQUFTO0FBQ1AsZUFBS1MsYUFBTDtBQUNBTCxzQkFBWUYsZ0JBQWdCRixHQUE1QjtBQUNBLFlBQUVBLEdBQUY7QUFDQTtBQUNGLGFBQUssRUFBTDtBQUFTO0FBQ1A7QUFDQSxnQkFBSVUsV0FBV1YsR0FBZjtBQUNBLGdCQUFJUixPQUFPRSxJQUFQLENBQVlNLE1BQU0sQ0FBbEIsRUFBcUJLLE1BQXJCLENBQTRCLENBQTVCLE1BQW1DLElBQXZDLEVBQTZDO0FBQzNDLGdCQUFFTCxHQUFGO0FBQ0Q7QUFDRCxjQUFFQSxHQUFGO0FBQ0EsaUJBQUtTLGFBQUw7QUFDQUwsd0JBQVlGLGdCQUFnQlEsUUFBNUI7QUFDQTtBQUNEO0FBQ0Q7QUFDRSxZQUFFVixHQUFGO0FBNUJKO0FBOEJELEtBL0JELE1BK0JPLElBQUlMLFdBQVcsTUFBWCxJQUFxQkEsV0FBVyxNQUFwQyxFQUE0QztBQUNqRCxXQUFLYyxhQUFMO0FBQ0FMLGtCQUFZRixnQkFBZ0JGLEdBQTVCO0FBQ0EsUUFBRUEsR0FBRjtBQUNELEtBSk0sTUFJQTtBQUNMLFFBQUVBLEdBQUY7QUFDRDtBQUNEUCxXQUFPRCxPQUFPRSxJQUFQLENBQVlNLEdBQVosQ0FBUDtBQUNEO0FBQ0QsUUFBTSxLQUFLVyxhQUFMLENBQW1CbEIsSUFBbkIsQ0FBTjtBQUNEIiwiZmlsZSI6InJlYWQtY29tbWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IENoYXJTdHJlYW0gfSBmcm9tICdyZWFkdGFibGUnO1xuXG5pbXBvcnQgeyBpc0VPUyB9IGZyb20gJ3JlYWR0YWJsZSc7XG5pbXBvcnQgeyBza2lwU2luZ2xlTGluZUNvbW1lbnQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IEVtcHR5VG9rZW4gfSBmcm9tICcuLi90b2tlbnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWFkQ29tbWVudChzdHJlYW06IENoYXJTdHJlYW0pOiB0eXBlb2YgRW1wdHlUb2tlbiB7XG4gIGxldCBjaGFyID0gc3RyZWFtLnBlZWsoKTtcblxuICB3aGlsZSAoIWlzRU9TKGNoYXIpKSB7XG4gICAgbGV0IGNoQ29kZSA9IGNoYXIuY2hhckNvZGVBdCgwKTtcbiAgICBpZiAoY2hDb2RlID09PSA0Nykge1xuICAgICAgLyogXCIvXCIgKi8gY29uc3Qgbnh0ID0gc3RyZWFtLnBlZWsoMSk7XG4gICAgICBpZiAoaXNFT1Mobnh0KSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNoQ29kZSA9IG54dC5jaGFyQ29kZUF0KDApO1xuICAgICAgaWYgKGNoQ29kZSA9PT0gNDcpIHtcbiAgICAgICAgLyogXCIvXCIgKi8gc2tpcFNpbmdsZUxpbmVDb21tZW50LmNhbGwodGhpcywgc3RyZWFtKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hDb2RlID09PSA0Mikge1xuICAgICAgICAvKiBcIipcIiAqLyBza2lwTXVsdGlMaW5lQ29tbWVudC5jYWxsKHRoaXMsIHN0cmVhbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNoYXIgPSBzdHJlYW0ucGVlaygpO1xuICB9XG5cbiAgcmV0dXJuIEVtcHR5VG9rZW47XG59XG5cbmZ1bmN0aW9uIHNraXBNdWx0aUxpbmVDb21tZW50KHN0cmVhbTogQ2hhclN0cmVhbSk6IHZvaWQge1xuICBsZXQgaWR4ID0gMjtcbiAgbGV0IGNoYXIgPSBzdHJlYW0ucGVlayhpZHgpO1xuICBjb25zdCB7IHBvc2l0aW9uOiBzdGFydFBvc2l0aW9uIH0gPSBzdHJlYW0uc291cmNlSW5mbztcbiAgbGV0IGxpbmVTdGFydDtcbiAgd2hpbGUgKCFpc0VPUyhjaGFyKSkge1xuICAgIGxldCBjaENvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKGNoQ29kZSA8IDB4ODApIHtcbiAgICAgIHN3aXRjaCAoY2hDb2RlKSB7XG4gICAgICAgIGNhc2UgNDI6IC8vIFwiKlwiXG4gICAgICAgICAgLy8gQmxvY2sgY29tbWVudCBlbmRzIHdpdGggXCIqL1wiLlxuICAgICAgICAgIGlmIChzdHJlYW0ucGVlayhpZHggKyAxKS5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgICAgICAgc3RyZWFtLnJlYWRTdHJpbmcoaWR4ICsgMik7XG4gICAgICAgICAgICBpZiAobGluZVN0YXJ0KVxuICAgICAgICAgICAgICB0aGlzLmxvY2F0aW9uSW5mby5jb2x1bW4gPSBzdHJlYW0uc291cmNlSW5mby5wb3NpdGlvbiAtIGxpbmVTdGFydDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgKytpZHg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTA6IC8vIFwiXFxuXCJcbiAgICAgICAgICB0aGlzLmluY3JlbWVudExpbmUoKTtcbiAgICAgICAgICBsaW5lU3RhcnQgPSBzdGFydFBvc2l0aW9uICsgaWR4O1xuICAgICAgICAgICsraWR4O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEzOiB7XG4gICAgICAgICAgLy8gXCJcXHJcIjpcbiAgICAgICAgICBsZXQgc3RhcnRJZHggPSBpZHg7XG4gICAgICAgICAgaWYgKHN0cmVhbS5wZWVrKGlkeCArIDEpLmNoYXJBdCgwKSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICsraWR4O1xuICAgICAgICAgIH1cbiAgICAgICAgICArK2lkeDtcbiAgICAgICAgICB0aGlzLmluY3JlbWVudExpbmUoKTtcbiAgICAgICAgICBsaW5lU3RhcnQgPSBzdGFydFBvc2l0aW9uICsgc3RhcnRJZHg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICArK2lkeDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoQ29kZSA9PT0gMHgyMDI4IHx8IGNoQ29kZSA9PT0gMHgyMDI5KSB7XG4gICAgICB0aGlzLmluY3JlbWVudExpbmUoKTtcbiAgICAgIGxpbmVTdGFydCA9IHN0YXJ0UG9zaXRpb24gKyBpZHg7XG4gICAgICArK2lkeDtcbiAgICB9IGVsc2Uge1xuICAgICAgKytpZHg7XG4gICAgfVxuICAgIGNoYXIgPSBzdHJlYW0ucGVlayhpZHgpO1xuICB9XG4gIHRocm93IHRoaXMuY3JlYXRlSUxMRUdBTChjaGFyKTtcbn1cbiJdfQ==