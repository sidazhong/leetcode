'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEOS = isEOS;


const sourceInfo = new WeakMap();
class CharStream {
  constructor(source, filename = '') {
    sourceInfo.set(this, {
      source,
      filename,
      position: 0
    });
  }

  get sourceInfo() {
    // $FlowFixMe: decide on how to handle possible nullability
    const { filename, position /*, source*/ } = sourceInfo.get(this);
    return { filename, position /*, source*/ };
  }

  // returns the Unicode character charsToSkip ahead.
  peek(charsToSkip = 0) {
    // $FlowFixMe: decide on how to handle possible nullability
    const { source, position } = sourceInfo.get(this);
    if (position + charsToSkip >= source.length) return '';
    return source[position + charsToSkip];
  }

  // returns a string containing the next numChars characters.
  readString(numChars = 1) {
    const info = sourceInfo.get(this);
    // $FlowFixMe: decide on how to handle possible nullability
    const { source, position } = info;
    const str = source.slice(position, position + numChars);
    // $FlowFixMe: decide on how to handle possible nullability
    info.position += str.length;
    return str;
  }

  getSlice(start) {
    // $FlowFixMe: decide on how to handle possible nullability
    const { source, position } = sourceInfo.get(this);
    return source.slice(start, position);
  }
}

exports.default = CharStream;
function isEOS(char) {
  return char === '';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yZWFkZXIvY2hhci1zdHJlYW0uanMiXSwibmFtZXMiOlsiaXNFT1MiLCJzb3VyY2VJbmZvIiwiV2Vha01hcCIsIkNoYXJTdHJlYW0iLCJjb25zdHJ1Y3RvciIsInNvdXJjZSIsImZpbGVuYW1lIiwic2V0IiwicG9zaXRpb24iLCJnZXQiLCJwZWVrIiwiY2hhcnNUb1NraXAiLCJsZW5ndGgiLCJyZWFkU3RyaW5nIiwibnVtQ2hhcnMiLCJpbmZvIiwic3RyIiwic2xpY2UiLCJnZXRTbGljZSIsInN0YXJ0IiwiY2hhciJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFpRGdCQSxLLEdBQUFBLEs7OztBQTNDaEIsTUFBTUMsYUFBYSxJQUFJQyxPQUFKLEVBQW5CO0FBRWUsTUFBTUMsVUFBTixDQUFpQjtBQUM5QkMsY0FBWUMsTUFBWixFQUE0QkMsV0FBbUIsRUFBL0MsRUFBbUQ7QUFDakRMLGVBQVdNLEdBQVgsQ0FBZSxJQUFmLEVBQXFCO0FBQ25CRixZQURtQjtBQUVuQkMsY0FGbUI7QUFHbkJFLGdCQUFVO0FBSFMsS0FBckI7QUFLRDs7QUFFRCxNQUFJUCxVQUFKLEdBQTZCO0FBQzNCO0FBQ0EsVUFBTSxFQUFFSyxRQUFGLEVBQVlFLFFBQVosQ0FBb0IsWUFBcEIsS0FBcUNQLFdBQVdRLEdBQVgsQ0FBZSxJQUFmLENBQTNDO0FBQ0EsV0FBTyxFQUFFSCxRQUFGLEVBQVlFLFFBQVosQ0FBb0IsWUFBcEIsRUFBUDtBQUNEOztBQUVEO0FBQ0FFLE9BQUtDLGNBQXNCLENBQTNCLEVBQXNDO0FBQ3BDO0FBQ0EsVUFBTSxFQUFFTixNQUFGLEVBQVVHLFFBQVYsS0FBdUJQLFdBQVdRLEdBQVgsQ0FBZSxJQUFmLENBQTdCO0FBQ0EsUUFBSUQsV0FBV0csV0FBWCxJQUEwQk4sT0FBT08sTUFBckMsRUFBNkMsT0FBTyxFQUFQO0FBQzdDLFdBQU9QLE9BQU9HLFdBQVdHLFdBQWxCLENBQVA7QUFDRDs7QUFFRDtBQUNBRSxhQUFXQyxXQUFtQixDQUE5QixFQUF5QztBQUN2QyxVQUFNQyxPQUFPZCxXQUFXUSxHQUFYLENBQWUsSUFBZixDQUFiO0FBQ0E7QUFDQSxVQUFNLEVBQUVKLE1BQUYsRUFBVUcsUUFBVixLQUF1Qk8sSUFBN0I7QUFDQSxVQUFNQyxNQUFNWCxPQUFPWSxLQUFQLENBQWFULFFBQWIsRUFBdUJBLFdBQVdNLFFBQWxDLENBQVo7QUFDQTtBQUNBQyxTQUFLUCxRQUFMLElBQWlCUSxJQUFJSixNQUFyQjtBQUNBLFdBQU9JLEdBQVA7QUFDRDs7QUFFREUsV0FBU0MsS0FBVCxFQUFnQztBQUM5QjtBQUNBLFVBQU0sRUFBRWQsTUFBRixFQUFVRyxRQUFWLEtBQXVCUCxXQUFXUSxHQUFYLENBQWUsSUFBZixDQUE3QjtBQUNBLFdBQU9KLE9BQU9ZLEtBQVAsQ0FBYUUsS0FBYixFQUFvQlgsUUFBcEIsQ0FBUDtBQUNEO0FBdEM2Qjs7a0JBQVhMLFU7QUF5Q2QsU0FBU0gsS0FBVCxDQUFlb0IsSUFBZixFQUFzQztBQUMzQyxTQUFPQSxTQUFTLEVBQWhCO0FBQ0QiLCJmaWxlIjoiY2hhci1zdHJlYW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuZXhwb3J0IHR5cGUgU291cmNlSW5mbyA9IHtcbiAgZmlsZW5hbWU6IHN0cmluZyxcbiAgcG9zaXRpb246IG51bWJlclxufTtcblxuY29uc3Qgc291cmNlSW5mbyA9IG5ldyBXZWFrTWFwKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYXJTdHJlYW0ge1xuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IHN0cmluZywgZmlsZW5hbWU6IHN0cmluZyA9ICcnKSB7XG4gICAgc291cmNlSW5mby5zZXQodGhpcywge1xuICAgICAgc291cmNlLFxuICAgICAgZmlsZW5hbWUsXG4gICAgICBwb3NpdGlvbjogMFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHNvdXJjZUluZm8oKTogU291cmNlSW5mbyB7XG4gICAgLy8gJEZsb3dGaXhNZTogZGVjaWRlIG9uIGhvdyB0byBoYW5kbGUgcG9zc2libGUgbnVsbGFiaWxpdHlcbiAgICBjb25zdCB7IGZpbGVuYW1lLCBwb3NpdGlvbi8qLCBzb3VyY2UqLyB9ID0gc291cmNlSW5mby5nZXQodGhpcyk7XG4gICAgcmV0dXJuIHsgZmlsZW5hbWUsIHBvc2l0aW9uLyosIHNvdXJjZSovIH07XG4gIH1cblxuICAvLyByZXR1cm5zIHRoZSBVbmljb2RlIGNoYXJhY3RlciBjaGFyc1RvU2tpcCBhaGVhZC5cbiAgcGVlayhjaGFyc1RvU2tpcDogbnVtYmVyID0gMCk6IHN0cmluZyB7XG4gICAgLy8gJEZsb3dGaXhNZTogZGVjaWRlIG9uIGhvdyB0byBoYW5kbGUgcG9zc2libGUgbnVsbGFiaWxpdHlcbiAgICBjb25zdCB7IHNvdXJjZSwgcG9zaXRpb24gfSA9IHNvdXJjZUluZm8uZ2V0KHRoaXMpO1xuICAgIGlmIChwb3NpdGlvbiArIGNoYXJzVG9Ta2lwID49IHNvdXJjZS5sZW5ndGgpIHJldHVybiAnJztcbiAgICByZXR1cm4gc291cmNlW3Bvc2l0aW9uICsgY2hhcnNUb1NraXBdO1xuICB9XG5cbiAgLy8gcmV0dXJucyBhIHN0cmluZyBjb250YWluaW5nIHRoZSBuZXh0IG51bUNoYXJzIGNoYXJhY3RlcnMuXG4gIHJlYWRTdHJpbmcobnVtQ2hhcnM6IG51bWJlciA9IDEpOiBzdHJpbmcge1xuICAgIGNvbnN0IGluZm8gPSBzb3VyY2VJbmZvLmdldCh0aGlzKTtcbiAgICAvLyAkRmxvd0ZpeE1lOiBkZWNpZGUgb24gaG93IHRvIGhhbmRsZSBwb3NzaWJsZSBudWxsYWJpbGl0eVxuICAgIGNvbnN0IHsgc291cmNlLCBwb3NpdGlvbiB9ID0gaW5mbztcbiAgICBjb25zdCBzdHIgPSBzb3VyY2Uuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgbnVtQ2hhcnMpO1xuICAgIC8vICRGbG93Rml4TWU6IGRlY2lkZSBvbiBob3cgdG8gaGFuZGxlIHBvc3NpYmxlIG51bGxhYmlsaXR5XG4gICAgaW5mby5wb3NpdGlvbiArPSBzdHIubGVuZ3RoO1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBnZXRTbGljZShzdGFydDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAvLyAkRmxvd0ZpeE1lOiBkZWNpZGUgb24gaG93IHRvIGhhbmRsZSBwb3NzaWJsZSBudWxsYWJpbGl0eVxuICAgIGNvbnN0IHsgc291cmNlLCBwb3NpdGlvbiB9ID0gc291cmNlSW5mby5nZXQodGhpcyk7XG4gICAgcmV0dXJuIHNvdXJjZS5zbGljZShzdGFydCwgcG9zaXRpb24pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VPUyhjaGFyOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGNoYXIgPT09ICcnO1xufVxuIl19