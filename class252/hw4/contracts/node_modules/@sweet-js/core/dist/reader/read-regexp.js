'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = readRegExp;

var _readtable = require('readtable');

var _tokens = require('../tokens');

var _utils = require('./utils');

function readRegExp(stream) {
  let value = stream.readString(),
      char = stream.peek(),
      idx = 0,
      classMarker = false,
      terminated = false;

  const UNTERMINATED_REGEXP_MSG = 'Invalid regular expression: missing /';

  while (!(0, _readtable.isEOS)(char)) {
    if (char === '\\') {
      value += char;
      ++idx;
      char = stream.peek(idx);

      if ((0, _utils.isLineTerminator)(char.charCodeAt(0))) {
        throw this.createError(UNTERMINATED_REGEXP_MSG);
      }
      value += char;
      ++idx;
    } else if ((0, _utils.isLineTerminator)(char.charCodeAt(0))) {
      throw this.createError(UNTERMINATED_REGEXP_MSG);
    } else {
      if (classMarker) {
        if (char === ']') {
          classMarker = false;
        }
      } else {
        if (char === '/') {
          terminated = true;
          value += char;
          ++idx;
          char = stream.peek(idx);
          break;
        } else if (char === '[') {
          classMarker = true;
        }
      }
      value += char;
      ++idx;
    }
    char = stream.peek(idx);
  }

  if (!terminated) {
    throw this.createError(UNTERMINATED_REGEXP_MSG);
  }

  while (!(0, _readtable.isEOS)(char)) {
    if (char === '\\') {
      throw this.createError('Invalid regular expression flags');
    }
    if (!(0, _utils.isIdentifierPart)(char.charCodeAt(0))) {
      break;
    }
    value += char;
    ++idx;
    char = stream.peek(idx);
  }

  stream.readString(idx);

  return new _tokens.RegExpToken({
    value
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWFkZXIvcmVhZC1yZWdleHAuanMiXSwibmFtZXMiOlsicmVhZFJlZ0V4cCIsInN0cmVhbSIsInZhbHVlIiwicmVhZFN0cmluZyIsImNoYXIiLCJwZWVrIiwiaWR4IiwiY2xhc3NNYXJrZXIiLCJ0ZXJtaW5hdGVkIiwiVU5URVJNSU5BVEVEX1JFR0VYUF9NU0ciLCJjaGFyQ29kZUF0IiwiY3JlYXRlRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQU93QkEsVTs7QUFKeEI7O0FBQ0E7O0FBQ0E7O0FBRWUsU0FBU0EsVUFBVCxDQUFvQkMsTUFBcEIsRUFBd0M7QUFDckQsTUFBSUMsUUFBUUQsT0FBT0UsVUFBUCxFQUFaO0FBQUEsTUFDRUMsT0FBT0gsT0FBT0ksSUFBUCxFQURUO0FBQUEsTUFFRUMsTUFBTSxDQUZSO0FBQUEsTUFHRUMsY0FBYyxLQUhoQjtBQUFBLE1BSUVDLGFBQWEsS0FKZjs7QUFNQSxRQUFNQywwQkFBMEIsdUNBQWhDOztBQUVBLFNBQU8sQ0FBQyxzQkFBTUwsSUFBTixDQUFSLEVBQXFCO0FBQ25CLFFBQUlBLFNBQVMsSUFBYixFQUFtQjtBQUNqQkYsZUFBU0UsSUFBVDtBQUNBLFFBQUVFLEdBQUY7QUFDQUYsYUFBT0gsT0FBT0ksSUFBUCxDQUFZQyxHQUFaLENBQVA7O0FBRUEsVUFBSSw2QkFBaUJGLEtBQUtNLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBakIsQ0FBSixFQUEwQztBQUN4QyxjQUFNLEtBQUtDLFdBQUwsQ0FBaUJGLHVCQUFqQixDQUFOO0FBQ0Q7QUFDRFAsZUFBU0UsSUFBVDtBQUNBLFFBQUVFLEdBQUY7QUFDRCxLQVZELE1BVU8sSUFBSSw2QkFBaUJGLEtBQUtNLFVBQUwsQ0FBZ0IsQ0FBaEIsQ0FBakIsQ0FBSixFQUEwQztBQUMvQyxZQUFNLEtBQUtDLFdBQUwsQ0FBaUJGLHVCQUFqQixDQUFOO0FBQ0QsS0FGTSxNQUVBO0FBQ0wsVUFBSUYsV0FBSixFQUFpQjtBQUNmLFlBQUlILFNBQVMsR0FBYixFQUFrQjtBQUNoQkcsd0JBQWMsS0FBZDtBQUNEO0FBQ0YsT0FKRCxNQUlPO0FBQ0wsWUFBSUgsU0FBUyxHQUFiLEVBQWtCO0FBQ2hCSSx1QkFBYSxJQUFiO0FBQ0FOLG1CQUFTRSxJQUFUO0FBQ0EsWUFBRUUsR0FBRjtBQUNBRixpQkFBT0gsT0FBT0ksSUFBUCxDQUFZQyxHQUFaLENBQVA7QUFDQTtBQUNELFNBTkQsTUFNTyxJQUFJRixTQUFTLEdBQWIsRUFBa0I7QUFDdkJHLHdCQUFjLElBQWQ7QUFDRDtBQUNGO0FBQ0RMLGVBQVNFLElBQVQ7QUFDQSxRQUFFRSxHQUFGO0FBQ0Q7QUFDREYsV0FBT0gsT0FBT0ksSUFBUCxDQUFZQyxHQUFaLENBQVA7QUFDRDs7QUFFRCxNQUFJLENBQUNFLFVBQUwsRUFBaUI7QUFDZixVQUFNLEtBQUtHLFdBQUwsQ0FBaUJGLHVCQUFqQixDQUFOO0FBQ0Q7O0FBRUQsU0FBTyxDQUFDLHNCQUFNTCxJQUFOLENBQVIsRUFBcUI7QUFDbkIsUUFBSUEsU0FBUyxJQUFiLEVBQW1CO0FBQ2pCLFlBQU0sS0FBS08sV0FBTCxDQUFpQixrQ0FBakIsQ0FBTjtBQUNEO0FBQ0QsUUFBSSxDQUFDLDZCQUFpQlAsS0FBS00sVUFBTCxDQUFnQixDQUFoQixDQUFqQixDQUFMLEVBQTJDO0FBQ3pDO0FBQ0Q7QUFDRFIsYUFBU0UsSUFBVDtBQUNBLE1BQUVFLEdBQUY7QUFDQUYsV0FBT0gsT0FBT0ksSUFBUCxDQUFZQyxHQUFaLENBQVA7QUFDRDs7QUFFREwsU0FBT0UsVUFBUCxDQUFrQkcsR0FBbEI7O0FBRUEsU0FBTyx3QkFBZ0I7QUFDckJKO0FBRHFCLEdBQWhCLENBQVA7QUFHRCIsImZpbGUiOiJyZWFkLXJlZ2V4cC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5pbXBvcnQgdHlwZSB7IENoYXJTdHJlYW0gfSBmcm9tICdyZWFkdGFibGUnO1xuXG5pbXBvcnQgeyBpc0VPUyB9IGZyb20gJ3JlYWR0YWJsZSc7XG5pbXBvcnQgeyBSZWdFeHBUb2tlbiB9IGZyb20gJy4uL3Rva2Vucyc7XG5pbXBvcnQgeyBpc0xpbmVUZXJtaW5hdG9yLCBpc0lkZW50aWZpZXJQYXJ0IH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlYWRSZWdFeHAoc3RyZWFtOiBDaGFyU3RyZWFtKSB7XG4gIGxldCB2YWx1ZSA9IHN0cmVhbS5yZWFkU3RyaW5nKCksXG4gICAgY2hhciA9IHN0cmVhbS5wZWVrKCksXG4gICAgaWR4ID0gMCxcbiAgICBjbGFzc01hcmtlciA9IGZhbHNlLFxuICAgIHRlcm1pbmF0ZWQgPSBmYWxzZTtcblxuICBjb25zdCBVTlRFUk1JTkFURURfUkVHRVhQX01TRyA9ICdJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbjogbWlzc2luZyAvJztcblxuICB3aGlsZSAoIWlzRU9TKGNoYXIpKSB7XG4gICAgaWYgKGNoYXIgPT09ICdcXFxcJykge1xuICAgICAgdmFsdWUgKz0gY2hhcjtcbiAgICAgICsraWR4O1xuICAgICAgY2hhciA9IHN0cmVhbS5wZWVrKGlkeCk7XG5cbiAgICAgIGlmIChpc0xpbmVUZXJtaW5hdG9yKGNoYXIuY2hhckNvZGVBdCgwKSkpIHtcbiAgICAgICAgdGhyb3cgdGhpcy5jcmVhdGVFcnJvcihVTlRFUk1JTkFURURfUkVHRVhQX01TRyk7XG4gICAgICB9XG4gICAgICB2YWx1ZSArPSBjaGFyO1xuICAgICAgKytpZHg7XG4gICAgfSBlbHNlIGlmIChpc0xpbmVUZXJtaW5hdG9yKGNoYXIuY2hhckNvZGVBdCgwKSkpIHtcbiAgICAgIHRocm93IHRoaXMuY3JlYXRlRXJyb3IoVU5URVJNSU5BVEVEX1JFR0VYUF9NU0cpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY2xhc3NNYXJrZXIpIHtcbiAgICAgICAgaWYgKGNoYXIgPT09ICddJykge1xuICAgICAgICAgIGNsYXNzTWFya2VyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjaGFyID09PSAnLycpIHtcbiAgICAgICAgICB0ZXJtaW5hdGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZSArPSBjaGFyO1xuICAgICAgICAgICsraWR4O1xuICAgICAgICAgIGNoYXIgPSBzdHJlYW0ucGVlayhpZHgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT09ICdbJykge1xuICAgICAgICAgIGNsYXNzTWFya2VyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFsdWUgKz0gY2hhcjtcbiAgICAgICsraWR4O1xuICAgIH1cbiAgICBjaGFyID0gc3RyZWFtLnBlZWsoaWR4KTtcbiAgfVxuXG4gIGlmICghdGVybWluYXRlZCkge1xuICAgIHRocm93IHRoaXMuY3JlYXRlRXJyb3IoVU5URVJNSU5BVEVEX1JFR0VYUF9NU0cpO1xuICB9XG5cbiAgd2hpbGUgKCFpc0VPUyhjaGFyKSkge1xuICAgIGlmIChjaGFyID09PSAnXFxcXCcpIHtcbiAgICAgIHRocm93IHRoaXMuY3JlYXRlRXJyb3IoJ0ludmFsaWQgcmVndWxhciBleHByZXNzaW9uIGZsYWdzJyk7XG4gICAgfVxuICAgIGlmICghaXNJZGVudGlmaWVyUGFydChjaGFyLmNoYXJDb2RlQXQoMCkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFsdWUgKz0gY2hhcjtcbiAgICArK2lkeDtcbiAgICBjaGFyID0gc3RyZWFtLnBlZWsoaWR4KTtcbiAgfVxuXG4gIHN0cmVhbS5yZWFkU3RyaW5nKGlkeCk7XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHBUb2tlbih7XG4gICAgdmFsdWUsXG4gIH0pO1xufVxuIl19