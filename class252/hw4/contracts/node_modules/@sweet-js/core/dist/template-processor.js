'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processTemplate = processTemplate;
exports.replaceTemplate = replaceTemplate;

var _immutable = require('immutable');

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _errors = require('./errors');

var _sweetSpec = require('sweet-spec');

var T = _interopRequireWildcard(_sweetSpec);

var _syntax = require('./syntax');

var _syntax2 = _interopRequireDefault(_syntax);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
Given a syntax list like:

  [foo, bar, $, { 42, +, 24 }, baz]

convert it to:

  [foo, bar, $, { 0 }, baz]

and return another list with the interpolated values at the corresponding
positions.

Requires either lookahead/lookbehind of one (to see the $).
*/

const isDolar = s => s instanceof T.RawSyntax && typeof s.value.match === 'function' && s.value.match('identifier') && s.value.val() === '$';
const isDelimiter = s => s instanceof T.RawDelimiter;
const isBraces = s => s instanceof T.RawDelimiter && s.kind === 'braces';
const isParens = s => s instanceof T.RawDelimiter && s.kind === 'parens';
const isBrackets = s => s instanceof T.RawDelimiter && s.kind === 'brackets';

const mkDelimiter = (kind, inner, from) => {
  return new T.RawDelimiter({
    kind,
    // $FlowFixMe: flow doesn't know arrays are actually lists
    inner: _immutable.List.of(from.inner.first()).concat(inner).concat(from.inner.last())
  });
};

const insertIntoDelimiter = _ramda2.default.cond([[isBraces, (s, r) => mkDelimiter('braces', r, s)], [isParens, (s, r) => mkDelimiter('parens', r, s)], [isBrackets, (s, r) => mkDelimiter('brackets', r, s)]]);

const process = (acc, s) => {
  if (isBraces(s) && isDolar(acc.template.last())) {
    let idx = _syntax2.default.fromNumber(acc.interp.size, s.inner.first().value);
    return {
      template: acc.template.push(mkDelimiter('braces', _immutable.List.of(new T.RawSyntax({
        value: idx
      })), s)),
      interp: acc.interp.push(s.inner.slice(1, s.inner.size - 1))
    };
  } else if (isDelimiter(s)) {
    let innerResult = processTemplate(s.inner.slice(1, s.inner.size - 1), acc.interp);
    return {
      template: acc.template.push(insertIntoDelimiter(s, innerResult.template)),
      interp: innerResult.interp
    };
  } else {
    return {
      template: acc.template.push(s),
      interp: acc.interp
    };
  }
};

function getLineNumber(t) {
  if (t instanceof T.RawSyntax) {
    return t.value.lineNumber();
  }
  return t.inner.first().value.lineNumber();
}

function setLineNumber(t, lineNumber) {
  if (t instanceof T.RawSyntax) {
    return t.extend({
      value: t.value.setLineNumber(lineNumber)
    });
  } else if (t instanceof T.RawDelimiter) {
    return t.extend({
      inner: t.inner.map(tt => setLineNumber(tt, lineNumber))
    });
  } else if (_immutable.List.isList(t)) {
    return t.map(tt => setLineNumber(tt, lineNumber));
  }
  // TODO: need to handle line numbers for all AST nodes
  return t;
}

function cloneLineNumber(to, from) {
  if (from && to) {
    return setLineNumber(to, getLineNumber(from));
  }
  return to;
}

const replace = (acc, s) => {
  let last = acc.template.get(-1);
  let beforeLast = acc.template.get(-2);
  if (isBraces(s) && isDolar(last)) {
    let index = s.inner.get(1).value.val();
    (0, _errors.assert)(acc.rep.size > index, 'unknown replacement value');
    // TODO: figure out holistic solution to line nubmers and ASI
    let replacement = cloneLineNumber(acc.rep.get(index), beforeLast);
    // let replacement = acc.rep.get(index);
    return {
      template: acc.template.pop().concat(replacement),
      rep: acc.rep
    };
  } else if (isDelimiter(s)) {
    let innerResult = replaceTemplate(s.inner.slice(1, s.inner.size - 1), acc.rep);
    return {
      template: acc.template.push(insertIntoDelimiter(s, innerResult)),
      rep: acc.rep
    };
  } else {
    return {
      template: acc.template.push(s),
      rep: acc.rep
    };
  }
};

function processTemplate(temp, interp = (0, _immutable.List)()) {
  return temp.reduce(process, { template: (0, _immutable.List)(), interp });
}

function replaceTemplate(temp, rep) {
  return temp.reduce(replace, { template: (0, _immutable.List)(), rep }).template;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,