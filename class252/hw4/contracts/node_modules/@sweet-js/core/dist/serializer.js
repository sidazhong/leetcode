"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializer = exports.makeDeserializer = undefined;

var _transitJs = require("transit-js");

var _transitJs2 = _interopRequireDefault(_transitJs);

var _immutable = require("immutable");

var _syntax = require("./syntax");

var _syntax2 = _interopRequireDefault(_syntax);

var _symbol = require("./symbol");

var _tokens = require("./tokens");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let typeMap = [_tokens.TokenType.STRING, _tokens.TokenType.EOS, _tokens.TokenType.LPAREN, _tokens.TokenType.RPAREN, _tokens.TokenType.LBRACK, _tokens.TokenType.RBRACK, _tokens.TokenType.LBRACE, _tokens.TokenType.RBRACE, _tokens.TokenType.COLON, _tokens.TokenType.SEMICOLON, _tokens.TokenType.PERIOD, _tokens.TokenType.ELLIPSIS, _tokens.TokenType.ARROW, _tokens.TokenType.CONDITIONAL, _tokens.TokenType.INC, _tokens.TokenType.DEC, _tokens.TokenType.ASSIGN, _tokens.TokenType.ASSIGN_BIT_OR, _tokens.TokenType.ASSIGN_BIT_XOR, _tokens.TokenType.ASSIGN_BIT_AND, _tokens.TokenType.ASSIGN_SHL, _tokens.TokenType.ASSIGN_SHR, _tokens.TokenType.ASSIGN_SHR_UNSIGNED, _tokens.TokenType.ASSIGN_ADD, _tokens.TokenType.ASSIGN_SUB, _tokens.TokenType.ASSIGN_MUL, _tokens.TokenType.ASSIGN_DIV, _tokens.TokenType.ASSIGN_MOD, _tokens.TokenType.COMMA, _tokens.TokenType.OR, _tokens.TokenType.AND, _tokens.TokenType.BIT_OR, _tokens.TokenType.BIT_XOR, _tokens.TokenType.BIT_AND, _tokens.TokenType.SHL, _tokens.TokenType.SHR, _tokens.TokenType.SHR_UNSIGNED, _tokens.TokenType.ADD, _tokens.TokenType.SUB, _tokens.TokenType.MUL, _tokens.TokenType.DIV, _tokens.TokenType.MOD, _tokens.TokenType.EQ, _tokens.TokenType.NE, _tokens.TokenType.EQ_STRICT, _tokens.TokenType.NE_STRICT, _tokens.TokenType.LT, _tokens.TokenType.GT, _tokens.TokenType.LTE, _tokens.TokenType.GTE, _tokens.TokenType.INSTANCEOF, _tokens.TokenType.IN, _tokens.TokenType.NOT, _tokens.TokenType.BIT_NOT, _tokens.TokenType.AWAIT, _tokens.TokenType.DELETE, _tokens.TokenType.TYPEOF, _tokens.TokenType.VOID, _tokens.TokenType.BREAK, _tokens.TokenType.CASE, _tokens.TokenType.CATCH, _tokens.TokenType.CLASS, _tokens.TokenType.CONTINUE, _tokens.TokenType.DEBUGGER, _tokens.TokenType.DEFAULT, _tokens.TokenType.DO, _tokens.TokenType.ELSE, _tokens.TokenType.EXPORT, _tokens.TokenType.EXTENDS, _tokens.TokenType.FINALLY, _tokens.TokenType.FOR, _tokens.TokenType.FUNCTION, _tokens.TokenType.IF, _tokens.TokenType.IMPORT, _tokens.TokenType.LET, _tokens.TokenType.NEW, _tokens.TokenType.RETURN, _tokens.TokenType.SUPER, _tokens.TokenType.SWITCH, _tokens.TokenType.THIS, _tokens.TokenType.THROW, _tokens.TokenType.TRY, _tokens.TokenType.VAR, _tokens.TokenType.WHILE, _tokens.TokenType.WITH, _tokens.TokenType.NULL, _tokens.TokenType.TRUE, _tokens.TokenType.FALSE, _tokens.TokenType.YIELD, _tokens.TokenType.NUMBER, _tokens.TokenType.STRING, _tokens.TokenType.REGEXP, _tokens.TokenType.IDENTIFIER, _tokens.TokenType.CONST, _tokens.TokenType.TEMPLATE, _tokens.TokenType.ILLEGAL];

let ListHandler = _transitJs2.default.makeWriteHandler({
  tag: () => "array",
  rep: v => v
});

let MapHandler = _transitJs2.default.makeWriteHandler({
  tag: function tag() {
    return "map";
  },
  rep: function rep(v) {
    return v;
  },
  stringRep: function stringRep() {
    return null;
  }
});

let SyntaxHandler = _transitJs2.default.makeWriteHandler({
  tag: () => "stx",
  rep: v => {
    if (_immutable.List.isList(v.token)) {
      return [v.token, v.scopesets];
    } else {
      let t = _transitJs2.default.objectToMap(v.token);
      t.set("type", typeMap.indexOf(v.token.type));
      return [t, v.scopesets];
    }
  }
});
let SymbolHandler = _transitJs2.default.makeWriteHandler({
  tag: () => "symb",
  rep: v => [v.name]
});

let writer = _transitJs2.default.writer("json", {
  handlers: _transitJs2.default.map([_immutable.List, ListHandler, _immutable.Map, MapHandler, _syntax2.default, SyntaxHandler, _symbol.SymbolClass, SymbolHandler])
});

function makeReader(bindings) {
  return _transitJs2.default.reader("json", {
    arrayBuilder: {
      init: () => (0, _immutable.List)().asMutable(),
      add: (ret, val) => ret.push(val),
      finalize: ret => ret.asImmutable(),
      fromArray: arr => (0, _immutable.List)(arr)
    },
    mapBuilder: {
      init: function init() {
        return (0, _immutable.Map)().asMutable();
      },
      add: function add(ret, key, val) {
        return ret.set(key, val);
      },
      finalize: function finalize(ret) {
        return ret.asImmutable();
      }
    },
    handlers: {
      "stx": rep => {
        let scopesets = _transitJs2.default.mapToObject(rep[1]);
        if (_immutable.List.isList(rep[0])) {
          let token = rep[0];
          return new _syntax2.default(token, { bindings: bindings, scopesets: scopesets });
        } else {
          let token = _transitJs2.default.mapToObject(rep[0]);
          token.type = typeMap[rep[0].get("type")];
          token.slice = rep[0].has("slice") ? _transitJs2.default.mapToObject(rep[0].get("slice")) : undefined;
          if (token.slice) {
            token.slice.startLocation = _transitJs2.default.mapToObject(token.slice.startLocation);
          }
          return new _syntax2.default(token, { bindings: bindings, scopesets: scopesets });
        }
      },
      "symb": rep => {
        return (0, _symbol.Symbol)(rep[0]);
      }
    }
  });
}

exports.makeDeserializer = makeReader;
exports.serializer = writer;
//# sourceMappingURL=data:application/json;base64,