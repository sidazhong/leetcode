'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _sweetSpec = require('sweet-spec');

var S = _interopRequireWildcard(_sweetSpec);

var _immutable = require('immutable');

var _enforester = require('./enforester');

var _termExpander = require('./term-expander.js');

var _termExpander2 = _interopRequireDefault(_termExpander);

var _env = require('./env');

var _env2 = _interopRequireDefault(_env);

var _ramda = require('ramda');

var _ = _interopRequireWildcard(_ramda);

var _terms = require('./terms');

var T = _interopRequireWildcard(_terms);

var _symbol = require('./symbol');

var _transforms = require('./transforms');

var _loadSyntax = require('./load-syntax');

var _scope = require('./scope');

var _syntax = require('./syntax');

var _astDispatcher = require('./ast-dispatcher');

var _astDispatcher2 = _interopRequireDefault(_astDispatcher);

var _syntax2 = require('./syntax.js');

var _syntax3 = _interopRequireDefault(_syntax2);

var _scopeReducer = require('./scope-reducer');

var _scopeReducer2 = _interopRequireDefault(_scopeReducer);

var _moduleVisitor = require('./module-visitor');

var _moduleVisitor2 = _interopRequireDefault(_moduleVisitor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// $FlowFixMe: flow doesn't know about the CloneReducer yet
class RegisterBindingsReducer extends S.default.CloneReducer {

  constructor(useScope, phase, skipDup, bindings, env) {
    super();
    this.useScope = useScope;
    this.phase = phase;
    this.bindings = bindings;
    this.skipDup = skipDup;
    this.env = env;
  }

  reduceBindingIdentifier(t, s) {
    let newName = s.name.removeScope(this.useScope, this.phase);
    let newBinding = (0, _symbol.gensym)(newName.val());
    this.bindings.add(newName, {
      binding: newBinding,
      phase: this.phase,
      skipDup: this.skipDup
    });
    this.env.set(newBinding.toString(), new _transforms.VarBindingTransform(newName));
    // $FlowFixMe: flow doesn't know about extend
    return t.extend({
      name: newName
    });
  }
}

// $FlowFixMe: flow doesn't know about the CloneReducer yet
class RegisterSyntaxBindingsReducer extends S.default.CloneReducer {

  constructor(useScope, phase, bindings, env, val) {
    super();
    this.useScope = useScope;
    this.phase = phase;
    this.bindings = bindings;
    this.env = env;
    this.val = val;
  }

  reduceBindingIdentifier(t, s) {
    let newName = s.name.removeScope(this.useScope, this.phase);
    let newBinding = (0, _symbol.gensym)(newName.val());
    this.bindings.add(newName, {
      binding: newBinding,
      phase: this.phase,
      skipDup: false
    });
    let resolvedName = newName.resolve(this.phase);
    this.env.set(resolvedName, new _transforms.CompiletimeTransform(this.val));
    // $FlowFixMe: flow doesn't know about extend
    return t.extend({
      name: newName
    });
  }
}

class TokenExpander extends _astDispatcher2.default {
  constructor(context) {
    super('expand', false);
    this.context = context;
  }

  expand(stxl) {
    let result = [];
    if (stxl.size === 0) {
      return (0, _immutable.List)(result);
    }
    let prev = (0, _immutable.List)();
    let enf = new _enforester.Enforester(stxl, prev, this.context);

    while (!enf.done) {
      result.push(this.dispatch(enf.enforest()));
    }

    return (0, _immutable.List)(result);
  }

  expandVariableDeclarationStatement(term) {
    // $FlowFixMe: flow doesn't know about extend
    return term.extend({
      declaration: this.registerVariableDeclaration(term.declaration)
    });
  }

  expandFunctionDeclaration(term) {
    return this.registerFunctionOrClass(term);
  }

  // TODO: think about function expressions

  registerImport(term) {
    let path = term.moduleSpecifier.val();
    let mod;
    let visitor = new _moduleVisitor2.default(this.context);
    if (term.forSyntax) {
      mod = this.context.loader.get(path, this.context.phase + 1, this.context.cwd);
      this.context.store = visitor.visit(mod, this.context.phase + 1, this.context.store, mod.path);
      this.context.store = visitor.invoke(mod, this.context.phase + 1, this.context.store, mod.path);
    } else {
      mod = this.context.loader.get(path, this.context.phase, this.context.cwd);
      this.context.store = visitor.visit(mod, this.context.phase, this.context.store, mod.path);
    }
    (0, _moduleVisitor.bindImports)(term, mod, this.context.phase, this.context, this.context.isEntrypoint);
    let defaultBinding = null;
    let namedImports = (0, _immutable.List)();
    if (term.defaultBinding != null) {
      if (!(0, _moduleVisitor.isBoundToCompiletime)(term.defaultBinding.name, this.context.store)) {
        defaultBinding = term.defaultBinding;
      }
    }
    if (term instanceof S.Import) {
      namedImports = term.namedImports.filter(specifier => !(0, _moduleVisitor.isBoundToCompiletime)(specifier.binding.name, this.context.store));
      if (defaultBinding == null && namedImports.size === 0) {
        return new S.EmptyStatement();
      }
      return new S.Import({
        forSyntax: term.forSyntax,
        moduleSpecifier: term.moduleSpecifier,
        defaultBinding,
        namedImports
      });
    } else if (term instanceof S.ImportNamespace) {
      return new S.ImportNamespace({
        forSyntax: term.forSyntax,
        moduleSpecifier: term.moduleSpecifier,
        defaultBinding,
        namespaceBinding: term.namespaceBinding
      });
    }
    // return a new import filtered to just the runtime imports
    return term;
  }

  expandImport(term) {
    return this.registerImport(term);
  }

  expandImportNamespace(term) {
    return this.registerImport(term);
  }

  expandExport(term) {
    if (T.isFunctionDeclaration(term.declaration) || T.isClassDeclaration(term.declaration)) {
      return term.extend({
        declaration: this.registerFunctionOrClass(term.declaration)
      });
    } else if (T.isVariableDeclaration(term.declaration)) {
      return term.extend({
        declaration: this.registerVariableDeclaration(term.declaration)
      });
    }
    return term;
  }

  registerFunctionOrClass(term) {
    let red = new RegisterBindingsReducer(this.context.useScope, this.context.phase, false, this.context.bindings, this.context.env);
    return term.extend({
      name: term.name.reduce(red)
    });
  }

  registerVariableDeclaration(term) {
    if (term.kind === 'syntax' || term.kind === 'syntaxrec' || term.kind === 'operator') {
      return this.registerSyntaxDeclaration(term);
    }
    let red = new RegisterBindingsReducer(this.context.useScope, this.context.phase, term.kind === 'var', this.context.bindings, this.context.env);
    return term.extend({
      declarators: term.declarators.map(decl => {
        return decl.extend({
          binding: decl.binding.reduce(red)
        });
      })
    });
  }

  registerSyntaxDeclaration(term) {
    if (term.kind === 'syntax' || term.kind === 'operator') {
      // syntax id^{a, b} = <init>^{a, b}
      // ->
      // syntaxrec id^{a,b,c} = function() { return <<id^{a}>> }
      // syntaxrec id^{a,b} = <init>^{a,b,c}
      let scope = (0, _scope.freshScope)('nonrec');
      let scopeReducer = new _scopeReducer2.default([{ scope: scope, phase: _syntax.ALL_PHASES, flip: false }], this.context.bindings);
      term = term.extend({
        declarators: term.declarators.map(decl => {
          let name = decl.binding.name;
          let nameAdded = name.addScope(scope, this.context.bindings, _syntax.ALL_PHASES);
          let nameRemoved = name.removeScope(this.context.currentScope[this.context.currentScope.length - 1], this.context.phase);
          let newBinding = (0, _symbol.gensym)(name.val());
          this.context.bindings.addForward(nameAdded, nameRemoved, newBinding, this.context.phase);
          return decl.extend({
            init: decl.init.reduce(scopeReducer)
          });
        })
      });
    }
    // for syntax declarations we need to load the compiletime value
    // into the environment
    let compiletimeType = term.kind === 'operator' ? 'operator' : 'syntax';
    return term.extend({
      declarators: term.declarators.map(decl => {
        // each compiletime value needs to be expanded with a fresh
        // environment and in the next higher phase
        let syntaxExpander = new _termExpander2.default(_.merge(this.context, {
          phase: this.context.phase + 1,
          env: new _env2.default(),
          store: this.context.store
        }));

        let init = syntaxExpander.expand(decl.init);
        let val = (0, _loadSyntax.evalCompiletimeValue)(init, _.merge(this.context, {
          phase: this.context.phase + 1
        }));
        let red = new RegisterSyntaxBindingsReducer(this.context.useScope, this.context.phase, this.context.bindings, this.context.env, {
          type: compiletimeType,
          prec: decl.prec == null ? void 0 : decl.prec.val(),
          assoc: decl.assoc == null ? void 0 : decl.assoc.val(),
          f: val
        });
        return decl.extend({ binding: decl.binding.reduce(red), init });
      })
    });
  }

  // registerSyntaxDeclarator(term) {
  //
  // }
}
exports.default = TokenExpander;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,