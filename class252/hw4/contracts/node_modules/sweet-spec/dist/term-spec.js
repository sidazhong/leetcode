"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
class Term {
  constructor(attrs_64, type_65) {
    Object.assign(this, attrs_64);
    this.type = type_65 || "Term";
    this.loc = null;
    Object.freeze(this);
  }
  _reduceState(reducer_66, state_67 = {}) {
    return state_67;
  }
  _cloneAttrs() {
    return {};
  }
  reduce(reducer_68) {
    let state_69 = this._reduceState(reducer_68);
    return reducer_68.reduceTerm(this, state_69);
  }
  extend(attrs_70) {
    return new Term(Object.assign(this._cloneAttrs(), attrs_70));
  }
  from(type_71, value_72) {
    if (this.value && typeof this.value.from === "function") {
      return this.value.from(type_71, value_72);
    }
    throw new Error("Not implemented yet");
  }
  fromNull() {
    return this.from("null", null);
  }
  fromNumber(value_73) {
    return this.from("number", value_73);
  }
  fromString(value_74) {
    return this.from("string", value_74);
  }
  fromPunctuator(value_75) {
    return this.from("punctuator", value_75);
  }
  fromKeyword(value_76) {
    return this.from("keyword", value_76);
  }
  fromIdentifier(value_77) {
    return this.from("identifier", value_77);
  }
  fromRegularExpression(value_78) {
    return this.from("regularExpression", value_78);
  }
  fromBraces(inner_79) {
    return this.from("braces", inner_79);
  }
  fromBrackets(inner_80) {
    return this.from("brackets", inner_80);
  }
  fromParens(inner_81) {
    return this.from("parens", inner_81);
  }
}
Term.CloneReducer = class {
  reduceTerm(term_82, state_83) {
    return new Term(state_83);
  }
};
exports.default = Term;

class SyntaxTerm extends Term {
  constructor(attrs_84, type_85) {
    super(attrs_84, type_85 || "SyntaxTerm");
  }
  _reduceState(reducer_86, state_87 = {}) {
    ;
    return super._reduceState(reducer_86, state_87);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_88) {
    let state_89 = this._reduceState(reducer_88);
    return reducer_88.reduceSyntaxTerm(this, state_89);
  }
  extend(attrs_90) {
    return new SyntaxTerm(Object.assign(this._cloneAttrs(), attrs_90));
  }
}
Term.CloneReducer.prototype.reduceSyntaxTerm = function (term_91, state_92) {
  return new SyntaxTerm(state_92);
};
exports.SyntaxTerm = SyntaxTerm;

class RawDelimiter extends SyntaxTerm {
  constructor(attrs_93, type_94) {
    super(attrs_93, type_94 || "RawDelimiter");
    if (!{}.hasOwnProperty.call(attrs_93, "kind")) {
      throw new Error("Missing attribute: " + "kind");
    }
    if (!{}.hasOwnProperty.call(attrs_93, "inner")) {
      throw new Error("Missing attribute: " + "inner");
    }
  }
  _reduceState(reducer_95, state_96 = {}) {
    state_96.kind = this.kind;
    state_96.inner = this.inner.map(a_97 => a_97 instanceof Term ? a_97.reduce(reducer_95) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_97));
    }.call(this));
    ;
    return super._reduceState(reducer_95, state_96);
  }
  _cloneAttrs() {
    return Object.assign({ kind: this.kind, inner: this.inner }, super._cloneAttrs());
  }
  reduce(reducer_98) {
    let state_99 = this._reduceState(reducer_98);
    return reducer_98.reduceRawDelimiter(this, state_99);
  }
  extend(attrs_100) {
    return new RawDelimiter(Object.assign(this._cloneAttrs(), attrs_100));
  }
}
SyntaxTerm.CloneReducer.prototype.reduceRawDelimiter = function (term_101, state_102) {
  return new RawDelimiter(state_102);
};
exports.RawDelimiter = RawDelimiter;

class RawSyntax extends SyntaxTerm {
  constructor(attrs_103, type_104) {
    super(attrs_103, type_104 || "RawSyntax");
    if (!{}.hasOwnProperty.call(attrs_103, "value")) {
      throw new Error("Missing attribute: " + "value");
    }
  }
  _reduceState(reducer_105, state_106 = {}) {
    state_106.value = this.value;
    ;
    return super._reduceState(reducer_105, state_106);
  }
  _cloneAttrs() {
    return Object.assign({ value: this.value }, super._cloneAttrs());
  }
  reduce(reducer_107) {
    let state_108 = this._reduceState(reducer_107);
    return reducer_107.reduceRawSyntax(this, state_108);
  }
  extend(attrs_109) {
    return new RawSyntax(Object.assign(this._cloneAttrs(), attrs_109));
  }
}
SyntaxTerm.CloneReducer.prototype.reduceRawSyntax = function (term_110, state_111) {
  return new RawSyntax(state_111);
};
exports.RawSyntax = RawSyntax;

class Statement extends Term {
  constructor(attrs_112, type_113) {
    super(attrs_112, type_113 || "Statement");
  }
  _reduceState(reducer_114, state_115 = {}) {
    ;
    return super._reduceState(reducer_114, state_115);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_116) {
    let state_117 = this._reduceState(reducer_116);
    return reducer_116.reduceStatement(this, state_117);
  }
  extend(attrs_118) {
    return new Statement(Object.assign(this._cloneAttrs(), attrs_118));
  }
}
Term.CloneReducer.prototype.reduceStatement = function (term_119, state_120) {
  return new Statement(state_120);
};
exports.Statement = Statement;

class IterationStatement extends Statement {
  constructor(attrs_121, type_122) {
    super(attrs_121, type_122 || "IterationStatement");
    if (!{}.hasOwnProperty.call(attrs_121, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
  }
  _reduceState(reducer_123, state_124 = {}) {
    state_124.body = this.body instanceof Statement ? this.body.reduce(reducer_123) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.body));
    }.call(this);
    ;
    return super._reduceState(reducer_123, state_124);
  }
  _cloneAttrs() {
    return Object.assign({ body: this.body }, super._cloneAttrs());
  }
  reduce(reducer_125) {
    let state_126 = this._reduceState(reducer_125);
    return reducer_125.reduceIterationStatement(this, state_126);
  }
  extend(attrs_127) {
    return new IterationStatement(Object.assign(this._cloneAttrs(), attrs_127));
  }
}
Statement.CloneReducer.prototype.reduceIterationStatement = function (term_128, state_129) {
  return new IterationStatement(state_129);
};
exports.IterationStatement = IterationStatement;

class Expression extends Term {
  constructor(attrs_130, type_131) {
    super(attrs_130, type_131 || "Expression");
  }
  _reduceState(reducer_132, state_133 = {}) {
    ;
    return super._reduceState(reducer_132, state_133);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_134) {
    let state_135 = this._reduceState(reducer_134);
    return reducer_134.reduceExpression(this, state_135);
  }
  extend(attrs_136) {
    return new Expression(Object.assign(this._cloneAttrs(), attrs_136));
  }
}
Term.CloneReducer.prototype.reduceExpression = function (term_137, state_138) {
  return new Expression(state_138);
};
exports.Expression = Expression;

class MemberExpression extends Expression {
  constructor(attrs_139, type_140) {
    super(attrs_139, type_140 || "MemberExpression");
    if (!{}.hasOwnProperty.call(attrs_139, "object")) {
      throw new Error("Missing attribute: " + "object");
    }
  }
  _reduceState(reducer_141, state_142 = {}) {
    state_142.object = this.object instanceof Expression ? this.object.reduce(reducer_141) : this.object instanceof Super ? this.object.reduce(reducer_141) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.object));
    }.call(this);
    ;
    return super._reduceState(reducer_141, state_142);
  }
  _cloneAttrs() {
    return Object.assign({ object: this.object }, super._cloneAttrs());
  }
  reduce(reducer_143) {
    let state_144 = this._reduceState(reducer_143);
    return reducer_143.reduceMemberExpression(this, state_144);
  }
  extend(attrs_145) {
    return new MemberExpression(Object.assign(this._cloneAttrs(), attrs_145));
  }
}
Expression.CloneReducer.prototype.reduceMemberExpression = function (term_146, state_147) {
  return new MemberExpression(state_147);
};
exports.MemberExpression = MemberExpression;

class PropertyName extends Term {
  constructor(attrs_148, type_149) {
    super(attrs_148, type_149 || "PropertyName");
  }
  _reduceState(reducer_150, state_151 = {}) {
    ;
    return super._reduceState(reducer_150, state_151);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_152) {
    let state_153 = this._reduceState(reducer_152);
    return reducer_152.reducePropertyName(this, state_153);
  }
  extend(attrs_154) {
    return new PropertyName(Object.assign(this._cloneAttrs(), attrs_154));
  }
}
Term.CloneReducer.prototype.reducePropertyName = function (term_155, state_156) {
  return new PropertyName(state_156);
};
exports.PropertyName = PropertyName;

class ObjectProperty extends Term {
  constructor(attrs_157, type_158) {
    super(attrs_157, type_158 || "ObjectProperty");
  }
  _reduceState(reducer_159, state_160 = {}) {
    ;
    return super._reduceState(reducer_159, state_160);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_161) {
    let state_162 = this._reduceState(reducer_161);
    return reducer_161.reduceObjectProperty(this, state_162);
  }
  extend(attrs_163) {
    return new ObjectProperty(Object.assign(this._cloneAttrs(), attrs_163));
  }
}
Term.CloneReducer.prototype.reduceObjectProperty = function (term_164, state_165) {
  return new ObjectProperty(state_165);
};
exports.ObjectProperty = ObjectProperty;

class NamedObjectProperty extends ObjectProperty {
  constructor(attrs_166, type_167) {
    super(attrs_166, type_167 || "NamedObjectProperty");
    if (!{}.hasOwnProperty.call(attrs_166, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
  }
  _reduceState(reducer_168, state_169 = {}) {
    state_169.name = this.name instanceof PropertyName ? this.name.reduce(reducer_168) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.name));
    }.call(this);
    ;
    return super._reduceState(reducer_168, state_169);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name }, super._cloneAttrs());
  }
  reduce(reducer_170) {
    let state_171 = this._reduceState(reducer_170);
    return reducer_170.reduceNamedObjectProperty(this, state_171);
  }
  extend(attrs_172) {
    return new NamedObjectProperty(Object.assign(this._cloneAttrs(), attrs_172));
  }
}
ObjectProperty.CloneReducer.prototype.reduceNamedObjectProperty = function (term_173, state_174) {
  return new NamedObjectProperty(state_174);
};
exports.NamedObjectProperty = NamedObjectProperty;

class MethodDefinition extends NamedObjectProperty {
  constructor(attrs_175, type_176) {
    super(attrs_175, type_176 || "MethodDefinition");
    if (!{}.hasOwnProperty.call(attrs_175, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
  }
  _reduceState(reducer_177, state_178 = {}) {
    state_178.body = this.body instanceof FunctionBody ? this.body.reduce(reducer_177) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.body));
    }.call(this);
    ;
    return super._reduceState(reducer_177, state_178);
  }
  _cloneAttrs() {
    return Object.assign({ body: this.body }, super._cloneAttrs());
  }
  reduce(reducer_179) {
    let state_180 = this._reduceState(reducer_179);
    return reducer_179.reduceMethodDefinition(this, state_180);
  }
  extend(attrs_181) {
    return new MethodDefinition(Object.assign(this._cloneAttrs(), attrs_181));
  }
}
NamedObjectProperty.CloneReducer.prototype.reduceMethodDefinition = function (term_182, state_183) {
  return new MethodDefinition(state_183);
};
exports.MethodDefinition = MethodDefinition;

class BindingWithDefault extends Term {
  constructor(attrs_184, type_185) {
    super(attrs_184, type_185 || "BindingWithDefault");
    if (!{}.hasOwnProperty.call(attrs_184, "binding")) {
      throw new Error("Missing attribute: " + "binding");
    }
    if (!{}.hasOwnProperty.call(attrs_184, "init")) {
      throw new Error("Missing attribute: " + "init");
    }
  }
  _reduceState(reducer_186, state_187 = {}) {
    state_187.binding = this.binding instanceof ObjectBinding ? this.binding.reduce(reducer_186) : this.binding instanceof ArrayBinding ? this.binding.reduce(reducer_186) : this.binding instanceof BindingIdentifier ? this.binding.reduce(reducer_186) : this.binding instanceof MemberExpression ? this.binding.reduce(reducer_186) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.binding));
    }.call(this);
    state_187.init = this.init instanceof Expression ? this.init.reduce(reducer_186) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.init));
    }.call(this);
    ;
    return super._reduceState(reducer_186, state_187);
  }
  _cloneAttrs() {
    return Object.assign({ binding: this.binding, init: this.init }, super._cloneAttrs());
  }
  reduce(reducer_188) {
    let state_189 = this._reduceState(reducer_188);
    return reducer_188.reduceBindingWithDefault(this, state_189);
  }
  extend(attrs_190) {
    return new BindingWithDefault(Object.assign(this._cloneAttrs(), attrs_190));
  }
}
Term.CloneReducer.prototype.reduceBindingWithDefault = function (term_191, state_192) {
  return new BindingWithDefault(state_192);
};
exports.BindingWithDefault = BindingWithDefault;

class BindingIdentifier extends Term {
  constructor(attrs_193, type_194) {
    super(attrs_193, type_194 || "BindingIdentifier");
    if (!{}.hasOwnProperty.call(attrs_193, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
  }
  _reduceState(reducer_195, state_196 = {}) {
    state_196.name = this.name;
    ;
    return super._reduceState(reducer_195, state_196);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name }, super._cloneAttrs());
  }
  reduce(reducer_197) {
    let state_198 = this._reduceState(reducer_197);
    return reducer_197.reduceBindingIdentifier(this, state_198);
  }
  extend(attrs_199) {
    return new BindingIdentifier(Object.assign(this._cloneAttrs(), attrs_199));
  }
}
Term.CloneReducer.prototype.reduceBindingIdentifier = function (term_200, state_201) {
  return new BindingIdentifier(state_201);
};
exports.BindingIdentifier = BindingIdentifier;

class ArrayBinding extends Term {
  constructor(attrs_202, type_203) {
    super(attrs_202, type_203 || "ArrayBinding");
    if (!{}.hasOwnProperty.call(attrs_202, "elements")) {
      throw new Error("Missing attribute: " + "elements");
    }
    if (!{}.hasOwnProperty.call(attrs_202, "restElement")) {
      throw new Error("Missing attribute: " + "restElement");
    }
  }
  _reduceState(reducer_204, state_205 = {}) {
    state_205.elements = this.elements.map(a_206 => a_206 instanceof ObjectBinding ? a_206.reduce(reducer_204) : a_206 instanceof ArrayBinding ? a_206.reduce(reducer_204) : a_206 instanceof BindingIdentifier ? a_206.reduce(reducer_204) : a_206 instanceof MemberExpression ? a_206.reduce(reducer_204) : a_206 instanceof BindingWithDefault ? a_206.reduce(reducer_204) : a_206 == null ? null : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_206));
    }.call(this));
    state_205.restElement = this.restElement == null ? null : this.restElement instanceof ObjectBinding ? this.restElement.reduce(reducer_204) : this.restElement instanceof ArrayBinding ? this.restElement.reduce(reducer_204) : this.restElement instanceof BindingIdentifier ? this.restElement.reduce(reducer_204) : this.restElement instanceof MemberExpression ? this.restElement.reduce(reducer_204) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.restElement));
    }.call(this);
    ;
    return super._reduceState(reducer_204, state_205);
  }
  _cloneAttrs() {
    return Object.assign({ elements: this.elements, restElement: this.restElement }, super._cloneAttrs());
  }
  reduce(reducer_207) {
    let state_208 = this._reduceState(reducer_207);
    return reducer_207.reduceArrayBinding(this, state_208);
  }
  extend(attrs_209) {
    return new ArrayBinding(Object.assign(this._cloneAttrs(), attrs_209));
  }
}
Term.CloneReducer.prototype.reduceArrayBinding = function (term_210, state_211) {
  return new ArrayBinding(state_211);
};
exports.ArrayBinding = ArrayBinding;

class ObjectBinding extends Term {
  constructor(attrs_212, type_213) {
    super(attrs_212, type_213 || "ObjectBinding");
    if (!{}.hasOwnProperty.call(attrs_212, "properties")) {
      throw new Error("Missing attribute: " + "properties");
    }
  }
  _reduceState(reducer_214, state_215 = {}) {
    state_215.properties = this.properties.map(a_216 => a_216 instanceof BindingProperty ? a_216.reduce(reducer_214) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_216));
    }.call(this));
    ;
    return super._reduceState(reducer_214, state_215);
  }
  _cloneAttrs() {
    return Object.assign({ properties: this.properties }, super._cloneAttrs());
  }
  reduce(reducer_217) {
    let state_218 = this._reduceState(reducer_217);
    return reducer_217.reduceObjectBinding(this, state_218);
  }
  extend(attrs_219) {
    return new ObjectBinding(Object.assign(this._cloneAttrs(), attrs_219));
  }
}
Term.CloneReducer.prototype.reduceObjectBinding = function (term_220, state_221) {
  return new ObjectBinding(state_221);
};
exports.ObjectBinding = ObjectBinding;

class BindingProperty extends Term {
  constructor(attrs_222, type_223) {
    super(attrs_222, type_223 || "BindingProperty");
  }
  _reduceState(reducer_224, state_225 = {}) {
    ;
    return super._reduceState(reducer_224, state_225);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_226) {
    let state_227 = this._reduceState(reducer_226);
    return reducer_226.reduceBindingProperty(this, state_227);
  }
  extend(attrs_228) {
    return new BindingProperty(Object.assign(this._cloneAttrs(), attrs_228));
  }
}
Term.CloneReducer.prototype.reduceBindingProperty = function (term_229, state_230) {
  return new BindingProperty(state_230);
};
exports.BindingProperty = BindingProperty;

class BindingPropertyIdentifier extends BindingProperty {
  constructor(attrs_231, type_232) {
    super(attrs_231, type_232 || "BindingPropertyIdentifier");
    if (!{}.hasOwnProperty.call(attrs_231, "binding")) {
      throw new Error("Missing attribute: " + "binding");
    }
    if (!{}.hasOwnProperty.call(attrs_231, "init")) {
      throw new Error("Missing attribute: " + "init");
    }
  }
  _reduceState(reducer_233, state_234 = {}) {
    state_234.binding = this.binding instanceof BindingIdentifier ? this.binding.reduce(reducer_233) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.binding));
    }.call(this);
    state_234.init = this.init == null ? null : this.init instanceof Expression ? this.init.reduce(reducer_233) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.init));
    }.call(this);
    ;
    return super._reduceState(reducer_233, state_234);
  }
  _cloneAttrs() {
    return Object.assign({ binding: this.binding, init: this.init }, super._cloneAttrs());
  }
  reduce(reducer_235) {
    let state_236 = this._reduceState(reducer_235);
    return reducer_235.reduceBindingPropertyIdentifier(this, state_236);
  }
  extend(attrs_237) {
    return new BindingPropertyIdentifier(Object.assign(this._cloneAttrs(), attrs_237));
  }
}
BindingProperty.CloneReducer.prototype.reduceBindingPropertyIdentifier = function (term_238, state_239) {
  return new BindingPropertyIdentifier(state_239);
};
exports.BindingPropertyIdentifier = BindingPropertyIdentifier;

class BindingPropertyProperty extends BindingProperty {
  constructor(attrs_240, type_241) {
    super(attrs_240, type_241 || "BindingPropertyProperty");
    if (!{}.hasOwnProperty.call(attrs_240, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
    if (!{}.hasOwnProperty.call(attrs_240, "binding")) {
      throw new Error("Missing attribute: " + "binding");
    }
  }
  _reduceState(reducer_242, state_243 = {}) {
    state_243.name = this.name instanceof PropertyName ? this.name.reduce(reducer_242) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.name));
    }.call(this);
    state_243.binding = this.binding instanceof ObjectBinding ? this.binding.reduce(reducer_242) : this.binding instanceof ArrayBinding ? this.binding.reduce(reducer_242) : this.binding instanceof BindingIdentifier ? this.binding.reduce(reducer_242) : this.binding instanceof MemberExpression ? this.binding.reduce(reducer_242) : this.binding instanceof BindingWithDefault ? this.binding.reduce(reducer_242) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.binding));
    }.call(this);
    ;
    return super._reduceState(reducer_242, state_243);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name, binding: this.binding }, super._cloneAttrs());
  }
  reduce(reducer_244) {
    let state_245 = this._reduceState(reducer_244);
    return reducer_244.reduceBindingPropertyProperty(this, state_245);
  }
  extend(attrs_246) {
    return new BindingPropertyProperty(Object.assign(this._cloneAttrs(), attrs_246));
  }
}
BindingProperty.CloneReducer.prototype.reduceBindingPropertyProperty = function (term_247, state_248) {
  return new BindingPropertyProperty(state_248);
};
exports.BindingPropertyProperty = BindingPropertyProperty;

class ClassExpression extends Expression {
  constructor(attrs_249, type_250) {
    super(attrs_249, type_250 || "ClassExpression");
    if (!{}.hasOwnProperty.call(attrs_249, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
    if (!{}.hasOwnProperty.call(attrs_249, "super")) {
      throw new Error("Missing attribute: " + "super");
    }
    if (!{}.hasOwnProperty.call(attrs_249, "elements")) {
      throw new Error("Missing attribute: " + "elements");
    }
  }
  _reduceState(reducer_251, state_252 = {}) {
    state_252.name = this.name == null ? null : this.name instanceof BindingIdentifier ? this.name.reduce(reducer_251) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.name));
    }.call(this);
    state_252.super = this.super == null ? null : this.super instanceof Expression ? this.super.reduce(reducer_251) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.super));
    }.call(this);
    state_252.elements = this.elements.map(a_253 => a_253 instanceof ClassElement ? a_253.reduce(reducer_251) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_253));
    }.call(this));
    ;
    return super._reduceState(reducer_251, state_252);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name, super: this.super, elements: this.elements }, super._cloneAttrs());
  }
  reduce(reducer_254) {
    let state_255 = this._reduceState(reducer_254);
    return reducer_254.reduceClassExpression(this, state_255);
  }
  extend(attrs_256) {
    return new ClassExpression(Object.assign(this._cloneAttrs(), attrs_256));
  }
}
Expression.CloneReducer.prototype.reduceClassExpression = function (term_257, state_258) {
  return new ClassExpression(state_258);
};
exports.ClassExpression = ClassExpression;

class ClassDeclaration extends Statement {
  constructor(attrs_259, type_260) {
    super(attrs_259, type_260 || "ClassDeclaration");
    if (!{}.hasOwnProperty.call(attrs_259, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
    if (!{}.hasOwnProperty.call(attrs_259, "super")) {
      throw new Error("Missing attribute: " + "super");
    }
    if (!{}.hasOwnProperty.call(attrs_259, "elements")) {
      throw new Error("Missing attribute: " + "elements");
    }
  }
  _reduceState(reducer_261, state_262 = {}) {
    state_262.name = this.name instanceof BindingIdentifier ? this.name.reduce(reducer_261) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.name));
    }.call(this);
    state_262.super = this.super == null ? null : this.super instanceof Expression ? this.super.reduce(reducer_261) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.super));
    }.call(this);
    state_262.elements = this.elements.map(a_263 => a_263 instanceof ClassElement ? a_263.reduce(reducer_261) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_263));
    }.call(this));
    ;
    return super._reduceState(reducer_261, state_262);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name, super: this.super, elements: this.elements }, super._cloneAttrs());
  }
  reduce(reducer_264) {
    let state_265 = this._reduceState(reducer_264);
    return reducer_264.reduceClassDeclaration(this, state_265);
  }
  extend(attrs_266) {
    return new ClassDeclaration(Object.assign(this._cloneAttrs(), attrs_266));
  }
}
Statement.CloneReducer.prototype.reduceClassDeclaration = function (term_267, state_268) {
  return new ClassDeclaration(state_268);
};
exports.ClassDeclaration = ClassDeclaration;

class ClassElement extends Term {
  constructor(attrs_269, type_270) {
    super(attrs_269, type_270 || "ClassElement");
    if (!{}.hasOwnProperty.call(attrs_269, "isStatic")) {
      throw new Error("Missing attribute: " + "isStatic");
    }
    if (!{}.hasOwnProperty.call(attrs_269, "method")) {
      throw new Error("Missing attribute: " + "method");
    }
  }
  _reduceState(reducer_271, state_272 = {}) {
    state_272.isStatic = this.isStatic;
    state_272.method = this.method instanceof MethodDefinition ? this.method.reduce(reducer_271) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.method));
    }.call(this);
    ;
    return super._reduceState(reducer_271, state_272);
  }
  _cloneAttrs() {
    return Object.assign({ isStatic: this.isStatic, method: this.method }, super._cloneAttrs());
  }
  reduce(reducer_273) {
    let state_274 = this._reduceState(reducer_273);
    return reducer_273.reduceClassElement(this, state_274);
  }
  extend(attrs_275) {
    return new ClassElement(Object.assign(this._cloneAttrs(), attrs_275));
  }
}
Term.CloneReducer.prototype.reduceClassElement = function (term_276, state_277) {
  return new ClassElement(state_277);
};
exports.ClassElement = ClassElement;

class Module extends Term {
  constructor(attrs_278, type_279) {
    super(attrs_278, type_279 || "Module");
    if (!{}.hasOwnProperty.call(attrs_278, "directives")) {
      throw new Error("Missing attribute: " + "directives");
    }
    if (!{}.hasOwnProperty.call(attrs_278, "items")) {
      throw new Error("Missing attribute: " + "items");
    }
  }
  _reduceState(reducer_280, state_281 = {}) {
    state_281.directives = this.directives.map(a_282 => a_282);
    state_281.items = this.items.map(a_283 => a_283 instanceof Term ? a_283.reduce(reducer_280) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_283));
    }.call(this));
    ;
    return super._reduceState(reducer_280, state_281);
  }
  _cloneAttrs() {
    return Object.assign({ directives: this.directives, items: this.items }, super._cloneAttrs());
  }
  reduce(reducer_284) {
    let state_285 = this._reduceState(reducer_284);
    return reducer_284.reduceModule(this, state_285);
  }
  extend(attrs_286) {
    return new Module(Object.assign(this._cloneAttrs(), attrs_286));
  }
}
Term.CloneReducer.prototype.reduceModule = function (term_287, state_288) {
  return new Module(state_288);
};
exports.Module = Module;

class ImportDeclaration extends Term {
  constructor(attrs_289, type_290) {
    super(attrs_289, type_290 || "ImportDeclaration");
    if (!{}.hasOwnProperty.call(attrs_289, "moduleSpecifier")) {
      throw new Error("Missing attribute: " + "moduleSpecifier");
    }
    if (!{}.hasOwnProperty.call(attrs_289, "forSyntax")) {
      throw new Error("Missing attribute: " + "forSyntax");
    }
  }
  _reduceState(reducer_291, state_292 = {}) {
    state_292.moduleSpecifier = this.moduleSpecifier;
    state_292.forSyntax = this.forSyntax;
    ;
    return super._reduceState(reducer_291, state_292);
  }
  _cloneAttrs() {
    return Object.assign({ moduleSpecifier: this.moduleSpecifier, forSyntax: this.forSyntax }, super._cloneAttrs());
  }
  reduce(reducer_293) {
    let state_294 = this._reduceState(reducer_293);
    return reducer_293.reduceImportDeclaration(this, state_294);
  }
  extend(attrs_295) {
    return new ImportDeclaration(Object.assign(this._cloneAttrs(), attrs_295));
  }
}
Term.CloneReducer.prototype.reduceImportDeclaration = function (term_296, state_297) {
  return new ImportDeclaration(state_297);
};
exports.ImportDeclaration = ImportDeclaration;

class ExportDeclaration extends Term {
  constructor(attrs_298, type_299) {
    super(attrs_298, type_299 || "ExportDeclaration");
  }
  _reduceState(reducer_300, state_301 = {}) {
    ;
    return super._reduceState(reducer_300, state_301);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_302) {
    let state_303 = this._reduceState(reducer_302);
    return reducer_302.reduceExportDeclaration(this, state_303);
  }
  extend(attrs_304) {
    return new ExportDeclaration(Object.assign(this._cloneAttrs(), attrs_304));
  }
}
Term.CloneReducer.prototype.reduceExportDeclaration = function (term_305, state_306) {
  return new ExportDeclaration(state_306);
};
exports.ExportDeclaration = ExportDeclaration;

class Import extends ImportDeclaration {
  constructor(attrs_307, type_308) {
    super(attrs_307, type_308 || "Import");
    if (!{}.hasOwnProperty.call(attrs_307, "defaultBinding")) {
      throw new Error("Missing attribute: " + "defaultBinding");
    }
    if (!{}.hasOwnProperty.call(attrs_307, "namedImports")) {
      throw new Error("Missing attribute: " + "namedImports");
    }
  }
  _reduceState(reducer_309, state_310 = {}) {
    state_310.defaultBinding = this.defaultBinding == null ? null : this.defaultBinding instanceof BindingIdentifier ? this.defaultBinding.reduce(reducer_309) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.defaultBinding));
    }.call(this);
    state_310.namedImports = this.namedImports.map(a_311 => a_311 instanceof ImportSpecifier ? a_311.reduce(reducer_309) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_311));
    }.call(this));
    ;
    return super._reduceState(reducer_309, state_310);
  }
  _cloneAttrs() {
    return Object.assign({ defaultBinding: this.defaultBinding, namedImports: this.namedImports }, super._cloneAttrs());
  }
  reduce(reducer_312) {
    let state_313 = this._reduceState(reducer_312);
    return reducer_312.reduceImport(this, state_313);
  }
  extend(attrs_314) {
    return new Import(Object.assign(this._cloneAttrs(), attrs_314));
  }
}
ImportDeclaration.CloneReducer.prototype.reduceImport = function (term_315, state_316) {
  return new Import(state_316);
};
exports.Import = Import;

class ImportNamespace extends ImportDeclaration {
  constructor(attrs_317, type_318) {
    super(attrs_317, type_318 || "ImportNamespace");
    if (!{}.hasOwnProperty.call(attrs_317, "defaultBinding")) {
      throw new Error("Missing attribute: " + "defaultBinding");
    }
    if (!{}.hasOwnProperty.call(attrs_317, "namespaceBinding")) {
      throw new Error("Missing attribute: " + "namespaceBinding");
    }
  }
  _reduceState(reducer_319, state_320 = {}) {
    state_320.defaultBinding = this.defaultBinding == null ? null : this.defaultBinding instanceof BindingIdentifier ? this.defaultBinding.reduce(reducer_319) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.defaultBinding));
    }.call(this);
    state_320.namespaceBinding = this.namespaceBinding instanceof BindingIdentifier ? this.namespaceBinding.reduce(reducer_319) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.namespaceBinding));
    }.call(this);
    ;
    return super._reduceState(reducer_319, state_320);
  }
  _cloneAttrs() {
    return Object.assign({ defaultBinding: this.defaultBinding, namespaceBinding: this.namespaceBinding }, super._cloneAttrs());
  }
  reduce(reducer_321) {
    let state_322 = this._reduceState(reducer_321);
    return reducer_321.reduceImportNamespace(this, state_322);
  }
  extend(attrs_323) {
    return new ImportNamespace(Object.assign(this._cloneAttrs(), attrs_323));
  }
}
ImportDeclaration.CloneReducer.prototype.reduceImportNamespace = function (term_324, state_325) {
  return new ImportNamespace(state_325);
};
exports.ImportNamespace = ImportNamespace;

class ImportSpecifier extends Term {
  constructor(attrs_326, type_327) {
    super(attrs_326, type_327 || "ImportSpecifier");
    if (!{}.hasOwnProperty.call(attrs_326, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
    if (!{}.hasOwnProperty.call(attrs_326, "binding")) {
      throw new Error("Missing attribute: " + "binding");
    }
  }
  _reduceState(reducer_328, state_329 = {}) {
    state_329.name = this.name == null ? null : this.name;
    state_329.binding = this.binding instanceof BindingIdentifier ? this.binding.reduce(reducer_328) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.binding));
    }.call(this);
    ;
    return super._reduceState(reducer_328, state_329);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name, binding: this.binding }, super._cloneAttrs());
  }
  reduce(reducer_330) {
    let state_331 = this._reduceState(reducer_330);
    return reducer_330.reduceImportSpecifier(this, state_331);
  }
  extend(attrs_332) {
    return new ImportSpecifier(Object.assign(this._cloneAttrs(), attrs_332));
  }
}
Term.CloneReducer.prototype.reduceImportSpecifier = function (term_333, state_334) {
  return new ImportSpecifier(state_334);
};
exports.ImportSpecifier = ImportSpecifier;

class ExportAllFrom extends ExportDeclaration {
  constructor(attrs_335, type_336) {
    super(attrs_335, type_336 || "ExportAllFrom");
    if (!{}.hasOwnProperty.call(attrs_335, "moduleSpecifier")) {
      throw new Error("Missing attribute: " + "moduleSpecifier");
    }
  }
  _reduceState(reducer_337, state_338 = {}) {
    state_338.moduleSpecifier = this.moduleSpecifier;
    ;
    return super._reduceState(reducer_337, state_338);
  }
  _cloneAttrs() {
    return Object.assign({ moduleSpecifier: this.moduleSpecifier }, super._cloneAttrs());
  }
  reduce(reducer_339) {
    let state_340 = this._reduceState(reducer_339);
    return reducer_339.reduceExportAllFrom(this, state_340);
  }
  extend(attrs_341) {
    return new ExportAllFrom(Object.assign(this._cloneAttrs(), attrs_341));
  }
}
ExportDeclaration.CloneReducer.prototype.reduceExportAllFrom = function (term_342, state_343) {
  return new ExportAllFrom(state_343);
};
exports.ExportAllFrom = ExportAllFrom;

class ExportFrom extends ExportDeclaration {
  constructor(attrs_344, type_345) {
    super(attrs_344, type_345 || "ExportFrom");
    if (!{}.hasOwnProperty.call(attrs_344, "namedExports")) {
      throw new Error("Missing attribute: " + "namedExports");
    }
    if (!{}.hasOwnProperty.call(attrs_344, "moduleSpecifier")) {
      throw new Error("Missing attribute: " + "moduleSpecifier");
    }
  }
  _reduceState(reducer_346, state_347 = {}) {
    state_347.namedExports = this.namedExports.map(a_348 => a_348 instanceof ExportSpecifier ? a_348.reduce(reducer_346) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_348));
    }.call(this));
    state_347.moduleSpecifier = this.moduleSpecifier == null ? null : this.moduleSpecifier;
    ;
    return super._reduceState(reducer_346, state_347);
  }
  _cloneAttrs() {
    return Object.assign({ namedExports: this.namedExports, moduleSpecifier: this.moduleSpecifier }, super._cloneAttrs());
  }
  reduce(reducer_349) {
    let state_350 = this._reduceState(reducer_349);
    return reducer_349.reduceExportFrom(this, state_350);
  }
  extend(attrs_351) {
    return new ExportFrom(Object.assign(this._cloneAttrs(), attrs_351));
  }
}
ExportDeclaration.CloneReducer.prototype.reduceExportFrom = function (term_352, state_353) {
  return new ExportFrom(state_353);
};
exports.ExportFrom = ExportFrom;

class Export extends ExportDeclaration {
  constructor(attrs_354, type_355) {
    super(attrs_354, type_355 || "Export");
    if (!{}.hasOwnProperty.call(attrs_354, "declaration")) {
      throw new Error("Missing attribute: " + "declaration");
    }
  }
  _reduceState(reducer_356, state_357 = {}) {
    state_357.declaration = this.declaration instanceof FunctionDeclaration ? this.declaration.reduce(reducer_356) : this.declaration instanceof ClassDeclaration ? this.declaration.reduce(reducer_356) : this.declaration instanceof VariableDeclaration ? this.declaration.reduce(reducer_356) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.declaration));
    }.call(this);
    ;
    return super._reduceState(reducer_356, state_357);
  }
  _cloneAttrs() {
    return Object.assign({ declaration: this.declaration }, super._cloneAttrs());
  }
  reduce(reducer_358) {
    let state_359 = this._reduceState(reducer_358);
    return reducer_358.reduceExport(this, state_359);
  }
  extend(attrs_360) {
    return new Export(Object.assign(this._cloneAttrs(), attrs_360));
  }
}
ExportDeclaration.CloneReducer.prototype.reduceExport = function (term_361, state_362) {
  return new Export(state_362);
};
exports.Export = Export;

class ExportDefault extends ExportDeclaration {
  constructor(attrs_363, type_364) {
    super(attrs_363, type_364 || "ExportDefault");
    if (!{}.hasOwnProperty.call(attrs_363, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
  }
  _reduceState(reducer_365, state_366 = {}) {
    state_366.body = this.body instanceof FunctionDeclaration ? this.body.reduce(reducer_365) : this.body instanceof ClassDeclaration ? this.body.reduce(reducer_365) : this.body instanceof Expression ? this.body.reduce(reducer_365) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.body));
    }.call(this);
    ;
    return super._reduceState(reducer_365, state_366);
  }
  _cloneAttrs() {
    return Object.assign({ body: this.body }, super._cloneAttrs());
  }
  reduce(reducer_367) {
    let state_368 = this._reduceState(reducer_367);
    return reducer_367.reduceExportDefault(this, state_368);
  }
  extend(attrs_369) {
    return new ExportDefault(Object.assign(this._cloneAttrs(), attrs_369));
  }
}
ExportDeclaration.CloneReducer.prototype.reduceExportDefault = function (term_370, state_371) {
  return new ExportDefault(state_371);
};
exports.ExportDefault = ExportDefault;

class ExportSpecifier extends Term {
  constructor(attrs_372, type_373) {
    super(attrs_372, type_373 || "ExportSpecifier");
    if (!{}.hasOwnProperty.call(attrs_372, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
    if (!{}.hasOwnProperty.call(attrs_372, "exportedName")) {
      throw new Error("Missing attribute: " + "exportedName");
    }
  }
  _reduceState(reducer_374, state_375 = {}) {
    state_375.name = this.name == null ? null : this.name;
    state_375.exportedName = this.exportedName;
    ;
    return super._reduceState(reducer_374, state_375);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name, exportedName: this.exportedName }, super._cloneAttrs());
  }
  reduce(reducer_376) {
    let state_377 = this._reduceState(reducer_376);
    return reducer_376.reduceExportSpecifier(this, state_377);
  }
  extend(attrs_378) {
    return new ExportSpecifier(Object.assign(this._cloneAttrs(), attrs_378));
  }
}
Term.CloneReducer.prototype.reduceExportSpecifier = function (term_379, state_380) {
  return new ExportSpecifier(state_380);
};
exports.ExportSpecifier = ExportSpecifier;

class Method extends MethodDefinition {
  constructor(attrs_381, type_382) {
    super(attrs_381, type_382 || "Method");
    if (!{}.hasOwnProperty.call(attrs_381, "isGenerator")) {
      throw new Error("Missing attribute: " + "isGenerator");
    }
    if (!{}.hasOwnProperty.call(attrs_381, "params")) {
      throw new Error("Missing attribute: " + "params");
    }
  }
  _reduceState(reducer_383, state_384 = {}) {
    state_384.isGenerator = this.isGenerator;
    state_384.params = this.params instanceof FormalParameters ? this.params.reduce(reducer_383) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.params));
    }.call(this);
    ;
    return super._reduceState(reducer_383, state_384);
  }
  _cloneAttrs() {
    return Object.assign({ isGenerator: this.isGenerator, params: this.params }, super._cloneAttrs());
  }
  reduce(reducer_385) {
    let state_386 = this._reduceState(reducer_385);
    return reducer_385.reduceMethod(this, state_386);
  }
  extend(attrs_387) {
    return new Method(Object.assign(this._cloneAttrs(), attrs_387));
  }
}
MethodDefinition.CloneReducer.prototype.reduceMethod = function (term_388, state_389) {
  return new Method(state_389);
};
exports.Method = Method;

class Getter extends MethodDefinition {
  constructor(attrs_390, type_391) {
    super(attrs_390, type_391 || "Getter");
  }
  _reduceState(reducer_392, state_393 = {}) {
    ;
    return super._reduceState(reducer_392, state_393);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_394) {
    let state_395 = this._reduceState(reducer_394);
    return reducer_394.reduceGetter(this, state_395);
  }
  extend(attrs_396) {
    return new Getter(Object.assign(this._cloneAttrs(), attrs_396));
  }
}
MethodDefinition.CloneReducer.prototype.reduceGetter = function (term_397, state_398) {
  return new Getter(state_398);
};
exports.Getter = Getter;

class Setter extends MethodDefinition {
  constructor(attrs_399, type_400) {
    super(attrs_399, type_400 || "Setter");
    if (!{}.hasOwnProperty.call(attrs_399, "param")) {
      throw new Error("Missing attribute: " + "param");
    }
  }
  _reduceState(reducer_401, state_402 = {}) {
    state_402.param = this.param instanceof ObjectBinding ? this.param.reduce(reducer_401) : this.param instanceof ArrayBinding ? this.param.reduce(reducer_401) : this.param instanceof BindingIdentifier ? this.param.reduce(reducer_401) : this.param instanceof MemberExpression ? this.param.reduce(reducer_401) : this.param instanceof BindingWithDefault ? this.param.reduce(reducer_401) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.param));
    }.call(this);
    ;
    return super._reduceState(reducer_401, state_402);
  }
  _cloneAttrs() {
    return Object.assign({ param: this.param }, super._cloneAttrs());
  }
  reduce(reducer_403) {
    let state_404 = this._reduceState(reducer_403);
    return reducer_403.reduceSetter(this, state_404);
  }
  extend(attrs_405) {
    return new Setter(Object.assign(this._cloneAttrs(), attrs_405));
  }
}
MethodDefinition.CloneReducer.prototype.reduceSetter = function (term_406, state_407) {
  return new Setter(state_407);
};
exports.Setter = Setter;

class DataProperty extends NamedObjectProperty {
  constructor(attrs_408, type_409) {
    super(attrs_408, type_409 || "DataProperty");
    if (!{}.hasOwnProperty.call(attrs_408, "expression")) {
      throw new Error("Missing attribute: " + "expression");
    }
  }
  _reduceState(reducer_410, state_411 = {}) {
    state_411.expression = this.expression instanceof Expression ? this.expression.reduce(reducer_410) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.expression));
    }.call(this);
    ;
    return super._reduceState(reducer_410, state_411);
  }
  _cloneAttrs() {
    return Object.assign({ expression: this.expression }, super._cloneAttrs());
  }
  reduce(reducer_412) {
    let state_413 = this._reduceState(reducer_412);
    return reducer_412.reduceDataProperty(this, state_413);
  }
  extend(attrs_414) {
    return new DataProperty(Object.assign(this._cloneAttrs(), attrs_414));
  }
}
NamedObjectProperty.CloneReducer.prototype.reduceDataProperty = function (term_415, state_416) {
  return new DataProperty(state_416);
};
exports.DataProperty = DataProperty;

class ShorthandProperty extends ObjectProperty {
  constructor(attrs_417, type_418) {
    super(attrs_417, type_418 || "ShorthandProperty");
    if (!{}.hasOwnProperty.call(attrs_417, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
  }
  _reduceState(reducer_419, state_420 = {}) {
    state_420.name = this.name;
    ;
    return super._reduceState(reducer_419, state_420);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name }, super._cloneAttrs());
  }
  reduce(reducer_421) {
    let state_422 = this._reduceState(reducer_421);
    return reducer_421.reduceShorthandProperty(this, state_422);
  }
  extend(attrs_423) {
    return new ShorthandProperty(Object.assign(this._cloneAttrs(), attrs_423));
  }
}
ObjectProperty.CloneReducer.prototype.reduceShorthandProperty = function (term_424, state_425) {
  return new ShorthandProperty(state_425);
};
exports.ShorthandProperty = ShorthandProperty;

class StaticPropertyName extends PropertyName {
  constructor(attrs_426, type_427) {
    super(attrs_426, type_427 || "StaticPropertyName");
    if (!{}.hasOwnProperty.call(attrs_426, "value")) {
      throw new Error("Missing attribute: " + "value");
    }
  }
  _reduceState(reducer_428, state_429 = {}) {
    state_429.value = this.value;
    ;
    return super._reduceState(reducer_428, state_429);
  }
  _cloneAttrs() {
    return Object.assign({ value: this.value }, super._cloneAttrs());
  }
  reduce(reducer_430) {
    let state_431 = this._reduceState(reducer_430);
    return reducer_430.reduceStaticPropertyName(this, state_431);
  }
  extend(attrs_432) {
    return new StaticPropertyName(Object.assign(this._cloneAttrs(), attrs_432));
  }
}
PropertyName.CloneReducer.prototype.reduceStaticPropertyName = function (term_433, state_434) {
  return new StaticPropertyName(state_434);
};
exports.StaticPropertyName = StaticPropertyName;

class ComputedPropertyName extends PropertyName {
  constructor(attrs_435, type_436) {
    super(attrs_435, type_436 || "ComputedPropertyName");
    if (!{}.hasOwnProperty.call(attrs_435, "expression")) {
      throw new Error("Missing attribute: " + "expression");
    }
  }
  _reduceState(reducer_437, state_438 = {}) {
    state_438.expression = this.expression instanceof Expression ? this.expression.reduce(reducer_437) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.expression));
    }.call(this);
    ;
    return super._reduceState(reducer_437, state_438);
  }
  _cloneAttrs() {
    return Object.assign({ expression: this.expression }, super._cloneAttrs());
  }
  reduce(reducer_439) {
    let state_440 = this._reduceState(reducer_439);
    return reducer_439.reduceComputedPropertyName(this, state_440);
  }
  extend(attrs_441) {
    return new ComputedPropertyName(Object.assign(this._cloneAttrs(), attrs_441));
  }
}
PropertyName.CloneReducer.prototype.reduceComputedPropertyName = function (term_442, state_443) {
  return new ComputedPropertyName(state_443);
};
exports.ComputedPropertyName = ComputedPropertyName;

class LiteralBooleanExpression extends Expression {
  constructor(attrs_444, type_445) {
    super(attrs_444, type_445 || "LiteralBooleanExpression");
    if (!{}.hasOwnProperty.call(attrs_444, "value")) {
      throw new Error("Missing attribute: " + "value");
    }
  }
  _reduceState(reducer_446, state_447 = {}) {
    state_447.value = this.value;
    ;
    return super._reduceState(reducer_446, state_447);
  }
  _cloneAttrs() {
    return Object.assign({ value: this.value }, super._cloneAttrs());
  }
  reduce(reducer_448) {
    let state_449 = this._reduceState(reducer_448);
    return reducer_448.reduceLiteralBooleanExpression(this, state_449);
  }
  extend(attrs_450) {
    return new LiteralBooleanExpression(Object.assign(this._cloneAttrs(), attrs_450));
  }
}
Expression.CloneReducer.prototype.reduceLiteralBooleanExpression = function (term_451, state_452) {
  return new LiteralBooleanExpression(state_452);
};
exports.LiteralBooleanExpression = LiteralBooleanExpression;

class LiteralInfinityExpression extends Expression {
  constructor(attrs_453, type_454) {
    super(attrs_453, type_454 || "LiteralInfinityExpression");
  }
  _reduceState(reducer_455, state_456 = {}) {
    ;
    return super._reduceState(reducer_455, state_456);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_457) {
    let state_458 = this._reduceState(reducer_457);
    return reducer_457.reduceLiteralInfinityExpression(this, state_458);
  }
  extend(attrs_459) {
    return new LiteralInfinityExpression(Object.assign(this._cloneAttrs(), attrs_459));
  }
}
Expression.CloneReducer.prototype.reduceLiteralInfinityExpression = function (term_460, state_461) {
  return new LiteralInfinityExpression(state_461);
};
exports.LiteralInfinityExpression = LiteralInfinityExpression;

class LiteralNullExpression extends Expression {
  constructor(attrs_462, type_463) {
    super(attrs_462, type_463 || "LiteralNullExpression");
  }
  _reduceState(reducer_464, state_465 = {}) {
    ;
    return super._reduceState(reducer_464, state_465);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_466) {
    let state_467 = this._reduceState(reducer_466);
    return reducer_466.reduceLiteralNullExpression(this, state_467);
  }
  extend(attrs_468) {
    return new LiteralNullExpression(Object.assign(this._cloneAttrs(), attrs_468));
  }
}
Expression.CloneReducer.prototype.reduceLiteralNullExpression = function (term_469, state_470) {
  return new LiteralNullExpression(state_470);
};
exports.LiteralNullExpression = LiteralNullExpression;

class LiteralNumericExpression extends Expression {
  constructor(attrs_471, type_472) {
    super(attrs_471, type_472 || "LiteralNumericExpression");
    if (!{}.hasOwnProperty.call(attrs_471, "value")) {
      throw new Error("Missing attribute: " + "value");
    }
  }
  _reduceState(reducer_473, state_474 = {}) {
    state_474.value = this.value;
    ;
    return super._reduceState(reducer_473, state_474);
  }
  _cloneAttrs() {
    return Object.assign({ value: this.value }, super._cloneAttrs());
  }
  reduce(reducer_475) {
    let state_476 = this._reduceState(reducer_475);
    return reducer_475.reduceLiteralNumericExpression(this, state_476);
  }
  extend(attrs_477) {
    return new LiteralNumericExpression(Object.assign(this._cloneAttrs(), attrs_477));
  }
}
Expression.CloneReducer.prototype.reduceLiteralNumericExpression = function (term_478, state_479) {
  return new LiteralNumericExpression(state_479);
};
exports.LiteralNumericExpression = LiteralNumericExpression;

class LiteralRegExpExpression extends Expression {
  constructor(attrs_480, type_481) {
    super(attrs_480, type_481 || "LiteralRegExpExpression");
    if (!{}.hasOwnProperty.call(attrs_480, "pattern")) {
      throw new Error("Missing attribute: " + "pattern");
    }
    if (!{}.hasOwnProperty.call(attrs_480, "flags")) {
      throw new Error("Missing attribute: " + "flags");
    }
  }
  _reduceState(reducer_482, state_483 = {}) {
    state_483.pattern = this.pattern;
    state_483.flags = this.flags;
    ;
    return super._reduceState(reducer_482, state_483);
  }
  _cloneAttrs() {
    return Object.assign({ pattern: this.pattern, flags: this.flags }, super._cloneAttrs());
  }
  reduce(reducer_484) {
    let state_485 = this._reduceState(reducer_484);
    return reducer_484.reduceLiteralRegExpExpression(this, state_485);
  }
  extend(attrs_486) {
    return new LiteralRegExpExpression(Object.assign(this._cloneAttrs(), attrs_486));
  }
}
Expression.CloneReducer.prototype.reduceLiteralRegExpExpression = function (term_487, state_488) {
  return new LiteralRegExpExpression(state_488);
};
exports.LiteralRegExpExpression = LiteralRegExpExpression;

class LiteralStringExpression extends Expression {
  constructor(attrs_489, type_490) {
    super(attrs_489, type_490 || "LiteralStringExpression");
    if (!{}.hasOwnProperty.call(attrs_489, "value")) {
      throw new Error("Missing attribute: " + "value");
    }
  }
  _reduceState(reducer_491, state_492 = {}) {
    state_492.value = this.value;
    ;
    return super._reduceState(reducer_491, state_492);
  }
  _cloneAttrs() {
    return Object.assign({ value: this.value }, super._cloneAttrs());
  }
  reduce(reducer_493) {
    let state_494 = this._reduceState(reducer_493);
    return reducer_493.reduceLiteralStringExpression(this, state_494);
  }
  extend(attrs_495) {
    return new LiteralStringExpression(Object.assign(this._cloneAttrs(), attrs_495));
  }
}
Expression.CloneReducer.prototype.reduceLiteralStringExpression = function (term_496, state_497) {
  return new LiteralStringExpression(state_497);
};
exports.LiteralStringExpression = LiteralStringExpression;

class ArrayExpression extends Expression {
  constructor(attrs_498, type_499) {
    super(attrs_498, type_499 || "ArrayExpression");
    if (!{}.hasOwnProperty.call(attrs_498, "elements")) {
      throw new Error("Missing attribute: " + "elements");
    }
  }
  _reduceState(reducer_500, state_501 = {}) {
    state_501.elements = this.elements.map(a_502 => a_502 instanceof SpreadElement ? a_502.reduce(reducer_500) : a_502 instanceof Expression ? a_502.reduce(reducer_500) : a_502 == null ? null : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_502));
    }.call(this));
    ;
    return super._reduceState(reducer_500, state_501);
  }
  _cloneAttrs() {
    return Object.assign({ elements: this.elements }, super._cloneAttrs());
  }
  reduce(reducer_503) {
    let state_504 = this._reduceState(reducer_503);
    return reducer_503.reduceArrayExpression(this, state_504);
  }
  extend(attrs_505) {
    return new ArrayExpression(Object.assign(this._cloneAttrs(), attrs_505));
  }
}
Expression.CloneReducer.prototype.reduceArrayExpression = function (term_506, state_507) {
  return new ArrayExpression(state_507);
};
exports.ArrayExpression = ArrayExpression;

class ArrowExpression extends Expression {
  constructor(attrs_508, type_509) {
    super(attrs_508, type_509 || "ArrowExpression");
    if (!{}.hasOwnProperty.call(attrs_508, "params")) {
      throw new Error("Missing attribute: " + "params");
    }
    if (!{}.hasOwnProperty.call(attrs_508, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
  }
  _reduceState(reducer_510, state_511 = {}) {
    state_511.params = this.params instanceof FormalParameters ? this.params.reduce(reducer_510) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.params));
    }.call(this);
    state_511.body = this.body instanceof FunctionBody ? this.body.reduce(reducer_510) : this.body instanceof Expression ? this.body.reduce(reducer_510) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.body));
    }.call(this);
    ;
    return super._reduceState(reducer_510, state_511);
  }
  _cloneAttrs() {
    return Object.assign({ params: this.params, body: this.body }, super._cloneAttrs());
  }
  reduce(reducer_512) {
    let state_513 = this._reduceState(reducer_512);
    return reducer_512.reduceArrowExpression(this, state_513);
  }
  extend(attrs_514) {
    return new ArrowExpression(Object.assign(this._cloneAttrs(), attrs_514));
  }
}
Expression.CloneReducer.prototype.reduceArrowExpression = function (term_515, state_516) {
  return new ArrowExpression(state_516);
};
exports.ArrowExpression = ArrowExpression;

class ArrowExpressionE extends Expression {
  constructor(attrs_517, type_518) {
    super(attrs_517, type_518 || "ArrowExpressionE");
    if (!{}.hasOwnProperty.call(attrs_517, "params")) {
      throw new Error("Missing attribute: " + "params");
    }
    if (!{}.hasOwnProperty.call(attrs_517, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
  }
  _reduceState(reducer_519, state_520 = {}) {
    state_520.params = this.params instanceof FormalParameters ? this.params.reduce(reducer_519) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.params));
    }.call(this);
    state_520.body = this.body.map(a_521 => a_521 instanceof Term ? a_521.reduce(reducer_519) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_521));
    }.call(this));
    ;
    return super._reduceState(reducer_519, state_520);
  }
  _cloneAttrs() {
    return Object.assign({ params: this.params, body: this.body }, super._cloneAttrs());
  }
  reduce(reducer_522) {
    let state_523 = this._reduceState(reducer_522);
    return reducer_522.reduceArrowExpressionE(this, state_523);
  }
  extend(attrs_524) {
    return new ArrowExpressionE(Object.assign(this._cloneAttrs(), attrs_524));
  }
}
Expression.CloneReducer.prototype.reduceArrowExpressionE = function (term_525, state_526) {
  return new ArrowExpressionE(state_526);
};
exports.ArrowExpressionE = ArrowExpressionE;

class AssignmentExpression extends Expression {
  constructor(attrs_527, type_528) {
    super(attrs_527, type_528 || "AssignmentExpression");
    if (!{}.hasOwnProperty.call(attrs_527, "binding")) {
      throw new Error("Missing attribute: " + "binding");
    }
    if (!{}.hasOwnProperty.call(attrs_527, "expression")) {
      throw new Error("Missing attribute: " + "expression");
    }
  }
  _reduceState(reducer_529, state_530 = {}) {
    state_530.binding = this.binding instanceof BindingIdentifier ? this.binding.reduce(reducer_529) : this.binding instanceof BindingPropertyProperty ? this.binding.reduce(reducer_529) : this.binding instanceof BindingPropertyIdentifier ? this.binding.reduce(reducer_529) : this.binding instanceof ObjectBinding ? this.binding.reduce(reducer_529) : this.binding instanceof ArrayBinding ? this.binding.reduce(reducer_529) : this.binding instanceof MemberExpression ? this.binding.reduce(reducer_529) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.binding));
    }.call(this);
    state_530.expression = this.expression instanceof Expression ? this.expression.reduce(reducer_529) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.expression));
    }.call(this);
    ;
    return super._reduceState(reducer_529, state_530);
  }
  _cloneAttrs() {
    return Object.assign({ binding: this.binding, expression: this.expression }, super._cloneAttrs());
  }
  reduce(reducer_531) {
    let state_532 = this._reduceState(reducer_531);
    return reducer_531.reduceAssignmentExpression(this, state_532);
  }
  extend(attrs_533) {
    return new AssignmentExpression(Object.assign(this._cloneAttrs(), attrs_533));
  }
}
Expression.CloneReducer.prototype.reduceAssignmentExpression = function (term_534, state_535) {
  return new AssignmentExpression(state_535);
};
exports.AssignmentExpression = AssignmentExpression;

class BinaryExpression extends Expression {
  constructor(attrs_536, type_537) {
    super(attrs_536, type_537 || "BinaryExpression");
    if (!{}.hasOwnProperty.call(attrs_536, "operator")) {
      throw new Error("Missing attribute: " + "operator");
    }
    if (!{}.hasOwnProperty.call(attrs_536, "left")) {
      throw new Error("Missing attribute: " + "left");
    }
    if (!{}.hasOwnProperty.call(attrs_536, "right")) {
      throw new Error("Missing attribute: " + "right");
    }
  }
  _reduceState(reducer_538, state_539 = {}) {
    state_539.operator = this.operator;
    state_539.left = this.left instanceof Expression ? this.left.reduce(reducer_538) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.left));
    }.call(this);
    state_539.right = this.right instanceof Expression ? this.right.reduce(reducer_538) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.right));
    }.call(this);
    ;
    return super._reduceState(reducer_538, state_539);
  }
  _cloneAttrs() {
    return Object.assign({ operator: this.operator, left: this.left, right: this.right }, super._cloneAttrs());
  }
  reduce(reducer_540) {
    let state_541 = this._reduceState(reducer_540);
    return reducer_540.reduceBinaryExpression(this, state_541);
  }
  extend(attrs_542) {
    return new BinaryExpression(Object.assign(this._cloneAttrs(), attrs_542));
  }
}
Expression.CloneReducer.prototype.reduceBinaryExpression = function (term_543, state_544) {
  return new BinaryExpression(state_544);
};
exports.BinaryExpression = BinaryExpression;

class CallExpression extends Expression {
  constructor(attrs_545, type_546) {
    super(attrs_545, type_546 || "CallExpression");
    if (!{}.hasOwnProperty.call(attrs_545, "callee")) {
      throw new Error("Missing attribute: " + "callee");
    }
    if (!{}.hasOwnProperty.call(attrs_545, "arguments")) {
      throw new Error("Missing attribute: " + "arguments");
    }
  }
  _reduceState(reducer_547, state_548 = {}) {
    state_548.callee = this.callee instanceof Expression ? this.callee.reduce(reducer_547) : this.callee instanceof Super ? this.callee.reduce(reducer_547) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.callee));
    }.call(this);
    state_548.arguments = this.arguments.map(a_549 => a_549 instanceof SpreadElement ? a_549.reduce(reducer_547) : a_549 instanceof Expression ? a_549.reduce(reducer_547) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_549));
    }.call(this));
    ;
    return super._reduceState(reducer_547, state_548);
  }
  _cloneAttrs() {
    return Object.assign({ callee: this.callee, arguments: this.arguments }, super._cloneAttrs());
  }
  reduce(reducer_550) {
    let state_551 = this._reduceState(reducer_550);
    return reducer_550.reduceCallExpression(this, state_551);
  }
  extend(attrs_552) {
    return new CallExpression(Object.assign(this._cloneAttrs(), attrs_552));
  }
}
Expression.CloneReducer.prototype.reduceCallExpression = function (term_553, state_554) {
  return new CallExpression(state_554);
};
exports.CallExpression = CallExpression;

class CallExpressionE extends Expression {
  constructor(attrs_555, type_556) {
    super(attrs_555, type_556 || "CallExpressionE");
    if (!{}.hasOwnProperty.call(attrs_555, "callee")) {
      throw new Error("Missing attribute: " + "callee");
    }
    if (!{}.hasOwnProperty.call(attrs_555, "arguments")) {
      throw new Error("Missing attribute: " + "arguments");
    }
  }
  _reduceState(reducer_557, state_558 = {}) {
    state_558.callee = this.callee instanceof Expression ? this.callee.reduce(reducer_557) : this.callee instanceof Super ? this.callee.reduce(reducer_557) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.callee));
    }.call(this);
    state_558.arguments = this.arguments.map(a_559 => a_559 instanceof Term ? a_559.reduce(reducer_557) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_559));
    }.call(this));
    ;
    return super._reduceState(reducer_557, state_558);
  }
  _cloneAttrs() {
    return Object.assign({ callee: this.callee, arguments: this.arguments }, super._cloneAttrs());
  }
  reduce(reducer_560) {
    let state_561 = this._reduceState(reducer_560);
    return reducer_560.reduceCallExpressionE(this, state_561);
  }
  extend(attrs_562) {
    return new CallExpressionE(Object.assign(this._cloneAttrs(), attrs_562));
  }
}
Expression.CloneReducer.prototype.reduceCallExpressionE = function (term_563, state_564) {
  return new CallExpressionE(state_564);
};
exports.CallExpressionE = CallExpressionE;

class CompoundAssignmentExpression extends Expression {
  constructor(attrs_565, type_566) {
    super(attrs_565, type_566 || "CompoundAssignmentExpression");
    if (!{}.hasOwnProperty.call(attrs_565, "binding")) {
      throw new Error("Missing attribute: " + "binding");
    }
    if (!{}.hasOwnProperty.call(attrs_565, "operator")) {
      throw new Error("Missing attribute: " + "operator");
    }
    if (!{}.hasOwnProperty.call(attrs_565, "expression")) {
      throw new Error("Missing attribute: " + "expression");
    }
  }
  _reduceState(reducer_567, state_568 = {}) {
    state_568.binding = this.binding instanceof BindingIdentifier ? this.binding.reduce(reducer_567) : this.binding instanceof MemberExpression ? this.binding.reduce(reducer_567) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.binding));
    }.call(this);
    state_568.operator = this.operator;
    state_568.expression = this.expression instanceof Expression ? this.expression.reduce(reducer_567) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.expression));
    }.call(this);
    ;
    return super._reduceState(reducer_567, state_568);
  }
  _cloneAttrs() {
    return Object.assign({ binding: this.binding, operator: this.operator, expression: this.expression }, super._cloneAttrs());
  }
  reduce(reducer_569) {
    let state_570 = this._reduceState(reducer_569);
    return reducer_569.reduceCompoundAssignmentExpression(this, state_570);
  }
  extend(attrs_571) {
    return new CompoundAssignmentExpression(Object.assign(this._cloneAttrs(), attrs_571));
  }
}
Expression.CloneReducer.prototype.reduceCompoundAssignmentExpression = function (term_572, state_573) {
  return new CompoundAssignmentExpression(state_573);
};
exports.CompoundAssignmentExpression = CompoundAssignmentExpression;

class ComputedMemberExpression extends MemberExpression {
  constructor(attrs_574, type_575) {
    super(attrs_574, type_575 || "ComputedMemberExpression");
    if (!{}.hasOwnProperty.call(attrs_574, "expression")) {
      throw new Error("Missing attribute: " + "expression");
    }
  }
  _reduceState(reducer_576, state_577 = {}) {
    state_577.expression = this.expression instanceof Expression ? this.expression.reduce(reducer_576) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.expression));
    }.call(this);
    ;
    return super._reduceState(reducer_576, state_577);
  }
  _cloneAttrs() {
    return Object.assign({ expression: this.expression }, super._cloneAttrs());
  }
  reduce(reducer_578) {
    let state_579 = this._reduceState(reducer_578);
    return reducer_578.reduceComputedMemberExpression(this, state_579);
  }
  extend(attrs_580) {
    return new ComputedMemberExpression(Object.assign(this._cloneAttrs(), attrs_580));
  }
}
MemberExpression.CloneReducer.prototype.reduceComputedMemberExpression = function (term_581, state_582) {
  return new ComputedMemberExpression(state_582);
};
exports.ComputedMemberExpression = ComputedMemberExpression;

class ConditionalExpression extends Expression {
  constructor(attrs_583, type_584) {
    super(attrs_583, type_584 || "ConditionalExpression");
    if (!{}.hasOwnProperty.call(attrs_583, "test")) {
      throw new Error("Missing attribute: " + "test");
    }
    if (!{}.hasOwnProperty.call(attrs_583, "consequent")) {
      throw new Error("Missing attribute: " + "consequent");
    }
    if (!{}.hasOwnProperty.call(attrs_583, "alternate")) {
      throw new Error("Missing attribute: " + "alternate");
    }
  }
  _reduceState(reducer_585, state_586 = {}) {
    state_586.test = this.test instanceof Expression ? this.test.reduce(reducer_585) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.test));
    }.call(this);
    state_586.consequent = this.consequent instanceof Expression ? this.consequent.reduce(reducer_585) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.consequent));
    }.call(this);
    state_586.alternate = this.alternate instanceof Expression ? this.alternate.reduce(reducer_585) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.alternate));
    }.call(this);
    ;
    return super._reduceState(reducer_585, state_586);
  }
  _cloneAttrs() {
    return Object.assign({ test: this.test, consequent: this.consequent, alternate: this.alternate }, super._cloneAttrs());
  }
  reduce(reducer_587) {
    let state_588 = this._reduceState(reducer_587);
    return reducer_587.reduceConditionalExpression(this, state_588);
  }
  extend(attrs_589) {
    return new ConditionalExpression(Object.assign(this._cloneAttrs(), attrs_589));
  }
}
Expression.CloneReducer.prototype.reduceConditionalExpression = function (term_590, state_591) {
  return new ConditionalExpression(state_591);
};
exports.ConditionalExpression = ConditionalExpression;

class FunctionExpression extends Expression {
  constructor(attrs_592, type_593) {
    super(attrs_592, type_593 || "FunctionExpression");
    if (!{}.hasOwnProperty.call(attrs_592, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
    if (!{}.hasOwnProperty.call(attrs_592, "isGenerator")) {
      throw new Error("Missing attribute: " + "isGenerator");
    }
    if (!{}.hasOwnProperty.call(attrs_592, "params")) {
      throw new Error("Missing attribute: " + "params");
    }
    if (!{}.hasOwnProperty.call(attrs_592, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
  }
  _reduceState(reducer_594, state_595 = {}) {
    state_595.name = this.name == null ? null : this.name instanceof BindingIdentifier ? this.name.reduce(reducer_594) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.name));
    }.call(this);
    state_595.isGenerator = this.isGenerator;
    state_595.params = this.params instanceof FormalParameters ? this.params.reduce(reducer_594) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.params));
    }.call(this);
    state_595.body = this.body instanceof FunctionBody ? this.body.reduce(reducer_594) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.body));
    }.call(this);
    ;
    return super._reduceState(reducer_594, state_595);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name, isGenerator: this.isGenerator, params: this.params, body: this.body }, super._cloneAttrs());
  }
  reduce(reducer_596) {
    let state_597 = this._reduceState(reducer_596);
    return reducer_596.reduceFunctionExpression(this, state_597);
  }
  extend(attrs_598) {
    return new FunctionExpression(Object.assign(this._cloneAttrs(), attrs_598));
  }
}
Expression.CloneReducer.prototype.reduceFunctionExpression = function (term_599, state_600) {
  return new FunctionExpression(state_600);
};
exports.FunctionExpression = FunctionExpression;

class FunctionExpressionE extends Expression {
  constructor(attrs_601, type_602) {
    super(attrs_601, type_602 || "FunctionExpressionE");
    if (!{}.hasOwnProperty.call(attrs_601, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
    if (!{}.hasOwnProperty.call(attrs_601, "isGenerator")) {
      throw new Error("Missing attribute: " + "isGenerator");
    }
    if (!{}.hasOwnProperty.call(attrs_601, "params")) {
      throw new Error("Missing attribute: " + "params");
    }
    if (!{}.hasOwnProperty.call(attrs_601, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
  }
  _reduceState(reducer_603, state_604 = {}) {
    state_604.name = this.name == null ? null : this.name instanceof BindingIdentifier ? this.name.reduce(reducer_603) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.name));
    }.call(this);
    state_604.isGenerator = this.isGenerator;
    state_604.params = this.params instanceof FormalParameters ? this.params.reduce(reducer_603) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.params));
    }.call(this);
    state_604.body = this.body.map(a_605 => a_605 instanceof Term ? a_605.reduce(reducer_603) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_605));
    }.call(this));
    ;
    return super._reduceState(reducer_603, state_604);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name, isGenerator: this.isGenerator, params: this.params, body: this.body }, super._cloneAttrs());
  }
  reduce(reducer_606) {
    let state_607 = this._reduceState(reducer_606);
    return reducer_606.reduceFunctionExpressionE(this, state_607);
  }
  extend(attrs_608) {
    return new FunctionExpressionE(Object.assign(this._cloneAttrs(), attrs_608));
  }
}
Expression.CloneReducer.prototype.reduceFunctionExpressionE = function (term_609, state_610) {
  return new FunctionExpressionE(state_610);
};
exports.FunctionExpressionE = FunctionExpressionE;

class IdentifierExpression extends Expression {
  constructor(attrs_611, type_612) {
    super(attrs_611, type_612 || "IdentifierExpression");
    if (!{}.hasOwnProperty.call(attrs_611, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
  }
  _reduceState(reducer_613, state_614 = {}) {
    state_614.name = this.name;
    ;
    return super._reduceState(reducer_613, state_614);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name }, super._cloneAttrs());
  }
  reduce(reducer_615) {
    let state_616 = this._reduceState(reducer_615);
    return reducer_615.reduceIdentifierExpression(this, state_616);
  }
  extend(attrs_617) {
    return new IdentifierExpression(Object.assign(this._cloneAttrs(), attrs_617));
  }
}
Expression.CloneReducer.prototype.reduceIdentifierExpression = function (term_618, state_619) {
  return new IdentifierExpression(state_619);
};
exports.IdentifierExpression = IdentifierExpression;

class NewExpression extends Expression {
  constructor(attrs_620, type_621) {
    super(attrs_620, type_621 || "NewExpression");
    if (!{}.hasOwnProperty.call(attrs_620, "callee")) {
      throw new Error("Missing attribute: " + "callee");
    }
    if (!{}.hasOwnProperty.call(attrs_620, "arguments")) {
      throw new Error("Missing attribute: " + "arguments");
    }
  }
  _reduceState(reducer_622, state_623 = {}) {
    state_623.callee = this.callee instanceof Expression ? this.callee.reduce(reducer_622) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.callee));
    }.call(this);
    state_623.arguments = this.arguments.map(a_624 => a_624 instanceof SpreadElement ? a_624.reduce(reducer_622) : a_624 instanceof Expression ? a_624.reduce(reducer_622) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_624));
    }.call(this));
    ;
    return super._reduceState(reducer_622, state_623);
  }
  _cloneAttrs() {
    return Object.assign({ callee: this.callee, arguments: this.arguments }, super._cloneAttrs());
  }
  reduce(reducer_625) {
    let state_626 = this._reduceState(reducer_625);
    return reducer_625.reduceNewExpression(this, state_626);
  }
  extend(attrs_627) {
    return new NewExpression(Object.assign(this._cloneAttrs(), attrs_627));
  }
}
Expression.CloneReducer.prototype.reduceNewExpression = function (term_628, state_629) {
  return new NewExpression(state_629);
};
exports.NewExpression = NewExpression;

class NewTargetExpression extends Expression {
  constructor(attrs_630, type_631) {
    super(attrs_630, type_631 || "NewTargetExpression");
  }
  _reduceState(reducer_632, state_633 = {}) {
    ;
    return super._reduceState(reducer_632, state_633);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_634) {
    let state_635 = this._reduceState(reducer_634);
    return reducer_634.reduceNewTargetExpression(this, state_635);
  }
  extend(attrs_636) {
    return new NewTargetExpression(Object.assign(this._cloneAttrs(), attrs_636));
  }
}
Expression.CloneReducer.prototype.reduceNewTargetExpression = function (term_637, state_638) {
  return new NewTargetExpression(state_638);
};
exports.NewTargetExpression = NewTargetExpression;

class ObjectExpression extends Expression {
  constructor(attrs_639, type_640) {
    super(attrs_639, type_640 || "ObjectExpression");
    if (!{}.hasOwnProperty.call(attrs_639, "properties")) {
      throw new Error("Missing attribute: " + "properties");
    }
  }
  _reduceState(reducer_641, state_642 = {}) {
    state_642.properties = this.properties.map(a_643 => a_643 instanceof ObjectProperty ? a_643.reduce(reducer_641) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_643));
    }.call(this));
    ;
    return super._reduceState(reducer_641, state_642);
  }
  _cloneAttrs() {
    return Object.assign({ properties: this.properties }, super._cloneAttrs());
  }
  reduce(reducer_644) {
    let state_645 = this._reduceState(reducer_644);
    return reducer_644.reduceObjectExpression(this, state_645);
  }
  extend(attrs_646) {
    return new ObjectExpression(Object.assign(this._cloneAttrs(), attrs_646));
  }
}
Expression.CloneReducer.prototype.reduceObjectExpression = function (term_647, state_648) {
  return new ObjectExpression(state_648);
};
exports.ObjectExpression = ObjectExpression;

class UnaryExpression extends Expression {
  constructor(attrs_649, type_650) {
    super(attrs_649, type_650 || "UnaryExpression");
    if (!{}.hasOwnProperty.call(attrs_649, "operator")) {
      throw new Error("Missing attribute: " + "operator");
    }
    if (!{}.hasOwnProperty.call(attrs_649, "operand")) {
      throw new Error("Missing attribute: " + "operand");
    }
  }
  _reduceState(reducer_651, state_652 = {}) {
    state_652.operator = this.operator;
    state_652.operand = this.operand instanceof Expression ? this.operand.reduce(reducer_651) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.operand));
    }.call(this);
    ;
    return super._reduceState(reducer_651, state_652);
  }
  _cloneAttrs() {
    return Object.assign({ operator: this.operator, operand: this.operand }, super._cloneAttrs());
  }
  reduce(reducer_653) {
    let state_654 = this._reduceState(reducer_653);
    return reducer_653.reduceUnaryExpression(this, state_654);
  }
  extend(attrs_655) {
    return new UnaryExpression(Object.assign(this._cloneAttrs(), attrs_655));
  }
}
Expression.CloneReducer.prototype.reduceUnaryExpression = function (term_656, state_657) {
  return new UnaryExpression(state_657);
};
exports.UnaryExpression = UnaryExpression;

class StaticMemberExpression extends MemberExpression {
  constructor(attrs_658, type_659) {
    super(attrs_658, type_659 || "StaticMemberExpression");
    if (!{}.hasOwnProperty.call(attrs_658, "property")) {
      throw new Error("Missing attribute: " + "property");
    }
  }
  _reduceState(reducer_660, state_661 = {}) {
    state_661.property = this.property;
    ;
    return super._reduceState(reducer_660, state_661);
  }
  _cloneAttrs() {
    return Object.assign({ property: this.property }, super._cloneAttrs());
  }
  reduce(reducer_662) {
    let state_663 = this._reduceState(reducer_662);
    return reducer_662.reduceStaticMemberExpression(this, state_663);
  }
  extend(attrs_664) {
    return new StaticMemberExpression(Object.assign(this._cloneAttrs(), attrs_664));
  }
}
MemberExpression.CloneReducer.prototype.reduceStaticMemberExpression = function (term_665, state_666) {
  return new StaticMemberExpression(state_666);
};
exports.StaticMemberExpression = StaticMemberExpression;

class TemplateExpression extends Expression {
  constructor(attrs_667, type_668) {
    super(attrs_667, type_668 || "TemplateExpression");
    if (!{}.hasOwnProperty.call(attrs_667, "tag")) {
      throw new Error("Missing attribute: " + "tag");
    }
    if (!{}.hasOwnProperty.call(attrs_667, "elements")) {
      throw new Error("Missing attribute: " + "elements");
    }
  }
  _reduceState(reducer_669, state_670 = {}) {
    state_670.tag = this.tag == null ? null : this.tag instanceof Expression ? this.tag.reduce(reducer_669) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.tag));
    }.call(this);
    state_670.elements = this.elements.map(a_671 => a_671 instanceof Expression ? a_671.reduce(reducer_669) : a_671 instanceof TemplateElement ? a_671.reduce(reducer_669) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_671));
    }.call(this));
    ;
    return super._reduceState(reducer_669, state_670);
  }
  _cloneAttrs() {
    return Object.assign({ tag: this.tag, elements: this.elements }, super._cloneAttrs());
  }
  reduce(reducer_672) {
    let state_673 = this._reduceState(reducer_672);
    return reducer_672.reduceTemplateExpression(this, state_673);
  }
  extend(attrs_674) {
    return new TemplateExpression(Object.assign(this._cloneAttrs(), attrs_674));
  }
}
Expression.CloneReducer.prototype.reduceTemplateExpression = function (term_675, state_676) {
  return new TemplateExpression(state_676);
};
exports.TemplateExpression = TemplateExpression;

class ThisExpression extends Expression {
  constructor(attrs_677, type_678) {
    super(attrs_677, type_678 || "ThisExpression");
    if (!{}.hasOwnProperty.call(attrs_677, "stx")) {
      throw new Error("Missing attribute: " + "stx");
    }
  }
  _reduceState(reducer_679, state_680 = {}) {
    state_680.stx = this.stx;
    ;
    return super._reduceState(reducer_679, state_680);
  }
  _cloneAttrs() {
    return Object.assign({ stx: this.stx }, super._cloneAttrs());
  }
  reduce(reducer_681) {
    let state_682 = this._reduceState(reducer_681);
    return reducer_681.reduceThisExpression(this, state_682);
  }
  extend(attrs_683) {
    return new ThisExpression(Object.assign(this._cloneAttrs(), attrs_683));
  }
}
Expression.CloneReducer.prototype.reduceThisExpression = function (term_684, state_685) {
  return new ThisExpression(state_685);
};
exports.ThisExpression = ThisExpression;

class UpdateExpression extends Expression {
  constructor(attrs_686, type_687) {
    super(attrs_686, type_687 || "UpdateExpression");
    if (!{}.hasOwnProperty.call(attrs_686, "isPrefix")) {
      throw new Error("Missing attribute: " + "isPrefix");
    }
    if (!{}.hasOwnProperty.call(attrs_686, "operator")) {
      throw new Error("Missing attribute: " + "operator");
    }
    if (!{}.hasOwnProperty.call(attrs_686, "operand")) {
      throw new Error("Missing attribute: " + "operand");
    }
  }
  _reduceState(reducer_688, state_689 = {}) {
    state_689.isPrefix = this.isPrefix;
    state_689.operator = this.operator;
    state_689.operand = this.operand instanceof BindingIdentifier ? this.operand.reduce(reducer_688) : this.operand instanceof MemberExpression ? this.operand.reduce(reducer_688) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.operand));
    }.call(this);
    ;
    return super._reduceState(reducer_688, state_689);
  }
  _cloneAttrs() {
    return Object.assign({ isPrefix: this.isPrefix, operator: this.operator, operand: this.operand }, super._cloneAttrs());
  }
  reduce(reducer_690) {
    let state_691 = this._reduceState(reducer_690);
    return reducer_690.reduceUpdateExpression(this, state_691);
  }
  extend(attrs_692) {
    return new UpdateExpression(Object.assign(this._cloneAttrs(), attrs_692));
  }
}
Expression.CloneReducer.prototype.reduceUpdateExpression = function (term_693, state_694) {
  return new UpdateExpression(state_694);
};
exports.UpdateExpression = UpdateExpression;

class YieldExpression extends Expression {
  constructor(attrs_695, type_696) {
    super(attrs_695, type_696 || "YieldExpression");
    if (!{}.hasOwnProperty.call(attrs_695, "expression")) {
      throw new Error("Missing attribute: " + "expression");
    }
  }
  _reduceState(reducer_697, state_698 = {}) {
    state_698.expression = this.expression == null ? null : this.expression instanceof Expression ? this.expression.reduce(reducer_697) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.expression));
    }.call(this);
    ;
    return super._reduceState(reducer_697, state_698);
  }
  _cloneAttrs() {
    return Object.assign({ expression: this.expression }, super._cloneAttrs());
  }
  reduce(reducer_699) {
    let state_700 = this._reduceState(reducer_699);
    return reducer_699.reduceYieldExpression(this, state_700);
  }
  extend(attrs_701) {
    return new YieldExpression(Object.assign(this._cloneAttrs(), attrs_701));
  }
}
Expression.CloneReducer.prototype.reduceYieldExpression = function (term_702, state_703) {
  return new YieldExpression(state_703);
};
exports.YieldExpression = YieldExpression;

class YieldGeneratorExpression extends Expression {
  constructor(attrs_704, type_705) {
    super(attrs_704, type_705 || "YieldGeneratorExpression");
    if (!{}.hasOwnProperty.call(attrs_704, "expression")) {
      throw new Error("Missing attribute: " + "expression");
    }
  }
  _reduceState(reducer_706, state_707 = {}) {
    state_707.expression = this.expression instanceof Expression ? this.expression.reduce(reducer_706) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.expression));
    }.call(this);
    ;
    return super._reduceState(reducer_706, state_707);
  }
  _cloneAttrs() {
    return Object.assign({ expression: this.expression }, super._cloneAttrs());
  }
  reduce(reducer_708) {
    let state_709 = this._reduceState(reducer_708);
    return reducer_708.reduceYieldGeneratorExpression(this, state_709);
  }
  extend(attrs_710) {
    return new YieldGeneratorExpression(Object.assign(this._cloneAttrs(), attrs_710));
  }
}
Expression.CloneReducer.prototype.reduceYieldGeneratorExpression = function (term_711, state_712) {
  return new YieldGeneratorExpression(state_712);
};
exports.YieldGeneratorExpression = YieldGeneratorExpression;

class ParenthesizedExpression extends Expression {
  constructor(attrs_713, type_714) {
    super(attrs_713, type_714 || "ParenthesizedExpression");
    if (!{}.hasOwnProperty.call(attrs_713, "inner")) {
      throw new Error("Missing attribute: " + "inner");
    }
  }
  _reduceState(reducer_715, state_716 = {}) {
    state_716.inner = this.inner;
    ;
    return super._reduceState(reducer_715, state_716);
  }
  _cloneAttrs() {
    return Object.assign({ inner: this.inner }, super._cloneAttrs());
  }
  reduce(reducer_717) {
    let state_718 = this._reduceState(reducer_717);
    return reducer_717.reduceParenthesizedExpression(this, state_718);
  }
  extend(attrs_719) {
    return new ParenthesizedExpression(Object.assign(this._cloneAttrs(), attrs_719));
  }
}
Expression.CloneReducer.prototype.reduceParenthesizedExpression = function (term_720, state_721) {
  return new ParenthesizedExpression(state_721);
};
exports.ParenthesizedExpression = ParenthesizedExpression;

class BlockStatement extends Statement {
  constructor(attrs_722, type_723) {
    super(attrs_722, type_723 || "BlockStatement");
    if (!{}.hasOwnProperty.call(attrs_722, "block")) {
      throw new Error("Missing attribute: " + "block");
    }
  }
  _reduceState(reducer_724, state_725 = {}) {
    state_725.block = this.block instanceof Block ? this.block.reduce(reducer_724) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.block));
    }.call(this);
    ;
    return super._reduceState(reducer_724, state_725);
  }
  _cloneAttrs() {
    return Object.assign({ block: this.block }, super._cloneAttrs());
  }
  reduce(reducer_726) {
    let state_727 = this._reduceState(reducer_726);
    return reducer_726.reduceBlockStatement(this, state_727);
  }
  extend(attrs_728) {
    return new BlockStatement(Object.assign(this._cloneAttrs(), attrs_728));
  }
}
Statement.CloneReducer.prototype.reduceBlockStatement = function (term_729, state_730) {
  return new BlockStatement(state_730);
};
exports.BlockStatement = BlockStatement;

class BreakStatement extends Statement {
  constructor(attrs_731, type_732) {
    super(attrs_731, type_732 || "BreakStatement");
    if (!{}.hasOwnProperty.call(attrs_731, "label")) {
      throw new Error("Missing attribute: " + "label");
    }
  }
  _reduceState(reducer_733, state_734 = {}) {
    state_734.label = this.label == null ? null : this.label;
    ;
    return super._reduceState(reducer_733, state_734);
  }
  _cloneAttrs() {
    return Object.assign({ label: this.label }, super._cloneAttrs());
  }
  reduce(reducer_735) {
    let state_736 = this._reduceState(reducer_735);
    return reducer_735.reduceBreakStatement(this, state_736);
  }
  extend(attrs_737) {
    return new BreakStatement(Object.assign(this._cloneAttrs(), attrs_737));
  }
}
Statement.CloneReducer.prototype.reduceBreakStatement = function (term_738, state_739) {
  return new BreakStatement(state_739);
};
exports.BreakStatement = BreakStatement;

class ContinueStatement extends Statement {
  constructor(attrs_740, type_741) {
    super(attrs_740, type_741 || "ContinueStatement");
    if (!{}.hasOwnProperty.call(attrs_740, "label")) {
      throw new Error("Missing attribute: " + "label");
    }
  }
  _reduceState(reducer_742, state_743 = {}) {
    state_743.label = this.label == null ? null : this.label;
    ;
    return super._reduceState(reducer_742, state_743);
  }
  _cloneAttrs() {
    return Object.assign({ label: this.label }, super._cloneAttrs());
  }
  reduce(reducer_744) {
    let state_745 = this._reduceState(reducer_744);
    return reducer_744.reduceContinueStatement(this, state_745);
  }
  extend(attrs_746) {
    return new ContinueStatement(Object.assign(this._cloneAttrs(), attrs_746));
  }
}
Statement.CloneReducer.prototype.reduceContinueStatement = function (term_747, state_748) {
  return new ContinueStatement(state_748);
};
exports.ContinueStatement = ContinueStatement;

class DebuggerStatement extends Statement {
  constructor(attrs_749, type_750) {
    super(attrs_749, type_750 || "DebuggerStatement");
  }
  _reduceState(reducer_751, state_752 = {}) {
    ;
    return super._reduceState(reducer_751, state_752);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_753) {
    let state_754 = this._reduceState(reducer_753);
    return reducer_753.reduceDebuggerStatement(this, state_754);
  }
  extend(attrs_755) {
    return new DebuggerStatement(Object.assign(this._cloneAttrs(), attrs_755));
  }
}
Statement.CloneReducer.prototype.reduceDebuggerStatement = function (term_756, state_757) {
  return new DebuggerStatement(state_757);
};
exports.DebuggerStatement = DebuggerStatement;

class DoWhileStatement extends IterationStatement {
  constructor(attrs_758, type_759) {
    super(attrs_758, type_759 || "DoWhileStatement");
    if (!{}.hasOwnProperty.call(attrs_758, "test")) {
      throw new Error("Missing attribute: " + "test");
    }
  }
  _reduceState(reducer_760, state_761 = {}) {
    state_761.test = this.test instanceof Expression ? this.test.reduce(reducer_760) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.test));
    }.call(this);
    ;
    return super._reduceState(reducer_760, state_761);
  }
  _cloneAttrs() {
    return Object.assign({ test: this.test }, super._cloneAttrs());
  }
  reduce(reducer_762) {
    let state_763 = this._reduceState(reducer_762);
    return reducer_762.reduceDoWhileStatement(this, state_763);
  }
  extend(attrs_764) {
    return new DoWhileStatement(Object.assign(this._cloneAttrs(), attrs_764));
  }
}
IterationStatement.CloneReducer.prototype.reduceDoWhileStatement = function (term_765, state_766) {
  return new DoWhileStatement(state_766);
};
exports.DoWhileStatement = DoWhileStatement;

class EmptyStatement extends Statement {
  constructor(attrs_767, type_768) {
    super(attrs_767, type_768 || "EmptyStatement");
  }
  _reduceState(reducer_769, state_770 = {}) {
    ;
    return super._reduceState(reducer_769, state_770);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_771) {
    let state_772 = this._reduceState(reducer_771);
    return reducer_771.reduceEmptyStatement(this, state_772);
  }
  extend(attrs_773) {
    return new EmptyStatement(Object.assign(this._cloneAttrs(), attrs_773));
  }
}
Statement.CloneReducer.prototype.reduceEmptyStatement = function (term_774, state_775) {
  return new EmptyStatement(state_775);
};
exports.EmptyStatement = EmptyStatement;

class ExpressionStatement extends Statement {
  constructor(attrs_776, type_777) {
    super(attrs_776, type_777 || "ExpressionStatement");
    if (!{}.hasOwnProperty.call(attrs_776, "expression")) {
      throw new Error("Missing attribute: " + "expression");
    }
  }
  _reduceState(reducer_778, state_779 = {}) {
    state_779.expression = this.expression instanceof Expression ? this.expression.reduce(reducer_778) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.expression));
    }.call(this);
    ;
    return super._reduceState(reducer_778, state_779);
  }
  _cloneAttrs() {
    return Object.assign({ expression: this.expression }, super._cloneAttrs());
  }
  reduce(reducer_780) {
    let state_781 = this._reduceState(reducer_780);
    return reducer_780.reduceExpressionStatement(this, state_781);
  }
  extend(attrs_782) {
    return new ExpressionStatement(Object.assign(this._cloneAttrs(), attrs_782));
  }
}
Statement.CloneReducer.prototype.reduceExpressionStatement = function (term_783, state_784) {
  return new ExpressionStatement(state_784);
};
exports.ExpressionStatement = ExpressionStatement;

class ForInStatement extends IterationStatement {
  constructor(attrs_785, type_786) {
    super(attrs_785, type_786 || "ForInStatement");
    if (!{}.hasOwnProperty.call(attrs_785, "left")) {
      throw new Error("Missing attribute: " + "left");
    }
    if (!{}.hasOwnProperty.call(attrs_785, "right")) {
      throw new Error("Missing attribute: " + "right");
    }
  }
  _reduceState(reducer_787, state_788 = {}) {
    state_788.left = this.left instanceof VariableDeclaration ? this.left.reduce(reducer_787) : this.left instanceof ObjectBinding ? this.left.reduce(reducer_787) : this.left instanceof ArrayBinding ? this.left.reduce(reducer_787) : this.left instanceof BindingIdentifier ? this.left.reduce(reducer_787) : this.left instanceof MemberExpression ? this.left.reduce(reducer_787) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.left));
    }.call(this);
    state_788.right = this.right instanceof Expression ? this.right.reduce(reducer_787) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.right));
    }.call(this);
    ;
    return super._reduceState(reducer_787, state_788);
  }
  _cloneAttrs() {
    return Object.assign({ left: this.left, right: this.right }, super._cloneAttrs());
  }
  reduce(reducer_789) {
    let state_790 = this._reduceState(reducer_789);
    return reducer_789.reduceForInStatement(this, state_790);
  }
  extend(attrs_791) {
    return new ForInStatement(Object.assign(this._cloneAttrs(), attrs_791));
  }
}
IterationStatement.CloneReducer.prototype.reduceForInStatement = function (term_792, state_793) {
  return new ForInStatement(state_793);
};
exports.ForInStatement = ForInStatement;

class ForOfStatement extends IterationStatement {
  constructor(attrs_794, type_795) {
    super(attrs_794, type_795 || "ForOfStatement");
    if (!{}.hasOwnProperty.call(attrs_794, "left")) {
      throw new Error("Missing attribute: " + "left");
    }
    if (!{}.hasOwnProperty.call(attrs_794, "right")) {
      throw new Error("Missing attribute: " + "right");
    }
  }
  _reduceState(reducer_796, state_797 = {}) {
    state_797.left = this.left instanceof VariableDeclaration ? this.left.reduce(reducer_796) : this.left instanceof ObjectBinding ? this.left.reduce(reducer_796) : this.left instanceof ArrayBinding ? this.left.reduce(reducer_796) : this.left instanceof BindingIdentifier ? this.left.reduce(reducer_796) : this.left instanceof MemberExpression ? this.left.reduce(reducer_796) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.left));
    }.call(this);
    state_797.right = this.right instanceof Expression ? this.right.reduce(reducer_796) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.right));
    }.call(this);
    ;
    return super._reduceState(reducer_796, state_797);
  }
  _cloneAttrs() {
    return Object.assign({ left: this.left, right: this.right }, super._cloneAttrs());
  }
  reduce(reducer_798) {
    let state_799 = this._reduceState(reducer_798);
    return reducer_798.reduceForOfStatement(this, state_799);
  }
  extend(attrs_800) {
    return new ForOfStatement(Object.assign(this._cloneAttrs(), attrs_800));
  }
}
IterationStatement.CloneReducer.prototype.reduceForOfStatement = function (term_801, state_802) {
  return new ForOfStatement(state_802);
};
exports.ForOfStatement = ForOfStatement;

class ForStatement extends IterationStatement {
  constructor(attrs_803, type_804) {
    super(attrs_803, type_804 || "ForStatement");
    if (!{}.hasOwnProperty.call(attrs_803, "init")) {
      throw new Error("Missing attribute: " + "init");
    }
    if (!{}.hasOwnProperty.call(attrs_803, "test")) {
      throw new Error("Missing attribute: " + "test");
    }
    if (!{}.hasOwnProperty.call(attrs_803, "update")) {
      throw new Error("Missing attribute: " + "update");
    }
  }
  _reduceState(reducer_805, state_806 = {}) {
    state_806.init = this.init == null ? null : this.init instanceof VariableDeclaration ? this.init.reduce(reducer_805) : this.init instanceof Expression ? this.init.reduce(reducer_805) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.init));
    }.call(this);
    state_806.test = this.test == null ? null : this.test instanceof Expression ? this.test.reduce(reducer_805) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.test));
    }.call(this);
    state_806.update = this.update == null ? null : this.update instanceof Expression ? this.update.reduce(reducer_805) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.update));
    }.call(this);
    ;
    return super._reduceState(reducer_805, state_806);
  }
  _cloneAttrs() {
    return Object.assign({ init: this.init, test: this.test, update: this.update }, super._cloneAttrs());
  }
  reduce(reducer_807) {
    let state_808 = this._reduceState(reducer_807);
    return reducer_807.reduceForStatement(this, state_808);
  }
  extend(attrs_809) {
    return new ForStatement(Object.assign(this._cloneAttrs(), attrs_809));
  }
}
IterationStatement.CloneReducer.prototype.reduceForStatement = function (term_810, state_811) {
  return new ForStatement(state_811);
};
exports.ForStatement = ForStatement;

class IfStatement extends Statement {
  constructor(attrs_812, type_813) {
    super(attrs_812, type_813 || "IfStatement");
    if (!{}.hasOwnProperty.call(attrs_812, "test")) {
      throw new Error("Missing attribute: " + "test");
    }
    if (!{}.hasOwnProperty.call(attrs_812, "consequent")) {
      throw new Error("Missing attribute: " + "consequent");
    }
    if (!{}.hasOwnProperty.call(attrs_812, "alternate")) {
      throw new Error("Missing attribute: " + "alternate");
    }
  }
  _reduceState(reducer_814, state_815 = {}) {
    state_815.test = this.test instanceof Expression ? this.test.reduce(reducer_814) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.test));
    }.call(this);
    state_815.consequent = this.consequent instanceof Statement ? this.consequent.reduce(reducer_814) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.consequent));
    }.call(this);
    state_815.alternate = this.alternate == null ? null : this.alternate instanceof Statement ? this.alternate.reduce(reducer_814) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.alternate));
    }.call(this);
    ;
    return super._reduceState(reducer_814, state_815);
  }
  _cloneAttrs() {
    return Object.assign({ test: this.test, consequent: this.consequent, alternate: this.alternate }, super._cloneAttrs());
  }
  reduce(reducer_816) {
    let state_817 = this._reduceState(reducer_816);
    return reducer_816.reduceIfStatement(this, state_817);
  }
  extend(attrs_818) {
    return new IfStatement(Object.assign(this._cloneAttrs(), attrs_818));
  }
}
Statement.CloneReducer.prototype.reduceIfStatement = function (term_819, state_820) {
  return new IfStatement(state_820);
};
exports.IfStatement = IfStatement;

class LabeledStatement extends Statement {
  constructor(attrs_821, type_822) {
    super(attrs_821, type_822 || "LabeledStatement");
    if (!{}.hasOwnProperty.call(attrs_821, "label")) {
      throw new Error("Missing attribute: " + "label");
    }
    if (!{}.hasOwnProperty.call(attrs_821, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
  }
  _reduceState(reducer_823, state_824 = {}) {
    state_824.label = this.label;
    state_824.body = this.body instanceof Statement ? this.body.reduce(reducer_823) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.body));
    }.call(this);
    ;
    return super._reduceState(reducer_823, state_824);
  }
  _cloneAttrs() {
    return Object.assign({ label: this.label, body: this.body }, super._cloneAttrs());
  }
  reduce(reducer_825) {
    let state_826 = this._reduceState(reducer_825);
    return reducer_825.reduceLabeledStatement(this, state_826);
  }
  extend(attrs_827) {
    return new LabeledStatement(Object.assign(this._cloneAttrs(), attrs_827));
  }
}
Statement.CloneReducer.prototype.reduceLabeledStatement = function (term_828, state_829) {
  return new LabeledStatement(state_829);
};
exports.LabeledStatement = LabeledStatement;

class ReturnStatement extends Statement {
  constructor(attrs_830, type_831) {
    super(attrs_830, type_831 || "ReturnStatement");
    if (!{}.hasOwnProperty.call(attrs_830, "expression")) {
      throw new Error("Missing attribute: " + "expression");
    }
  }
  _reduceState(reducer_832, state_833 = {}) {
    state_833.expression = this.expression == null ? null : this.expression instanceof Expression ? this.expression.reduce(reducer_832) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.expression));
    }.call(this);
    ;
    return super._reduceState(reducer_832, state_833);
  }
  _cloneAttrs() {
    return Object.assign({ expression: this.expression }, super._cloneAttrs());
  }
  reduce(reducer_834) {
    let state_835 = this._reduceState(reducer_834);
    return reducer_834.reduceReturnStatement(this, state_835);
  }
  extend(attrs_836) {
    return new ReturnStatement(Object.assign(this._cloneAttrs(), attrs_836));
  }
}
Statement.CloneReducer.prototype.reduceReturnStatement = function (term_837, state_838) {
  return new ReturnStatement(state_838);
};
exports.ReturnStatement = ReturnStatement;

class SwitchStatement extends Statement {
  constructor(attrs_839, type_840) {
    super(attrs_839, type_840 || "SwitchStatement");
    if (!{}.hasOwnProperty.call(attrs_839, "discriminant")) {
      throw new Error("Missing attribute: " + "discriminant");
    }
    if (!{}.hasOwnProperty.call(attrs_839, "cases")) {
      throw new Error("Missing attribute: " + "cases");
    }
  }
  _reduceState(reducer_841, state_842 = {}) {
    state_842.discriminant = this.discriminant instanceof Expression ? this.discriminant.reduce(reducer_841) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.discriminant));
    }.call(this);
    state_842.cases = this.cases.map(a_843 => a_843 instanceof SwitchCase ? a_843.reduce(reducer_841) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_843));
    }.call(this));
    ;
    return super._reduceState(reducer_841, state_842);
  }
  _cloneAttrs() {
    return Object.assign({ discriminant: this.discriminant, cases: this.cases }, super._cloneAttrs());
  }
  reduce(reducer_844) {
    let state_845 = this._reduceState(reducer_844);
    return reducer_844.reduceSwitchStatement(this, state_845);
  }
  extend(attrs_846) {
    return new SwitchStatement(Object.assign(this._cloneAttrs(), attrs_846));
  }
}
Statement.CloneReducer.prototype.reduceSwitchStatement = function (term_847, state_848) {
  return new SwitchStatement(state_848);
};
exports.SwitchStatement = SwitchStatement;

class SwitchStatementWithDefault extends Statement {
  constructor(attrs_849, type_850) {
    super(attrs_849, type_850 || "SwitchStatementWithDefault");
    if (!{}.hasOwnProperty.call(attrs_849, "discriminant")) {
      throw new Error("Missing attribute: " + "discriminant");
    }
    if (!{}.hasOwnProperty.call(attrs_849, "preDefaultCases")) {
      throw new Error("Missing attribute: " + "preDefaultCases");
    }
    if (!{}.hasOwnProperty.call(attrs_849, "defaultCase")) {
      throw new Error("Missing attribute: " + "defaultCase");
    }
    if (!{}.hasOwnProperty.call(attrs_849, "postDefaultCases")) {
      throw new Error("Missing attribute: " + "postDefaultCases");
    }
  }
  _reduceState(reducer_851, state_852 = {}) {
    state_852.discriminant = this.discriminant instanceof Expression ? this.discriminant.reduce(reducer_851) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.discriminant));
    }.call(this);
    state_852.preDefaultCases = this.preDefaultCases.map(a_853 => a_853 instanceof SwitchCase ? a_853.reduce(reducer_851) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_853));
    }.call(this));
    state_852.defaultCase = this.defaultCase instanceof SwitchDefault ? this.defaultCase.reduce(reducer_851) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.defaultCase));
    }.call(this);
    state_852.postDefaultCases = this.postDefaultCases.map(a_854 => a_854 instanceof SwitchCase ? a_854.reduce(reducer_851) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_854));
    }.call(this));
    ;
    return super._reduceState(reducer_851, state_852);
  }
  _cloneAttrs() {
    return Object.assign({ discriminant: this.discriminant, preDefaultCases: this.preDefaultCases, defaultCase: this.defaultCase, postDefaultCases: this.postDefaultCases }, super._cloneAttrs());
  }
  reduce(reducer_855) {
    let state_856 = this._reduceState(reducer_855);
    return reducer_855.reduceSwitchStatementWithDefault(this, state_856);
  }
  extend(attrs_857) {
    return new SwitchStatementWithDefault(Object.assign(this._cloneAttrs(), attrs_857));
  }
}
Statement.CloneReducer.prototype.reduceSwitchStatementWithDefault = function (term_858, state_859) {
  return new SwitchStatementWithDefault(state_859);
};
exports.SwitchStatementWithDefault = SwitchStatementWithDefault;

class ThrowStatement extends Statement {
  constructor(attrs_860, type_861) {
    super(attrs_860, type_861 || "ThrowStatement");
    if (!{}.hasOwnProperty.call(attrs_860, "expression")) {
      throw new Error("Missing attribute: " + "expression");
    }
  }
  _reduceState(reducer_862, state_863 = {}) {
    state_863.expression = this.expression instanceof Expression ? this.expression.reduce(reducer_862) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.expression));
    }.call(this);
    ;
    return super._reduceState(reducer_862, state_863);
  }
  _cloneAttrs() {
    return Object.assign({ expression: this.expression }, super._cloneAttrs());
  }
  reduce(reducer_864) {
    let state_865 = this._reduceState(reducer_864);
    return reducer_864.reduceThrowStatement(this, state_865);
  }
  extend(attrs_866) {
    return new ThrowStatement(Object.assign(this._cloneAttrs(), attrs_866));
  }
}
Statement.CloneReducer.prototype.reduceThrowStatement = function (term_867, state_868) {
  return new ThrowStatement(state_868);
};
exports.ThrowStatement = ThrowStatement;

class TryCatchStatement extends Statement {
  constructor(attrs_869, type_870) {
    super(attrs_869, type_870 || "TryCatchStatement");
    if (!{}.hasOwnProperty.call(attrs_869, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
    if (!{}.hasOwnProperty.call(attrs_869, "catchClause")) {
      throw new Error("Missing attribute: " + "catchClause");
    }
  }
  _reduceState(reducer_871, state_872 = {}) {
    state_872.body = this.body instanceof Block ? this.body.reduce(reducer_871) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.body));
    }.call(this);
    state_872.catchClause = this.catchClause instanceof CatchClause ? this.catchClause.reduce(reducer_871) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.catchClause));
    }.call(this);
    ;
    return super._reduceState(reducer_871, state_872);
  }
  _cloneAttrs() {
    return Object.assign({ body: this.body, catchClause: this.catchClause }, super._cloneAttrs());
  }
  reduce(reducer_873) {
    let state_874 = this._reduceState(reducer_873);
    return reducer_873.reduceTryCatchStatement(this, state_874);
  }
  extend(attrs_875) {
    return new TryCatchStatement(Object.assign(this._cloneAttrs(), attrs_875));
  }
}
Statement.CloneReducer.prototype.reduceTryCatchStatement = function (term_876, state_877) {
  return new TryCatchStatement(state_877);
};
exports.TryCatchStatement = TryCatchStatement;

class TryFinallyStatement extends Statement {
  constructor(attrs_878, type_879) {
    super(attrs_878, type_879 || "TryFinallyStatement");
    if (!{}.hasOwnProperty.call(attrs_878, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
    if (!{}.hasOwnProperty.call(attrs_878, "catchClause")) {
      throw new Error("Missing attribute: " + "catchClause");
    }
    if (!{}.hasOwnProperty.call(attrs_878, "finalizer")) {
      throw new Error("Missing attribute: " + "finalizer");
    }
  }
  _reduceState(reducer_880, state_881 = {}) {
    state_881.body = this.body instanceof Block ? this.body.reduce(reducer_880) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.body));
    }.call(this);
    state_881.catchClause = this.catchClause == null ? null : this.catchClause instanceof CatchClause ? this.catchClause.reduce(reducer_880) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.catchClause));
    }.call(this);
    state_881.finalizer = this.finalizer instanceof Block ? this.finalizer.reduce(reducer_880) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.finalizer));
    }.call(this);
    ;
    return super._reduceState(reducer_880, state_881);
  }
  _cloneAttrs() {
    return Object.assign({ body: this.body, catchClause: this.catchClause, finalizer: this.finalizer }, super._cloneAttrs());
  }
  reduce(reducer_882) {
    let state_883 = this._reduceState(reducer_882);
    return reducer_882.reduceTryFinallyStatement(this, state_883);
  }
  extend(attrs_884) {
    return new TryFinallyStatement(Object.assign(this._cloneAttrs(), attrs_884));
  }
}
Statement.CloneReducer.prototype.reduceTryFinallyStatement = function (term_885, state_886) {
  return new TryFinallyStatement(state_886);
};
exports.TryFinallyStatement = TryFinallyStatement;

class VariableDeclarationStatement extends Statement {
  constructor(attrs_887, type_888) {
    super(attrs_887, type_888 || "VariableDeclarationStatement");
    if (!{}.hasOwnProperty.call(attrs_887, "declaration")) {
      throw new Error("Missing attribute: " + "declaration");
    }
  }
  _reduceState(reducer_889, state_890 = {}) {
    state_890.declaration = this.declaration instanceof VariableDeclaration ? this.declaration.reduce(reducer_889) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.declaration));
    }.call(this);
    ;
    return super._reduceState(reducer_889, state_890);
  }
  _cloneAttrs() {
    return Object.assign({ declaration: this.declaration }, super._cloneAttrs());
  }
  reduce(reducer_891) {
    let state_892 = this._reduceState(reducer_891);
    return reducer_891.reduceVariableDeclarationStatement(this, state_892);
  }
  extend(attrs_893) {
    return new VariableDeclarationStatement(Object.assign(this._cloneAttrs(), attrs_893));
  }
}
Statement.CloneReducer.prototype.reduceVariableDeclarationStatement = function (term_894, state_895) {
  return new VariableDeclarationStatement(state_895);
};
exports.VariableDeclarationStatement = VariableDeclarationStatement;

class WithStatement extends Statement {
  constructor(attrs_896, type_897) {
    super(attrs_896, type_897 || "WithStatement");
    if (!{}.hasOwnProperty.call(attrs_896, "object")) {
      throw new Error("Missing attribute: " + "object");
    }
    if (!{}.hasOwnProperty.call(attrs_896, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
  }
  _reduceState(reducer_898, state_899 = {}) {
    state_899.object = this.object instanceof Expression ? this.object.reduce(reducer_898) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.object));
    }.call(this);
    state_899.body = this.body instanceof Statement ? this.body.reduce(reducer_898) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.body));
    }.call(this);
    ;
    return super._reduceState(reducer_898, state_899);
  }
  _cloneAttrs() {
    return Object.assign({ object: this.object, body: this.body }, super._cloneAttrs());
  }
  reduce(reducer_900) {
    let state_901 = this._reduceState(reducer_900);
    return reducer_900.reduceWithStatement(this, state_901);
  }
  extend(attrs_902) {
    return new WithStatement(Object.assign(this._cloneAttrs(), attrs_902));
  }
}
Statement.CloneReducer.prototype.reduceWithStatement = function (term_903, state_904) {
  return new WithStatement(state_904);
};
exports.WithStatement = WithStatement;

class WhileStatement extends IterationStatement {
  constructor(attrs_905, type_906) {
    super(attrs_905, type_906 || "WhileStatement");
    if (!{}.hasOwnProperty.call(attrs_905, "test")) {
      throw new Error("Missing attribute: " + "test");
    }
  }
  _reduceState(reducer_907, state_908 = {}) {
    state_908.test = this.test instanceof Expression ? this.test.reduce(reducer_907) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.test));
    }.call(this);
    ;
    return super._reduceState(reducer_907, state_908);
  }
  _cloneAttrs() {
    return Object.assign({ test: this.test }, super._cloneAttrs());
  }
  reduce(reducer_909) {
    let state_910 = this._reduceState(reducer_909);
    return reducer_909.reduceWhileStatement(this, state_910);
  }
  extend(attrs_911) {
    return new WhileStatement(Object.assign(this._cloneAttrs(), attrs_911));
  }
}
IterationStatement.CloneReducer.prototype.reduceWhileStatement = function (term_912, state_913) {
  return new WhileStatement(state_913);
};
exports.WhileStatement = WhileStatement;

class Pragma extends Term {
  constructor(attrs_914, type_915) {
    super(attrs_914, type_915 || "Pragma");
    if (!{}.hasOwnProperty.call(attrs_914, "kind")) {
      throw new Error("Missing attribute: " + "kind");
    }
    if (!{}.hasOwnProperty.call(attrs_914, "items")) {
      throw new Error("Missing attribute: " + "items");
    }
  }
  _reduceState(reducer_916, state_917 = {}) {
    state_917.kind = this.kind;
    state_917.items = this.items;
    ;
    return super._reduceState(reducer_916, state_917);
  }
  _cloneAttrs() {
    return Object.assign({ kind: this.kind, items: this.items }, super._cloneAttrs());
  }
  reduce(reducer_918) {
    let state_919 = this._reduceState(reducer_918);
    return reducer_918.reducePragma(this, state_919);
  }
  extend(attrs_920) {
    return new Pragma(Object.assign(this._cloneAttrs(), attrs_920));
  }
}
Term.CloneReducer.prototype.reducePragma = function (term_921, state_922) {
  return new Pragma(state_922);
};
exports.Pragma = Pragma;

class Block extends Term {
  constructor(attrs_923, type_924) {
    super(attrs_923, type_924 || "Block");
    if (!{}.hasOwnProperty.call(attrs_923, "statements")) {
      throw new Error("Missing attribute: " + "statements");
    }
  }
  _reduceState(reducer_925, state_926 = {}) {
    state_926.statements = this.statements.map(a_927 => a_927 instanceof Statement ? a_927.reduce(reducer_925) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_927));
    }.call(this));
    ;
    return super._reduceState(reducer_925, state_926);
  }
  _cloneAttrs() {
    return Object.assign({ statements: this.statements }, super._cloneAttrs());
  }
  reduce(reducer_928) {
    let state_929 = this._reduceState(reducer_928);
    return reducer_928.reduceBlock(this, state_929);
  }
  extend(attrs_930) {
    return new Block(Object.assign(this._cloneAttrs(), attrs_930));
  }
}
Term.CloneReducer.prototype.reduceBlock = function (term_931, state_932) {
  return new Block(state_932);
};
exports.Block = Block;

class CatchClause extends Term {
  constructor(attrs_933, type_934) {
    super(attrs_933, type_934 || "CatchClause");
    if (!{}.hasOwnProperty.call(attrs_933, "binding")) {
      throw new Error("Missing attribute: " + "binding");
    }
    if (!{}.hasOwnProperty.call(attrs_933, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
  }
  _reduceState(reducer_935, state_936 = {}) {
    state_936.binding = this.binding instanceof ObjectBinding ? this.binding.reduce(reducer_935) : this.binding instanceof ArrayBinding ? this.binding.reduce(reducer_935) : this.binding instanceof BindingIdentifier ? this.binding.reduce(reducer_935) : this.binding instanceof MemberExpression ? this.binding.reduce(reducer_935) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.binding));
    }.call(this);
    state_936.body = this.body instanceof Block ? this.body.reduce(reducer_935) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.body));
    }.call(this);
    ;
    return super._reduceState(reducer_935, state_936);
  }
  _cloneAttrs() {
    return Object.assign({ binding: this.binding, body: this.body }, super._cloneAttrs());
  }
  reduce(reducer_937) {
    let state_938 = this._reduceState(reducer_937);
    return reducer_937.reduceCatchClause(this, state_938);
  }
  extend(attrs_939) {
    return new CatchClause(Object.assign(this._cloneAttrs(), attrs_939));
  }
}
Term.CloneReducer.prototype.reduceCatchClause = function (term_940, state_941) {
  return new CatchClause(state_941);
};
exports.CatchClause = CatchClause;

class Directive extends Term {
  constructor(attrs_942, type_943) {
    super(attrs_942, type_943 || "Directive");
    if (!{}.hasOwnProperty.call(attrs_942, "rawValue")) {
      throw new Error("Missing attribute: " + "rawValue");
    }
  }
  _reduceState(reducer_944, state_945 = {}) {
    state_945.rawValue = this.rawValue;
    ;
    return super._reduceState(reducer_944, state_945);
  }
  _cloneAttrs() {
    return Object.assign({ rawValue: this.rawValue }, super._cloneAttrs());
  }
  reduce(reducer_946) {
    let state_947 = this._reduceState(reducer_946);
    return reducer_946.reduceDirective(this, state_947);
  }
  extend(attrs_948) {
    return new Directive(Object.assign(this._cloneAttrs(), attrs_948));
  }
}
Term.CloneReducer.prototype.reduceDirective = function (term_949, state_950) {
  return new Directive(state_950);
};
exports.Directive = Directive;

class FormalParameters extends Term {
  constructor(attrs_951, type_952) {
    super(attrs_951, type_952 || "FormalParameters");
    if (!{}.hasOwnProperty.call(attrs_951, "items")) {
      throw new Error("Missing attribute: " + "items");
    }
    if (!{}.hasOwnProperty.call(attrs_951, "rest")) {
      throw new Error("Missing attribute: " + "rest");
    }
  }
  _reduceState(reducer_953, state_954 = {}) {
    state_954.items = this.items.map(a_955 => a_955 instanceof ObjectBinding ? a_955.reduce(reducer_953) : a_955 instanceof ArrayBinding ? a_955.reduce(reducer_953) : a_955 instanceof BindingIdentifier ? a_955.reduce(reducer_953) : a_955 instanceof MemberExpression ? a_955.reduce(reducer_953) : a_955 instanceof BindingWithDefault ? a_955.reduce(reducer_953) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_955));
    }.call(this));
    state_954.rest = this.rest == null ? null : this.rest instanceof BindingIdentifier ? this.rest.reduce(reducer_953) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.rest));
    }.call(this);
    ;
    return super._reduceState(reducer_953, state_954);
  }
  _cloneAttrs() {
    return Object.assign({ items: this.items, rest: this.rest }, super._cloneAttrs());
  }
  reduce(reducer_956) {
    let state_957 = this._reduceState(reducer_956);
    return reducer_956.reduceFormalParameters(this, state_957);
  }
  extend(attrs_958) {
    return new FormalParameters(Object.assign(this._cloneAttrs(), attrs_958));
  }
}
Term.CloneReducer.prototype.reduceFormalParameters = function (term_959, state_960) {
  return new FormalParameters(state_960);
};
exports.FormalParameters = FormalParameters;

class FunctionBody extends Term {
  constructor(attrs_961, type_962) {
    super(attrs_961, type_962 || "FunctionBody");
    if (!{}.hasOwnProperty.call(attrs_961, "directives")) {
      throw new Error("Missing attribute: " + "directives");
    }
    if (!{}.hasOwnProperty.call(attrs_961, "statements")) {
      throw new Error("Missing attribute: " + "statements");
    }
  }
  _reduceState(reducer_963, state_964 = {}) {
    state_964.directives = this.directives.map(a_965 => a_965);
    state_964.statements = this.statements.map(a_966 => a_966 instanceof Statement ? a_966.reduce(reducer_963) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_966));
    }.call(this));
    ;
    return super._reduceState(reducer_963, state_964);
  }
  _cloneAttrs() {
    return Object.assign({ directives: this.directives, statements: this.statements }, super._cloneAttrs());
  }
  reduce(reducer_967) {
    let state_968 = this._reduceState(reducer_967);
    return reducer_967.reduceFunctionBody(this, state_968);
  }
  extend(attrs_969) {
    return new FunctionBody(Object.assign(this._cloneAttrs(), attrs_969));
  }
}
Term.CloneReducer.prototype.reduceFunctionBody = function (term_970, state_971) {
  return new FunctionBody(state_971);
};
exports.FunctionBody = FunctionBody;

class FunctionDeclaration extends Statement {
  constructor(attrs_972, type_973) {
    super(attrs_972, type_973 || "FunctionDeclaration");
    if (!{}.hasOwnProperty.call(attrs_972, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
    if (!{}.hasOwnProperty.call(attrs_972, "isGenerator")) {
      throw new Error("Missing attribute: " + "isGenerator");
    }
    if (!{}.hasOwnProperty.call(attrs_972, "params")) {
      throw new Error("Missing attribute: " + "params");
    }
    if (!{}.hasOwnProperty.call(attrs_972, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
  }
  _reduceState(reducer_974, state_975 = {}) {
    state_975.name = this.name instanceof BindingIdentifier ? this.name.reduce(reducer_974) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.name));
    }.call(this);
    state_975.isGenerator = this.isGenerator;
    state_975.params = this.params instanceof FormalParameters ? this.params.reduce(reducer_974) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.params));
    }.call(this);
    state_975.body = this.body instanceof FunctionBody ? this.body.reduce(reducer_974) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.body));
    }.call(this);
    ;
    return super._reduceState(reducer_974, state_975);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name, isGenerator: this.isGenerator, params: this.params, body: this.body }, super._cloneAttrs());
  }
  reduce(reducer_976) {
    let state_977 = this._reduceState(reducer_976);
    return reducer_976.reduceFunctionDeclaration(this, state_977);
  }
  extend(attrs_978) {
    return new FunctionDeclaration(Object.assign(this._cloneAttrs(), attrs_978));
  }
}
Statement.CloneReducer.prototype.reduceFunctionDeclaration = function (term_979, state_980) {
  return new FunctionDeclaration(state_980);
};
exports.FunctionDeclaration = FunctionDeclaration;

class FunctionDeclarationE extends Statement {
  constructor(attrs_981, type_982) {
    super(attrs_981, type_982 || "FunctionDeclarationE");
    if (!{}.hasOwnProperty.call(attrs_981, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
    if (!{}.hasOwnProperty.call(attrs_981, "isGenerator")) {
      throw new Error("Missing attribute: " + "isGenerator");
    }
    if (!{}.hasOwnProperty.call(attrs_981, "params")) {
      throw new Error("Missing attribute: " + "params");
    }
    if (!{}.hasOwnProperty.call(attrs_981, "body")) {
      throw new Error("Missing attribute: " + "body");
    }
  }
  _reduceState(reducer_983, state_984 = {}) {
    state_984.name = this.name instanceof BindingIdentifier ? this.name.reduce(reducer_983) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.name));
    }.call(this);
    state_984.isGenerator = this.isGenerator;
    state_984.params = this.params instanceof FormalParameters ? this.params.reduce(reducer_983) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.params));
    }.call(this);
    state_984.body = this.body.map(a_985 => a_985 instanceof Term ? a_985.reduce(reducer_983) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_985));
    }.call(this));
    ;
    return super._reduceState(reducer_983, state_984);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name, isGenerator: this.isGenerator, params: this.params, body: this.body }, super._cloneAttrs());
  }
  reduce(reducer_986) {
    let state_987 = this._reduceState(reducer_986);
    return reducer_986.reduceFunctionDeclarationE(this, state_987);
  }
  extend(attrs_988) {
    return new FunctionDeclarationE(Object.assign(this._cloneAttrs(), attrs_988));
  }
}
Statement.CloneReducer.prototype.reduceFunctionDeclarationE = function (term_989, state_990) {
  return new FunctionDeclarationE(state_990);
};
exports.FunctionDeclarationE = FunctionDeclarationE;

class Script extends Term {
  constructor(attrs_991, type_992) {
    super(attrs_991, type_992 || "Script");
    if (!{}.hasOwnProperty.call(attrs_991, "directives")) {
      throw new Error("Missing attribute: " + "directives");
    }
    if (!{}.hasOwnProperty.call(attrs_991, "statements")) {
      throw new Error("Missing attribute: " + "statements");
    }
  }
  _reduceState(reducer_993, state_994 = {}) {
    state_994.directives = this.directives.map(a_995 => a_995);
    state_994.statements = this.statements.map(a_996 => a_996 instanceof Statement ? a_996.reduce(reducer_993) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_996));
    }.call(this));
    ;
    return super._reduceState(reducer_993, state_994);
  }
  _cloneAttrs() {
    return Object.assign({ directives: this.directives, statements: this.statements }, super._cloneAttrs());
  }
  reduce(reducer_997) {
    let state_998 = this._reduceState(reducer_997);
    return reducer_997.reduceScript(this, state_998);
  }
  extend(attrs_999) {
    return new Script(Object.assign(this._cloneAttrs(), attrs_999));
  }
}
Term.CloneReducer.prototype.reduceScript = function (term_1000, state_1001) {
  return new Script(state_1001);
};
exports.Script = Script;

class SpreadElement extends Term {
  constructor(attrs_1002, type_1003) {
    super(attrs_1002, type_1003 || "SpreadElement");
    if (!{}.hasOwnProperty.call(attrs_1002, "expression")) {
      throw new Error("Missing attribute: " + "expression");
    }
  }
  _reduceState(reducer_1004, state_1005 = {}) {
    state_1005.expression = this.expression instanceof Expression ? this.expression.reduce(reducer_1004) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.expression));
    }.call(this);
    ;
    return super._reduceState(reducer_1004, state_1005);
  }
  _cloneAttrs() {
    return Object.assign({ expression: this.expression }, super._cloneAttrs());
  }
  reduce(reducer_1006) {
    let state_1007 = this._reduceState(reducer_1006);
    return reducer_1006.reduceSpreadElement(this, state_1007);
  }
  extend(attrs_1008) {
    return new SpreadElement(Object.assign(this._cloneAttrs(), attrs_1008));
  }
}
Term.CloneReducer.prototype.reduceSpreadElement = function (term_1009, state_1010) {
  return new SpreadElement(state_1010);
};
exports.SpreadElement = SpreadElement;

class Super extends Term {
  constructor(attrs_1011, type_1012) {
    super(attrs_1011, type_1012 || "Super");
  }
  _reduceState(reducer_1013, state_1014 = {}) {
    ;
    return super._reduceState(reducer_1013, state_1014);
  }
  _cloneAttrs() {
    return Object.assign({}, super._cloneAttrs());
  }
  reduce(reducer_1015) {
    let state_1016 = this._reduceState(reducer_1015);
    return reducer_1015.reduceSuper(this, state_1016);
  }
  extend(attrs_1017) {
    return new Super(Object.assign(this._cloneAttrs(), attrs_1017));
  }
}
Term.CloneReducer.prototype.reduceSuper = function (term_1018, state_1019) {
  return new Super(state_1019);
};
exports.Super = Super;

class SwitchCase extends Term {
  constructor(attrs_1020, type_1021) {
    super(attrs_1020, type_1021 || "SwitchCase");
    if (!{}.hasOwnProperty.call(attrs_1020, "test")) {
      throw new Error("Missing attribute: " + "test");
    }
    if (!{}.hasOwnProperty.call(attrs_1020, "consequent")) {
      throw new Error("Missing attribute: " + "consequent");
    }
  }
  _reduceState(reducer_1022, state_1023 = {}) {
    state_1023.test = this.test instanceof Expression ? this.test.reduce(reducer_1022) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.test));
    }.call(this);
    state_1023.consequent = this.consequent.map(a_1024 => a_1024 instanceof Statement ? a_1024.reduce(reducer_1022) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_1024));
    }.call(this));
    ;
    return super._reduceState(reducer_1022, state_1023);
  }
  _cloneAttrs() {
    return Object.assign({ test: this.test, consequent: this.consequent }, super._cloneAttrs());
  }
  reduce(reducer_1025) {
    let state_1026 = this._reduceState(reducer_1025);
    return reducer_1025.reduceSwitchCase(this, state_1026);
  }
  extend(attrs_1027) {
    return new SwitchCase(Object.assign(this._cloneAttrs(), attrs_1027));
  }
}
Term.CloneReducer.prototype.reduceSwitchCase = function (term_1028, state_1029) {
  return new SwitchCase(state_1029);
};
exports.SwitchCase = SwitchCase;

class SwitchDefault extends Term {
  constructor(attrs_1030, type_1031) {
    super(attrs_1030, type_1031 || "SwitchDefault");
    if (!{}.hasOwnProperty.call(attrs_1030, "consequent")) {
      throw new Error("Missing attribute: " + "consequent");
    }
  }
  _reduceState(reducer_1032, state_1033 = {}) {
    state_1033.consequent = this.consequent.map(a_1034 => a_1034 instanceof Statement ? a_1034.reduce(reducer_1032) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_1034));
    }.call(this));
    ;
    return super._reduceState(reducer_1032, state_1033);
  }
  _cloneAttrs() {
    return Object.assign({ consequent: this.consequent }, super._cloneAttrs());
  }
  reduce(reducer_1035) {
    let state_1036 = this._reduceState(reducer_1035);
    return reducer_1035.reduceSwitchDefault(this, state_1036);
  }
  extend(attrs_1037) {
    return new SwitchDefault(Object.assign(this._cloneAttrs(), attrs_1037));
  }
}
Term.CloneReducer.prototype.reduceSwitchDefault = function (term_1038, state_1039) {
  return new SwitchDefault(state_1039);
};
exports.SwitchDefault = SwitchDefault;

class TemplateElement extends Term {
  constructor(attrs_1040, type_1041) {
    super(attrs_1040, type_1041 || "TemplateElement");
    if (!{}.hasOwnProperty.call(attrs_1040, "rawValue")) {
      throw new Error("Missing attribute: " + "rawValue");
    }
  }
  _reduceState(reducer_1042, state_1043 = {}) {
    state_1043.rawValue = this.rawValue;
    ;
    return super._reduceState(reducer_1042, state_1043);
  }
  _cloneAttrs() {
    return Object.assign({ rawValue: this.rawValue }, super._cloneAttrs());
  }
  reduce(reducer_1044) {
    let state_1045 = this._reduceState(reducer_1044);
    return reducer_1044.reduceTemplateElement(this, state_1045);
  }
  extend(attrs_1046) {
    return new TemplateElement(Object.assign(this._cloneAttrs(), attrs_1046));
  }
}
Term.CloneReducer.prototype.reduceTemplateElement = function (term_1047, state_1048) {
  return new TemplateElement(state_1048);
};
exports.TemplateElement = TemplateElement;

class SyntaxTemplate extends Expression {
  constructor(attrs_1049, type_1050) {
    super(attrs_1049, type_1050 || "SyntaxTemplate");
    if (!{}.hasOwnProperty.call(attrs_1049, "template")) {
      throw new Error("Missing attribute: " + "template");
    }
  }
  _reduceState(reducer_1051, state_1052 = {}) {
    state_1052.template = this.template.map(a_1053 => a_1053 instanceof SyntaxTerm ? a_1053.reduce(reducer_1051) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_1053));
    }.call(this));
    ;
    return super._reduceState(reducer_1051, state_1052);
  }
  _cloneAttrs() {
    return Object.assign({ template: this.template }, super._cloneAttrs());
  }
  reduce(reducer_1054) {
    let state_1055 = this._reduceState(reducer_1054);
    return reducer_1054.reduceSyntaxTemplate(this, state_1055);
  }
  extend(attrs_1056) {
    return new SyntaxTemplate(Object.assign(this._cloneAttrs(), attrs_1056));
  }
}
Expression.CloneReducer.prototype.reduceSyntaxTemplate = function (term_1057, state_1058) {
  return new SyntaxTemplate(state_1058);
};
exports.SyntaxTemplate = SyntaxTemplate;

class SyntaxQuote extends Term {
  constructor(attrs_1059, type_1060) {
    super(attrs_1059, type_1060 || "SyntaxQuote");
    if (!{}.hasOwnProperty.call(attrs_1059, "name")) {
      throw new Error("Missing attribute: " + "name");
    }
    if (!{}.hasOwnProperty.call(attrs_1059, "template")) {
      throw new Error("Missing attribute: " + "template");
    }
  }
  _reduceState(reducer_1061, state_1062 = {}) {
    state_1062.name = this.name;
    state_1062.template = this.template;
    ;
    return super._reduceState(reducer_1061, state_1062);
  }
  _cloneAttrs() {
    return Object.assign({ name: this.name, template: this.template }, super._cloneAttrs());
  }
  reduce(reducer_1063) {
    let state_1064 = this._reduceState(reducer_1063);
    return reducer_1063.reduceSyntaxQuote(this, state_1064);
  }
  extend(attrs_1065) {
    return new SyntaxQuote(Object.assign(this._cloneAttrs(), attrs_1065));
  }
}
Term.CloneReducer.prototype.reduceSyntaxQuote = function (term_1066, state_1067) {
  return new SyntaxQuote(state_1067);
};
exports.SyntaxQuote = SyntaxQuote;

class VariableDeclaration extends Term {
  constructor(attrs_1068, type_1069) {
    super(attrs_1068, type_1069 || "VariableDeclaration");
    if (!{}.hasOwnProperty.call(attrs_1068, "kind")) {
      throw new Error("Missing attribute: " + "kind");
    }
    if (!{}.hasOwnProperty.call(attrs_1068, "declarators")) {
      throw new Error("Missing attribute: " + "declarators");
    }
  }
  _reduceState(reducer_1070, state_1071 = {}) {
    state_1071.kind = this.kind;
    state_1071.declarators = this.declarators.map(a_1072 => a_1072 instanceof VariableDeclarator ? a_1072.reduce(reducer_1070) : function () {
      throw new Error("Unknown object: " + JSON.stringify(a_1072));
    }.call(this));
    ;
    return super._reduceState(reducer_1070, state_1071);
  }
  _cloneAttrs() {
    return Object.assign({ kind: this.kind, declarators: this.declarators }, super._cloneAttrs());
  }
  reduce(reducer_1073) {
    let state_1074 = this._reduceState(reducer_1073);
    return reducer_1073.reduceVariableDeclaration(this, state_1074);
  }
  extend(attrs_1075) {
    return new VariableDeclaration(Object.assign(this._cloneAttrs(), attrs_1075));
  }
}
Term.CloneReducer.prototype.reduceVariableDeclaration = function (term_1076, state_1077) {
  return new VariableDeclaration(state_1077);
};
exports.VariableDeclaration = VariableDeclaration;

class VariableDeclarator extends Term {
  constructor(attrs_1078, type_1079) {
    super(attrs_1078, type_1079 || "VariableDeclarator");
    if (!{}.hasOwnProperty.call(attrs_1078, "binding")) {
      throw new Error("Missing attribute: " + "binding");
    }
    if (!{}.hasOwnProperty.call(attrs_1078, "init")) {
      throw new Error("Missing attribute: " + "init");
    }
  }
  _reduceState(reducer_1080, state_1081 = {}) {
    state_1081.binding = this.binding instanceof ObjectBinding ? this.binding.reduce(reducer_1080) : this.binding instanceof ArrayBinding ? this.binding.reduce(reducer_1080) : this.binding instanceof BindingIdentifier ? this.binding.reduce(reducer_1080) : this.binding instanceof MemberExpression ? this.binding.reduce(reducer_1080) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.binding));
    }.call(this);
    state_1081.init = this.init == null ? null : this.init instanceof Expression ? this.init.reduce(reducer_1080) : function () {
      throw new Error("Unknown object: " + JSON.stringify(this.init));
    }.call(this);
    ;
    return super._reduceState(reducer_1080, state_1081);
  }
  _cloneAttrs() {
    return Object.assign({ binding: this.binding, init: this.init }, super._cloneAttrs());
  }
  reduce(reducer_1082) {
    let state_1083 = this._reduceState(reducer_1082);
    return reducer_1082.reduceVariableDeclarator(this, state_1083);
  }
  extend(attrs_1084) {
    return new VariableDeclarator(Object.assign(this._cloneAttrs(), attrs_1084));
  }
}
Term.CloneReducer.prototype.reduceVariableDeclarator = function (term_1085, state_1086) {
  return new VariableDeclarator(state_1086);
};
exports.VariableDeclarator = VariableDeclarator;

class OperatorDeclarator extends VariableDeclarator {
  constructor(attrs_1087, type_1088) {
    super(attrs_1087, type_1088 || "OperatorDeclarator");
    if (!{}.hasOwnProperty.call(attrs_1087, "prec")) {
      throw new Error("Missing attribute: " + "prec");
    }
    if (!{}.hasOwnProperty.call(attrs_1087, "assoc")) {
      throw new Error("Missing attribute: " + "assoc");
    }
  }
  _reduceState(reducer_1089, state_1090 = {}) {
    state_1090.prec = this.prec;
    state_1090.assoc = this.assoc;
    ;
    return super._reduceState(reducer_1089, state_1090);
  }
  _cloneAttrs() {
    return Object.assign({ prec: this.prec, assoc: this.assoc }, super._cloneAttrs());
  }
  reduce(reducer_1091) {
    let state_1092 = this._reduceState(reducer_1091);
    return reducer_1091.reduceOperatorDeclarator(this, state_1092);
  }
  extend(attrs_1093) {
    return new OperatorDeclarator(Object.assign(this._cloneAttrs(), attrs_1093));
  }
}
VariableDeclarator.CloneReducer.prototype.reduceOperatorDeclarator = function (term_1094, state_1095) {
  return new OperatorDeclarator(state_1095);
};
exports.OperatorDeclarator = OperatorDeclarator;
//# sourceMappingURL=data:application/json;base64,