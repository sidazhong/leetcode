'lang sweet.js';

import { Either, Left } from './either';
import { Maybe, Just, Nothing } from './maybe';

export class ImmutableContext {

  constructor(ctx) {
    this.ctx = ctx;
    this.mark = ctx.mark();
    let v = ctx.next();
    ctx.reset(this.mark);
    this.value = v.done ? new Nothing() : Maybe.of(v.value);
  }

  head() {
    return this.value;
  }

  rest() {
    this.ctx.reset(this.mark);
    this.ctx.next();
    return new ImmutableContext(this.ctx);
  }
}

export default class Parser {

  constructor(runner) {
    this._runner = runner;
  }

  run(ctx) {
    if (!(ctx instanceof ImmutableContext)) {
      ctx = new ImmutableContext(ctx);
    }
    return this._runner(ctx);
  }

  // $FlowFixMe: computed properties still not supported in flow
  static ['fantasy-land/of'](a) {
    return Parser.of(a);
  }

  static of(a) {
    return new Parser(ctx => Either.of([a, ctx]));
  }

  static failure(msg) {
    return new Parser(ctx => {
      return new Left(msg);
    });
  }

  // $FlowFixMe: computed properties still not supported in flow
  static ['fantasy-land/zero']() {
    return Parser.zero();
  }

  static zero() {
    return Parser.failure('');
  }

  static empty() {
    return new Parser(ctx => {
      let i = ctx.head();
      if (i instanceof Nothing) {
        return Either.of([void 0, ctx.rest()]);
      } else {
        return new Left('token stream is not empty');
      }
    });
  }

  static item() {
    return new Parser(ctx => {
      let i = ctx.head();
      if (i instanceof Just) {
        return Either.of([i.value, ctx.rest()]);
      } else {
        return new Left('no more tokens to consume');
      }
    });
  }

  static sat(f, msg = 'Did not satisfy predicate') {
    return Parser.item().chain(item => f(item) ? Parser.of(item) : Parser.failure(msg));
  }

  // $FlowFixMe: computed properties still not supported in flow
  ['fantasy-land/ap'](parser) {
    return this.ap(parser);
  }

  ap(parser) {
    return new Parser(ctx => {
      return this.run(ctx).chain(([a, ctx]) => parser.run(ctx).map(([f, ctx]) => [f(a), ctx]));
    });
  }

  // $FlowFixMe: computed properties still not supported in flow
  ['fantasy-land/map'](f) {
    return this.map(f);
  }

  map(f) {
    return new Parser(ctx => this.run(ctx).map(([aval, ctx]) => [f(aval), ctx]));
  }

  // $FlowFixMe: computed properties still not supported in flow
  ['fantasy-land/alt'](other) {
    return this.alt(other);
  }

  alt(other) {
    return new Parser(ctx => {
      let r = this.run(ctx);
      if (r instanceof Left) {
        return other.run(ctx);
      }
      return r;
    });
  }

  // $FlowFixMe: computed properties still not supported in flow
  ['fantasy-land/chain'](f) {
    return this.chain(f);
  }

  chain(f) {
    return new Parser(ctx => this.run(ctx).map(([v, ctx]) => [f(v), ctx]).chain(([parser, ctx]) => parser.run(ctx)));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,