'lang sweet.js';

export class Either {

  // $FlowFixMe: computed properties still not supported in flow
  static ['fantasy-land/of'](v) {
    return Either.of(v);
  }

  static of(v) {
    return new Right(v);
  }

  static isLeft(e) {
    return e instanceof Left;
  }

  static isRight(e) {
    return e instanceof Right;
  }

  // $FlowFixMe: computed properties still not supported in flow
  ['fantasy-land/map'](f) {
    return this.map(f);
  }

  // $FlowFixMe: computed properties still not supported in flow
  ['fantasy-land/ap'](either) {
    return this.ap(either);
  }

  // $FlowFixMe: computed properties still not supported in flow
  ['fantasy-land/chain'](f) {
    return this.chain(f);
  }

  // $FlowFixMe: computed properties still not supported in flow
  ['fantasy-land/extend'](e) {
    return this.extend(e);
  }

  // $FlowFixMe: computed properties still not supported in flow
  ['fantasy-land/bimap'](l, r) {
    return this.bimap(l, r);
  }

  map(f) {
    throw new Error();
  }

  ap(either) {
    throw new Error();
  }

  chain(f) {
    throw new Error();
  }

  extend(e) {
    throw new Error();
  }

  bimap(l, r) {
    throw new Error();
  }

  either(l, r) {
    throw new Error();
  }

  foreach(l, r) {
    throw new Error();
  }
}
export class Left extends Either {

  constructor(left) {
    super();
    this.left = left;
  }

  map(f) {
    return new Left(this.left);
  }

  ap(either) {
    return new Left(this.left);
  }

  chain(f) {
    return new Left(this.left);
  }

  extend(e) {
    return new Left(this.left);
  }

  bimap(l, r) {
    return new Left(l(this.left));
  }

  either(l, r) {
    return l(this.left);
  }

  foreach(l, r) {
    l(this.left);
    return new Left(this.left);
  }
}

export class Right extends Either {

  constructor(right) {
    super();
    this.right = right;
  }

  map(f) {
    return new Right(f(this.right));
  }

  ap(either) {
    if (either instanceof Left) {
      return new Left(either.left);
    } else if (either instanceof Right && typeof this.right === 'function') {
      return new Right(this.right(either.right));
    }
    throw new Error('Invalid type');
  }

  chain(f) {
    return f(this.right);
  }

  extend(e) {
    return new Right(e(this));
  }

  bimap(l, r) {
    return new Right(r(this.right));
  }

  either(l, r) {
    return r(this.right);
  }

  foreach(l, r) {
    r(this.right);
    return new Right(this.right);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,