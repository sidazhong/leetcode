import collections
class Solution(object):
    # 数据结构
    cols =  {
        0:[5,6,8,4,7],
        1:[3,9,6]
    }
    row =  {
        0:[5,3,7],
        1:[6,1,9,5]
    }
    squre = {
        (0,0):[5,3,6,9,8],
        (0,1):[7,1,9,5]
    }

    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """

        cols={}
        rows={}
        squres={}
        for k in range(9):
            cols[k]=[]
            rows[k]=[]
        for k in range(3):
            for kk in range(3):
                squres[(k,kk)]=[]

        for r in range(9):
            for c in range(9):
                if board[r][c] == ".":
                    continue
                if (board[r][c] in cols[c]) or (board[r][c] in rows[r]) or (board[r][c] in squres[(r//3,c//3)]):
                    return False

                cols[c].append(board[r][c])
                rows[r].append(board[r][c])
                squres[(r//3,c//3)].append(board[r][c])
        return True


board = [["5","3",".",".","7",".",".",".","."]
        ,["6",".",".","1","9","5",".",".","."]
        ,[".","9","8",".",".",".",".","6","."]
        ,["8",".",".",".","6",".",".",".","3"]
        ,["4",".",".","8",".","3",".",".","1"]
        ,["7",".",".",".","2",".",".",".","6"]
        ,[".","6",".",".",".",".","2","8","."]
        ,[".",".",".","4","1","9",".",".","5"]
        ,[".",".",".",".","8",".",".","7","9"]]

'''
board = [["8","3",".",".","7",".",".",".","."]
        ,["6",".",".","1","9","5",".",".","."]
        ,[".","9","8",".",".",".",".","6","."]
        ,["8",".",".",".","6",".",".",".","3"]
        ,["4",".",".","8",".","3",".",".","1"]
        ,["7",".",".",".","2",".",".",".","6"]
        ,[".","6",".",".",".",".","2","8","."]
        ,[".",".",".","4","1","9",".",".","5"]
        ,[".",".",".",".","8",".",".","7","9"]]
'''

print(Solution().isValidSudoku(board))

